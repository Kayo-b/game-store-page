{"ast":null,"code":"import _regeneratorRuntime from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/home/kayo-b/the_odin_project/game-store-page/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.3.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  return path.replace(/^:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n    if (optional === \"?\") {\n      return param == null ? \"\" : param;\n    }\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n    return param;\n  }).replace(/\\/:(\\w+)(\\??)/g, function (_, key, optional) {\n    var param = params[key];\n    if (optional === \"?\") {\n      return param == null ? \"\" : \"/\" + param;\n    }\n    if (param == null) {\n      invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n    }\n    return \"/\" + param;\n  }) // Remove any optional markers from optional static segments\n  .replace(/\\?/g, \"\").replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref3 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref3.pathname,\n    _ref3$search = _ref3.search,\n    search = _ref3$search === void 0 ? \"\" : _ref3$search,\n    _ref3$hash = _ref3.hash,\n    hash = _ref3$hash === void 0 ? \"\" : _ref3$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref4 = _slicedToArray(_ref, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this5.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this5.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this5.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref5 = _slicedToArray(_ref2, 2),\n          key = _ref5[0],\n          value = _ref5[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n          key = _step2$value[0];\n        deleteBlocker(key);\n      } // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n            currentLocation = state.location;\n            nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n            // URL from window.location, so we need to encode it here so the behavior\n            // remains the same as POP and non-data-router usages.  new URL() does all\n            // the same encoding we'd get from a history.pushState/window.location read\n            // without having to touch history\n            nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n            userReplace = opts && opts.replace != null ? opts.replace : undefined;\n            historyAction = Action.Push;\n            if (userReplace === true) {\n              historyAction = Action.Replace;\n            } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n              // By default on submissions to the current location we REPLACE so that\n              // users don't have to double-click the back button to get to the prior\n              // location.  If the user redirects to a different location from the\n              // action/loader this will be ignored and the redirect will be a PUSH\n              historyAction = Action.Replace;\n            }\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            blockerKey = shouldBlockNavigation({\n              currentLocation: currentLocation,\n              nextLocation: nextLocation,\n              historyAction: historyAction\n            });\n            if (!blockerKey) {\n              _context2.next = 15;\n              break;\n            }\n            // Put the blocker into a blocked state\n            updateBlocker(blockerKey, {\n              state: \"blocked\",\n              location: nextLocation,\n              proceed: function proceed() {\n                updateBlocker(blockerKey, {\n                  state: \"proceeding\",\n                  proceed: undefined,\n                  reset: undefined,\n                  location: nextLocation\n                }); // Send the same navigation through\n\n                navigate(to, opts);\n              },\n              reset: function reset() {\n                deleteBlocker(blockerKey);\n                updateState({\n                  blockers: new Map(state.blockers)\n                });\n              }\n            });\n            return _context2.abrupt(\"return\");\n          case 15:\n            _context2.next = 17;\n            return startNavigation(historyAction, nextLocation, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace\n            });\n          case 17:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 14;\n              break;\n            }\n            _error = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch2 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n            cancelActiveDeferreds();\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            });\n            return _context3.abrupt(\"return\");\n          case 14:\n            if (!(isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n              _context3.next = 17;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            });\n            return _context3.abrupt(\"return\");\n          case 17:\n            // Create a controller/Request for this navigation\n\n            pendingNavigationController = new AbortController();\n            request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 23;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n            _context3.next = 34;\n            break;\n          case 23:\n            if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n              _context3.next = 34;\n              break;\n            }\n            _context3.next = 26;\n            return handleAction(request, location, opts.submission, matches, {\n              replace: opts.replace\n            });\n          case 26:\n            actionOutput = _context3.sent;\n            if (!actionOutput.shortCircuited) {\n              _context3.next = 29;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 29:\n            pendingActionData = actionOutput.pendingActionData;\n            pendingError = actionOutput.pendingActionError;\n            navigation = _extends({\n              state: \"loading\",\n              location: location\n            }, opts.submission);\n            loadingNavigation = navigation; // Create a GET request for the loaders\n\n            request = new Request(request.url, {\n              signal: request.signal\n            });\n          case 34:\n            _context3.next = 36;\n            return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n          case 36:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 42;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 42:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n\n            pendingNavigationController = null;\n            completeNavigation(location, _extends({\n              matches: matches\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}, {\n              loaderData: loaderData,\n              errors: errors\n            }));\n          case 44:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            interruptActiveLoads(); // Put us in a submitting state\n            navigation = _extends({\n              state: \"submitting\",\n              location: location\n            }, submission);\n            updateState({\n              navigation: navigation\n            }); // Call our action and get the result\n            actionMatch = getTargetMatch(matches, location);\n            if (actionMatch.route.action) {\n              _context4.next = 8;\n              break;\n            }\n            result = {\n              type: ResultType.error,\n              error: getInternalRouterError(405, {\n                method: request.method,\n                pathname: location.pathname,\n                routeId: actionMatch.route.id\n              })\n            };\n            _context4.next = 13;\n            break;\n          case 8:\n            _context4.next = 10;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n          case 10:\n            result = _context4.sent;\n            if (!request.signal.aborted) {\n              _context4.next = 13;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context4.next = 18;\n              break;\n            }\n            if (opts && opts.replace != null) {\n              replace = opts.replace;\n            } else {\n              // If the user didn't explicity indicate replace behavior, replace if\n              // we redirected to the exact same location we're currently at to avoid\n              // double back-buttons\n              replace = result.location === state.location.pathname + state.location.search;\n            }\n            _context4.next = 17;\n            return startRedirectNavigation(state, result, {\n              submission: submission,\n              replace: replace\n            });\n          case 17:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 18:\n            if (!isErrorResult(result)) {\n              _context4.next = 22;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n            // action threw an error that'll be rendered in an errorElement, we fall\n            // back to PUSH so that the user can use the back button to get back to\n            // the pre-submission form location to try again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              // Send back an empty object we can use to clear out any prior actionData\n              pendingActionData: {},\n              pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n          case 22:\n            if (!isDeferredResult(result)) {\n              _context4.next = 24;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 24:\n            return _context4.abrupt(\"return\", {\n              pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n            });\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, actionData, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation;\n            if (!loadingNavigation) {\n              navigation = _extends({\n                state: \"loading\",\n                location: location,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission);\n              loadingNavigation = navigation;\n            } // If this was a redirect from an action we don't have a \"submission\" but\n            // we have it on the loading navigation so use that if available\n            activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n              formMethod: loadingNavigation.formMethod,\n              formAction: loadingNavigation.formAction,\n              formData: loadingNavigation.formData,\n              formEncType: loadingNavigation.formEncType\n            } : undefined;\n            _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            }); // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 8;\n              break;\n            }\n            completeNavigation(location, _extends({\n              matches: matches,\n              loaderData: {},\n              // Commit pending error if we're short circuiting\n              errors: pendingError || null\n            }, pendingActionData ? {\n              actionData: pendingActionData\n            } : {}));\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 8:\n            // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n\n            if (!isUninterruptedRevalidation) {\n              revalidatingFetchers.forEach(function (rf) {\n                var fetcher = state.fetchers.get(rf.key);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: fetcher && fetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(rf.key, revalidatingFetcher);\n              });\n              actionData = pendingActionData || state.actionData;\n              updateState(_extends({\n                navigation: loadingNavigation\n              }, actionData ? Object.keys(actionData).length === 0 ? {\n                actionData: null\n              } : {\n                actionData: actionData\n              } : {}, revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            }\n            pendingNavigationLoadId = ++incrementingLoadId;\n            revalidatingFetchers.forEach(function (rf) {\n              return fetchControllers.set(rf.key, pendingNavigationController);\n            });\n            _context5.next = 13;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n          case 13:\n            _yield$callLoadersAnd = _context5.sent;\n            results = _yield$callLoadersAnd.results;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 19;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 19:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n\n            revalidatingFetchers.forEach(function (rf) {\n              return fetchControllers.delete(rf.key);\n            }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context5.next = 25;\n              break;\n            }\n            _context5.next = 24;\n            return startRedirectNavigation(state, redirect, {\n              replace: replace\n            });\n          case 24:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 25:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            return _context5.abrupt(\"return\", _extends({\n              loaderData: loaderData,\n              errors: errors\n            }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 30:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission;\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path,\n      match: match,\n      matches: matches\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (match.route.action) {\n              _context6.next = 6;\n              break;\n            }\n            _error2 = getInternalRouterError(405, {\n              method: submission.formMethod,\n              pathname: path,\n              routeId: routeId\n            });\n            setFetcherError(key, routeId, _error2);\n            return _context6.abrupt(\"return\");\n          case 6:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            fetcher = _extends({\n              state: \"submitting\"\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, fetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the action for the fetcher\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n            fetchControllers.set(key, abortController);\n            _context6.next = 15;\n            return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n          case 15:\n            actionResult = _context6.sent;\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 19;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 19:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 26;\n              break;\n            }\n            fetchControllers.delete(key);\n            fetchRedirectIds.add(key);\n            loadingFetcher = _extends({\n              state: \"loading\"\n            }, submission, {\n              data: undefined,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n              isFetchActionRedirect: true\n            }));\n          case 26:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 29;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 29:\n            if (!isDeferredResult(actionResult)) {\n              _context6.next = 31;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 31:\n            // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = _extends({\n              state: \"loading\",\n              data: actionResult.data\n            }, submission, {\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined,\n            // No need to send through errors since we short circuit above\n            fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (rf) {\n              return rf.key !== key;\n            }).forEach(function (rf) {\n              var staleKey = rf.key;\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = {\n                state: \"loading\",\n                data: existingFetcher && existingFetcher.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              fetchControllers.set(staleKey, abortController);\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            _context6.next = 44;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 44:\n            _yield$callLoadersAnd2 = _context6.sent;\n            results = _yield$callLoadersAnd2.results;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 50;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 50:\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (r) {\n              return fetchControllers.delete(r.key);\n            });\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context6.next = 56;\n              break;\n            }\n            return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n          case 56:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n            doneFetcher = {\n              state: \"idle\",\n              data: actionResult.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState(_extends({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n              }, didAbortFetchLoads ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n              isRevalidationRequired = false;\n            }\n          case 61:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n            loadingFetcher = _extends({\n              state: \"loading\",\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            }, submission, {\n              data: existingFetcher && existingFetcher.data,\n              \" _hasFetcherDoneAnything \": true\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the loader for this fetcher route match\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n            fetchControllers.set(key, abortController);\n            _context7.next = 9;\n            return callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename);\n          case 9:\n            result = _context7.sent;\n            if (!isDeferredResult(result)) {\n              _context7.next = 17;\n              break;\n            }\n            _context7.next = 13;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 13:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 16;\n              break;\n            }\n            _context7.t0 = result;\n          case 16:\n            result = _context7.t0;\n          case 17:\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 20:\n            if (!isRedirectResult(result)) {\n              _context7.next = 24;\n              break;\n            }\n            _context7.next = 23;\n            return startRedirectNavigation(state, result);\n          case 23:\n            return _context7.abrupt(\"return\");\n          case 24:\n            if (!isErrorResult(result)) {\n              _context7.next = 29;\n              break;\n            }\n            boundaryMatch = findNearestBoundary(state.matches, routeId);\n            state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n            // do we need to behave any differently with our non-redirect errors?\n            // What if it was a non-redirect Response?\n\n            updateState({\n              fetchers: new Map(state.fetchers),\n              errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n            return _context7.abrupt(\"return\");\n          case 29:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n            doneFetcher = {\n              state: \"idle\",\n              data: result.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              \" _hasFetcherDoneAnything \": true\n            };\n            state.fetchers.set(key, doneFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n          case 33:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref6, submission, replace, isFetchActionRedirect, redirectLocation, newOrigin, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref6 = _temp === void 0 ? {} : _temp, submission = _ref6.submission, replace = _ref6.replace, isFetchActionRedirect = _ref6.isFetchActionRedirect;\n            if (redirect.revalidate) {\n              isRevalidationRequired = true;\n            }\n            redirectLocation = createLocation(state.location, redirect.location,\n            // TODO: This can be removed once we get rid of useTransition in Remix v2\n            _extends({\n              _isRedirect: true\n            }, isFetchActionRedirect ? {\n              _isFetchActionRedirect: true\n            } : {}));\n            invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n            if (!(ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n              _context8.next = 9;\n              break;\n            }\n            newOrigin = init.history.createURL(redirect.location).origin;\n            if (!(window.location.origin !== newOrigin)) {\n              _context8.next = 9;\n              break;\n            }\n            if (replace) {\n              window.location.replace(redirect.location);\n            } else {\n              window.location.assign(redirect.location);\n            }\n            return _context8.abrupt(\"return\");\n          case 9:\n            // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n            // state.navigation\n            _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n            if (!submission && formMethod && formAction && formData && formEncType) {\n              submission = {\n                formMethod: formMethod,\n                formAction: formAction,\n                formEncType: formEncType,\n                formData: formData\n              };\n            } // If this was a 307/308 submission we want to preserve the HTTP method and\n            // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n            // redirected location\n            if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n              _context8.next = 18;\n              break;\n            }\n            _context8.next = 16;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              submission: _extends({}, submission, {\n                formAction: redirect.location\n              }),\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 16:\n            _context8.next = 20;\n            break;\n          case 18:\n            _context8.next = 20;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: {\n                state: \"loading\",\n                location: redirectLocation,\n                formMethod: submission ? submission.formMethod : undefined,\n                formAction: submission ? submission.formAction : undefined,\n                formEncType: submission ? submission.formEncType : undefined,\n                formData: submission ? submission.formData : undefined\n              },\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 20:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, router.basename);\n            })), _toConsumableArray(fetchersToLoad.map(function (f) {\n              return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, router.basename);\n            }))));\n          case 2:\n            results = _context9.sent;\n            loaderResults = results.slice(0, matchesToLoad.length);\n            fetcherResults = results.slice(matchesToLoad.length);\n            _context9.next = 7;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n              return f.match;\n            }), fetcherResults, request.signal, true)]);\n          case 7:\n            return _context9.abrupt(\"return\", {\n              results: results,\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n          key = _step5$value[0],\n          id = _step5$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n      nextLocation = _ref2.nextLocation,\n      historyAction = _ref2.historyAction;\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    var entries = Array.from(blockerFunctions.entries());\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n      blockerKey = _entries[0],\n      blockerFunction = _entries[1];\n    var blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request, _temp2) {\n      var _ref7, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _ref7 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref7.requestContext;\n            url = new URL(request.url);\n            method = request.method.toLowerCase();\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"head\")) {\n              _context10.next = 11;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: method\n            });\n            _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: methodNotAllowedMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, route.id, error),\n              statusCode: error.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 11:\n            if (matches) {\n              _context10.next = 15;\n              break;\n            }\n            _error3 = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n            return _context10.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: notFoundMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, _route2.id, _error3),\n              statusCode: _error3.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 15:\n            _context10.next = 17;\n            return queryImpl(request, location, matches, requestContext);\n          case 17:\n            result = _context10.sent;\n            if (!isResponse(result)) {\n              _context10.next = 20;\n              break;\n            }\n            return _context10.abrupt(\"return\", result);\n          case 20:\n            return _context10.abrupt(\"return\", _extends({\n              location: location,\n              basename: basename\n            }, result));\n          case 21:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, _temp3) {\n      var _ref8, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref8 = _temp3 === void 0 ? {} : _temp3, routeId = _ref8.routeId, requestContext = _ref8.requestContext;\n            url = new URL(request.url);\n            method = request.method.toLowerCase();\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"head\" && method !== \"options\")) {\n              _context11.next = 9;\n              break;\n            }\n            throw getInternalRouterError(405, {\n              method: method\n            });\n          case 9:\n            if (matches) {\n              _context11.next = 11;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 11:\n            match = routeId ? matches.find(function (m) {\n              return m.route.id === routeId;\n            }) : getTargetMatch(matches, location);\n            if (!(routeId && !match)) {\n              _context11.next = 16;\n              break;\n            }\n            throw getInternalRouterError(403, {\n              pathname: location.pathname,\n              routeId: routeId\n            });\n          case 16:\n            if (match) {\n              _context11.next = 18;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 18:\n            _context11.next = 20;\n            return queryImpl(request, location, matches, requestContext, match);\n          case 20:\n            result = _context11.sent;\n            if (!isResponse(result)) {\n              _context11.next = 23;\n              break;\n            }\n            return _context11.abrupt(\"return\", result);\n          case 23:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context11.next = 26;\n              break;\n            }\n            throw error;\n          case 26:\n            if (!result.actionData) {\n              _context11.next = 28;\n              break;\n            }\n            return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n          case 28:\n            if (!result.loaderData) {\n              _context11.next = 32;\n              break;\n            }\n            data = Object.values(result.loaderData)[0];\n            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n              data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n            }\n            return _context11.abrupt(\"return\", data);\n          case 32:\n            return _context11.abrupt(\"return\", undefined);\n          case 33:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _context12.prev = 1;\n            if (!isMutationMethod(request.method.toLowerCase())) {\n              _context12.next = 7;\n              break;\n            }\n            _context12.next = 5;\n            return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n          case 5:\n            _result = _context12.sent;\n            return _context12.abrupt(\"return\", _result);\n          case 7:\n            _context12.next = 9;\n            return loadRouteData(request, matches, requestContext, routeMatch);\n          case 9:\n            result = _context12.sent;\n            return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n              actionData: null,\n              actionHeaders: {}\n            }));\n          case 13:\n            _context12.prev = 13;\n            _context12.t0 = _context12[\"catch\"](1);\n            if (!isQueryRouteResponse(_context12.t0)) {\n              _context12.next = 19;\n              break;\n            }\n            if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n              _context12.next = 18;\n              break;\n            }\n            throw _context12.t0.response;\n          case 18:\n            return _context12.abrupt(\"return\", _context12.t0.response);\n          case 19:\n            if (!isRedirectResponse(_context12.t0)) {\n              _context12.next = 21;\n              break;\n            }\n            return _context12.abrupt(\"return\", _context12.t0);\n          case 21:\n            throw _context12.t0;\n          case 22:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error4, boundaryMatch, _context13, loaderRequest, context;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            if (actionMatch.route.action) {\n              _context14.next = 7;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: actionMatch.route.id\n            });\n            if (!isRouteRequest) {\n              _context14.next = 4;\n              break;\n            }\n            throw error;\n          case 4:\n            result = {\n              type: ResultType.error,\n              error: error\n            };\n            _context14.next = 13;\n            break;\n          case 7:\n            _context14.next = 9;\n            return callLoaderOrAction(\"action\", request, actionMatch, matches, basename, true, isRouteRequest, requestContext);\n          case 9:\n            result = _context14.sent;\n            if (!request.signal.aborted) {\n              _context14.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context14.next = 15;\n              break;\n            }\n            throw new Response(null, {\n              status: result.status,\n              headers: {\n                Location: result.location\n              }\n            });\n          case 15:\n            if (!isDeferredResult(result)) {\n              _context14.next = 20;\n              break;\n            }\n            _error4 = getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n            if (!isRouteRequest) {\n              _context14.next = 19;\n              break;\n            }\n            throw _error4;\n          case 19:\n            result = {\n              type: ResultType.error,\n              error: _error4\n            };\n          case 20:\n            if (!isRouteRequest) {\n              _context14.next = 24;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context14.next = 23;\n              break;\n            }\n            throw result.error;\n          case 23:\n            return _context14.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 24:\n            if (!isErrorResult(result)) {\n              _context14.next = 30;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n            _context14.next = 28;\n            return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n          case 28:\n            _context13 = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, _context13, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 30:\n            // Create a GET request for the loaders\n            loaderRequest = new Request(request.url, {\n              headers: request.headers,\n              redirect: request.redirect,\n              signal: request.signal\n            });\n            _context14.next = 33;\n            return loadRouteData(loaderRequest, matches, requestContext);\n          case 33:\n            context = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 35:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n            if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader))) {\n              _context15.next = 3;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: routeMatch == null ? void 0 : routeMatch.route.id\n            });\n          case 3:\n            requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n            matchesToLoad = requestMatches.filter(function (m) {\n              return m.route.loader;\n            }); // Short circuit if we have no loaders to run (query())\n            if (!(matchesToLoad.length === 0)) {\n              _context15.next = 7;\n              break;\n            }\n            return _context15.abrupt(\"return\", {\n              matches: matches,\n              // Add a null for all matched routes for proper revalidation on the client\n              loaderData: matches.reduce(function (acc, m) {\n                return Object.assign(acc, _defineProperty({}, m.route.id, null));\n              }, {}),\n              errors: pendingActionError || null,\n              statusCode: 200,\n              loaderHeaders: {},\n              activeDeferreds: null\n            });\n          case 7:\n            _context15.next = 9;\n            return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n              return callLoaderOrAction(\"loader\", request, match, matches, basename, true, isRouteRequest, requestContext);\n            })));\n          case 9:\n            results = _context15.sent;\n            if (!request.signal.aborted) {\n              _context15.next = 13;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 13:\n            // Process and commit output from loaders\n            activeDeferreds = new Map();\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n            executedLoaders = new Set(matchesToLoad.map(function (match) {\n              return match.route.id;\n            }));\n            matches.forEach(function (match) {\n              if (!executedLoaders.has(match.route.id)) {\n                context.loaderData[match.route.id] = null;\n              }\n            });\n            return _context15.abrupt(\"return\", _extends({}, context, {\n              matches: matches,\n              activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n            }));\n          case 18:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n  var submission;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  var parsedPath = parsePath(path);\n  var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  var defaultShouldRevalidate =\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (f, key) {\n    if (!matches.some(function (m) {\n      return m.route.id === f.routeId;\n    })) {\n      // This fetcher is not going to be present in the subsequent render so\n      // there's no need to revalidate it\n      return;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // This fetcher was cancelled from a prior action submission - force reload\n      revalidatingFetchers.push(_extends({\n        key: key\n      }, f));\n    } else {\n      // Revalidating fetchers are decoupled from the route matches since they\n      // hit a static href, so they _always_ check shouldRevalidate and the\n      // default is strictly if a revalidation is explicitly required (action\n      // submissions, useRevalidator, X-Remix-Revalidate).\n      var shouldRevalidate = shouldRevalidateLoader(f.match, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        defaultShouldRevalidate: defaultShouldRevalidate\n      }));\n      if (shouldRevalidate) {\n        revalidatingFetchers.push(_extends({\n          key: key\n        }, f));\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction callLoaderOrAction(_x59, _x60, _x61, _x62, _x63, _x64, _x65, _x66) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(type, request, match, matches, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, activeMatches, routePathnames, resolvedLocation, path, currentUrl, url, data, contentType;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          if (basename === void 0) {\n            basename = \"/\";\n          }\n          if (isStaticRequest === void 0) {\n            isStaticRequest = false;\n          }\n          if (isRouteRequest === void 0) {\n            isRouteRequest = false;\n          }\n          abortPromise = new Promise(function (_, r) {\n            return reject = r;\n          });\n          onReject = function onReject() {\n            return reject();\n          };\n          request.signal.addEventListener(\"abort\", onReject);\n          _context16.prev = 6;\n          handler = match.route[type];\n          invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n          _context16.next = 11;\n          return Promise.race([handler({\n            request: request,\n            params: match.params,\n            context: requestContext\n          }), abortPromise]);\n        case 11:\n          result = _context16.sent;\n          invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n          _context16.next = 19;\n          break;\n        case 15:\n          _context16.prev = 15;\n          _context16.t0 = _context16[\"catch\"](6);\n          resultType = ResultType.error;\n          result = _context16.t0;\n        case 19:\n          _context16.prev = 19;\n          request.signal.removeEventListener(\"abort\", onReject);\n          return _context16.finish(19);\n        case 22:\n          if (!isResponse(result)) {\n            _context16.next = 47;\n            break;\n          }\n          status = result.status; // Process redirects\n          if (!redirectStatusCodes.has(status)) {\n            _context16.next = 32;\n            break;\n          }\n          location = result.headers.get(\"Location\");\n          invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n          if (!ABSOLUTE_URL_REGEX.test(location)) {\n            activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n            routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n              return match.pathnameBase;\n            });\n            resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n            invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n            if (basename) {\n              path = resolvedLocation.pathname;\n              resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n            }\n            location = createPath(resolvedLocation);\n          } else if (!isStaticRequest) {\n            // Strip off the protocol+origin for same-origin absolute redirects.\n            // If this is a static reques, we can let it go back to the browser\n            // as-is\n            currentUrl = new URL(request.url);\n            url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n            if (url.origin === currentUrl.origin) {\n              location = url.pathname + url.search + url.hash;\n            }\n          } // Don't process redirects in the router during static requests requests.\n          // Instead, throw the Response and let the server handle it with an HTTP\n          // redirect.  We also update the Location header in place in this flow so\n          // basename and relative routing is taken into account\n          if (!isStaticRequest) {\n            _context16.next = 31;\n            break;\n          }\n          result.headers.set(\"Location\", location);\n          throw result;\n        case 31:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.redirect,\n            status: status,\n            location: location,\n            revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n          });\n        case 32:\n          if (!isRouteRequest) {\n            _context16.next = 34;\n            break;\n          }\n          throw {\n            type: resultType || ResultType.data,\n            response: result\n          };\n        case 34:\n          contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n          // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n          if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n            _context16.next = 41;\n            break;\n          }\n          _context16.next = 38;\n          return result.json();\n        case 38:\n          data = _context16.sent;\n          _context16.next = 44;\n          break;\n        case 41:\n          _context16.next = 43;\n          return result.text();\n        case 43:\n          data = _context16.sent;\n        case 44:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 46;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: new ErrorResponse(status, result.statusText, data),\n            headers: result.headers\n          });\n        case 46:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: data,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 47:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 49;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: result\n          });\n        case 49:\n          if (!(result instanceof DeferredData)) {\n            _context16.next = 51;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result\n          });\n        case 51:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result\n          });\n        case 52:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15, null, [[6, 15, 19, 22]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType,\n      formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n        key = _step6$value[0],\n        value = _step6$value[1];\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, value instanceof File ? value.name : value);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n      key = _revalidatingFetchers.key,\n      match = _revalidatingFetchers.match;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator7 = _createForOfIteratorHelper(matches),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var match = _step7.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined) {\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  var _ref11 = _temp4 === void 0 ? {} : _temp4,\n    pathname = _ref11.pathname,\n    routeId = _ref11.routeId,\n    method = _ref11.method,\n    type = _ref11.type;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\nfunction resolveDeferredResults(_x67, _x68, _x69, _x70, _x71, _x72) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n    return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n            var result, match, currentMatch, isRevalidatingLoader;\n            return _regeneratorRuntime().wrap(function _loop$(_context17) {\n              while (1) switch (_context17.prev = _context17.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index];\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context17.next = 7;\n                    break;\n                  }\n                  _context17.next = 7;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 7:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }, _loop);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context18.next = 7;\n            break;\n          }\n          return _context18.delegateYield(_loop(index), \"t0\", 4);\n        case 4:\n          index++;\n          _context18.next = 2;\n          break;\n        case 7:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x73, _x74, _x75) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context19.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context19.sent;\n          if (!aborted) {\n            _context19.next = 6;\n            break;\n          }\n          return _context19.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context19.next = 14;\n            break;\n          }\n          _context19.prev = 7;\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context19.prev = 11;\n          _context19.t0 = _context19[\"catch\"](7);\n          return _context19.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context19.t0\n          });\n        case 14:\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","_options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning$1","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","_window$location","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","_parsePath","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","warning","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","_ref$pathname","_ref$search","_ref$hash","parsedPath","searchIndex","getLocation","validateLocation","_options2","_options2$window","defaultView","_options2$v5Compat","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","concat","_toConsumableArray","id","join","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","score","computeScore","forEach","_route$path","includes","_iterator","_createForOfIteratorHelper","explodeOptionalSegments","_step","s","done","exploded","err","f","segments","split","_segments","_toArray","first","rest","isOptional","endsWith","required","restExploded","result","apply","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","_","optional","param","prefix","__","str","star","pattern","_compilePath","compilePath","_compilePath2","_slicedToArray","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","_ref3","toPathname","_ref3$search","_ref3$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","_Error","_inherits","_super","_createSuper","_classCallCheck","arguments","_createClass","_wrapNativeSuper","DeferredData","_this","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref4","_defineProperty","trackPromise","_this2","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","_this3","cancel","_this4","abort","v","k","_resolveData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this5","wrap","_callee$","_context","prev","next","resolve","sent","abrupt","stop","resolveData","_x","size","_ref2","_ref5","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","_getShortCircuitMatch","getShortCircuitMatches","initialized","m","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","_iterator2","_step2","_step2$value","getSavedScrollPosition","navigate","_x2","_x3","_navigate","_callee2","opts","_normalizeNavigateOpt2","submission","userReplace","_callee2$","_context2","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_x4","_x5","_x6","_startNavigation","_callee3","loadingNavigation","_getShortCircuitMatch2","notFoundMatches","_route","request","pendingActionData","actionOutput","_yield$handleLoaders","shortCircuited","_callee3$","_context3","saveScrollPosition","cancelActiveDeferreds","isHashChangeOnly","createClientSideRequest","findNearestBoundary","handleAction","pendingActionError","Request","handleLoaders","_x7","_x8","_x9","_x10","_x11","_handleAction","_callee4","actionMatch","boundaryMatch","_callee4$","_context4","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","isDeferredResult","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_handleLoaders","_callee5","activeSubmission","_getMatchesToLoad","_getMatchesToLoad2","matchesToLoad","revalidatingFetchers","_yield$callLoadersAnd","results","loaderResults","fetcherResults","_processLoaderData","didAbortFetchLoads","_callee5$","_context5","getMatchesToLoad","rf","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","_normalizeNavigateOpt","handleFetcherAction","handleFetcherLoader","_x20","_x21","_x22","_x23","_x24","_x25","_handleFetcherAction","_callee6","requestMatches","_error2","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","_getMatchesToLoad4","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_callee6$","_context6","isFetchActionRedirect","staleKey","_x26","_x27","_x28","_x29","_x30","_x31","_handleFetcherLoader","_callee7","_callee7$","_context7","resolveDeferredData","t0","_x32","_x33","_x34","_startRedirectNavigation","_callee8","_temp","_window","_ref6","redirectLocation","newOrigin","redirectHistoryAction","_state$navigation","_callee8$","_context8","_isFetchActionRedirect","_x35","_x36","_x37","_x38","_x39","_callLoadersAndMaybeResolveData","_callee9","currentMatches","fetchersToLoad","_callee9$","_context9","all","resolveDeferredResults","_cancelledDeferredRou","markFetchersDone","_iterator3","_step3","doneKeys","_iterator4","_step4","landedId","yeetedKeys","_iterator5","_step5","_step5$value","getBlocker","blocker","newBlocker","_entries","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_x40","_x41","_query","_callee10","_temp2","_ref7","requestContext","_getShortCircuitMatch3","methodNotAllowedMatches","_error3","_getShortCircuitMatch4","_route2","_callee10$","_context10","isValidMethod","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_x42","_x43","_queryRoute","_callee11","_temp3","_ref8","_result$activeDeferre","_callee11$","_context11","find","values","_x44","_x45","_x46","_x47","_x48","_queryImpl","_callee12","routeMatch","_result","_callee12$","_context12","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","_x49","_x50","_x51","_x52","_x53","_submit","_callee13","isRouteRequest","_error4","_context13","loaderRequest","context","_callee13$","_context14","Location","_x54","_x55","_x56","_x57","_x58","_loadRouteData","_callee14","executedLoaders","_callee14$","_context15","getLoaderMatchesUntilBoundary","processRouteLoaderData","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","_x59","_x60","_x61","_x62","_x63","_x64","_x65","_x66","_callLoaderOrAction","_callee15","isStaticRequest","resultType","onReject","handler","activeMatches","resolvedLocation","contentType","_callee15$","_context16","finish","protocol","text","deferred","toUpperCase","body","URLSearchParams","_iterator6","_step6","_step6$value","File","name","foundError","_processRouteLoaderDa","_revalidatingFetchers","newLoaderData","mergedLoaderData","_iterator7","_step7","hasOwnProperty","eligibleMatches","reverse","hasErrorBoundary","_temp4","_ref11","errorMessage","obj","_x67","_x68","_x69","_x70","_x71","_x72","_resolveDeferredResults","_callee16","_loop","_callee16$","_context18","isRevalidatingLoader","_loop$","_context17","delegateYield","_x73","_x74","_x75","_resolveDeferredData","_callee17","unwrap","_callee17$","_context19","unwrappedData","getAll","handle","pathMatches"],"sources":["/home/kayo-b/the_odin_project/game-store-page/node_modules/@remix-run/router/history.ts","/home/kayo-b/the_odin_project/game-store-page/node_modules/@remix-run/router/utils.ts","/home/kayo-b/the_odin_project/game-store-page/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return (\n    path\n      .replace(\n        /^:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : param;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return param;\n        }\n      )\n      .replace(\n        /\\/:(\\w+)(\\??)/g,\n        (_, key: PathParam<Path>, optional: string | undefined) => {\n          let param = params[key];\n          if (optional === \"?\") {\n            return param == null ? \"\" : `/${param}`;\n          }\n          if (param == null) {\n            invariant(false, `Missing \":${key}\" param`);\n          }\n          return `/${param}`;\n        }\n      )\n      // Remove any optional markers from optional static segments\n      .replace(/\\?/g, \"\")\n      .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n        const star = \"*\" as PathParam<Path>;\n\n        if (params[star] == null) {\n          // If no splat was provided, trim the trailing slash _unless_ it's\n          // the entire path\n          return str === \"/*\" ? \"/\" : \"\";\n        }\n\n        // Apply the splat\n        return `${prefix}${params[star]}`;\n      })\n  );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging @remix-run/router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  warning,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n  match: AgnosticDataRouteMatch;\n  matches: AgnosticDataRouteMatch[];\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path, match, matches });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let newOrigin = init.history.createURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map((f) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(init.history, f.path, request.signal),\n          f.match,\n          f.matches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach((f, key) => {\n      if (!matches.some((m) => m.route.id === f.routeId)) {\n        // This fetcher is not going to be present in the subsequent render so\n        // there's no need to revalidate it\n        return;\n      } else if (cancelledFetcherLoads.includes(key)) {\n        // This fetcher was cancelled from a prior action submission - force reload\n        revalidatingFetchers.push({ key, ...f });\n      } else {\n        // Revalidating fetchers are decoupled from the route matches since they\n        // hit a static href, so they _always_ check shouldRevalidate and the\n        // default is strictly if a revalidation is explicitly required (action\n        // submissions, useRevalidator, X-Remix-Revalidate).\n        let shouldRevalidate = shouldRevalidateLoader(f.match, {\n          currentUrl,\n          currentParams: state.matches[state.matches.length - 1].params,\n          nextUrl,\n          nextParams: matches[matches.length - 1].params,\n          ...submission,\n          actionResult,\n          defaultShouldRevalidate,\n        });\n        if (shouldRevalidate) {\n          revalidatingFetchers.push({ key, ...f });\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin absolute redirects.\n        // If this is a static reques, we can let it go back to the browser\n        // as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        if (url.origin === currentUrl.origin) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;;AAEG;IACSA,MAAA;AAAZ,WAAYA,MAAZ,EAAkB;EAChB;;;;;;AAMG;EACHA,MAAA;EAEA;;;;AAIG;;EACHA,MAAA;EAEA;;;AAGG;;EACHA,MAAA;AACD,CAtBD,EAAYA,MAAM,KAANA,MAAM,GAsBjB,EAtBiB,CAAlB;AAwLA,IAAMC,iBAAiB,GAAG,UAA1B;AA+BA;;;AAGG;;AACa,SAAAC,oBACdC,OADc,EACoB;EAAA,IAAlCA,OAAkC;IAAlCA,OAAkC,GAAF,EAAE;EAAA;EAElC,IAAAC,QAAA,GAAiED,OAAjE;IAAAE,qBAAA,GAAAD,QAAA,CAAME,cAAc;IAAdA,cAAc,GAAAD,qBAAA,cAAG,CAAC,GAAD,CAAnB,GAAAA,qBAAA;IAA0BE,YAA1B,GAAAH,QAAA,CAA0BG,YAA1B;IAAAC,iBAAA,GAAAJ,QAAA,CAAwCK,QAAQ;IAARA,QAAQ,GAAAD,iBAAA,cAAG,QAAAA,iBAAA;EACvD,IAAIE,OAAJ,CAHkC;;EAIlCA,OAAO,GAAGJ,cAAc,CAACK,GAAf,CAAmB,UAACC,KAAD,EAAQC,KAAR;IAAA,OAC3BC,oBAAoB,CAClBF,KADkB,EAElB,OAAOA,KAAP,KAAiB,QAAjB,GAA4B,IAA5B,GAAmCA,KAAK,CAACG,KAFvB,EAGlBF,KAAK,KAAK,CAAV,GAAc,SAAd,GAA0BG,SAHR,CADZ;EAAA,EAAV;EAOA,IAAIH,KAAK,GAAGI,UAAU,CACpBV,YAAY,IAAI,IAAhB,GAAuBG,OAAO,CAACQ,MAAR,GAAiB,CAAxC,GAA4CX,YADxB,CAAtB;EAGA,IAAIY,MAAM,GAAGnB,MAAM,CAACoB,GAApB;EACA,IAAIC,QAAQ,GAAoB,IAAhC;EAEA,SAASJ,UAATA,CAAoBK,CAApB,EAA6B;IAC3B,OAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASH,CAAT,EAAY,CAAZ,CAAT,EAAyBZ,OAAO,CAACQ,MAAR,GAAiB,CAA1C,CAAP;EACD;EACD,SAASQ,kBAATA,CAAA,EAA2B;IACzB,OAAOhB,OAAO,CAACG,KAAD,CAAd;EACD;EACD,SAASC,oBAATA,CACEa,EADF,EAEEZ,KAFF,EAGEa,GAHF,EAGc;IAAA,IADZb,KACY;MADZA,KACY,GADC,IACD;IAAA;IAEZ,IAAIc,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGgB,kBAAkB,GAAGK,QAAxB,GAAmC,GADf,EAE3BJ,EAF2B,EAG3BZ,KAH2B,EAI3Ba,GAJ2B,CAA7B;IAMAI,SAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,CAAgC,QAD3B,+DAEsDC,IAAI,CAACC,SAAL,CACzDR,EADyD,CAFtD,CAAP;IAMA,OAAOE,QAAP;EACD;EAED,SAASO,UAATA,CAAoBT,EAApB,EAA0B;IACxB,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAA/C;EACD;EAED,IAAIW,OAAO,GAAkB;IAC3B,IAAIzB,KAAJA,CAAA,EAAS;MACP,OAAOA,KAAP;KAFyB;IAI3B,IAAIM,MAAJA,CAAA,EAAU;MACR,OAAOA,MAAP;KALyB;IAO3B,IAAIU,QAAJA,CAAA,EAAY;MACV,OAAOH,kBAAkB,EAAzB;KARyB;IAU3BU,UAV2B,EAU3BA,UAV2B;IAW3BG,SAAS,WAAAA,UAACZ,EAAD,EAAG;MACV,OAAO,IAAIa,GAAJ,CAAQJ,UAAU,CAACT,EAAD,CAAlB,EAAwB,kBAAxB,CAAP;KAZyB;IAc3Bc,cAAc,WAAAA,eAACd,EAAD,EAAO;MACnB,IAAIe,IAAI,GAAG,OAAOf,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAApD;MACA,OAAO;QACLI,QAAQ,EAAEW,IAAI,CAACX,QAAL,IAAiB,EADtB;QAELa,MAAM,EAAEF,IAAI,CAACE,MAAL,IAAe,EAFlB;QAGLC,IAAI,EAAEH,IAAI,CAACG,IAAL,IAAa;OAHrB;KAhByB;IAsB3BC,IAAI,WAAAA,KAACnB,EAAD,EAAKZ,KAAL,EAAU;MACZI,MAAM,GAAGnB,MAAM,CAAC+C,IAAhB;MACA,IAAIC,YAAY,GAAGlC,oBAAoB,CAACa,EAAD,EAAKZ,KAAL,CAAvC;MACAF,KAAK,IAAI,CAAT;MACAH,OAAO,CAACuC,MAAR,CAAepC,KAAf,EAAsBH,OAAO,CAACQ,MAA9B,EAAsC8B,YAAtC;MACA,IAAIvC,QAAQ,IAAIY,QAAhB,EAA0B;QACxBA,QAAQ,CAAC;UAAEF,MAAF,EAAEA,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE,KAAK,EAAE;QAAzC,CAAD,CAAR;MACD;KA7BwB;IA+B3BC,OAAO,WAAAA,QAACxB,EAAD,EAAKZ,KAAL,EAAU;MACfI,MAAM,GAAGnB,MAAM,CAACoD,OAAhB;MACA,IAAIJ,YAAY,GAAGlC,oBAAoB,CAACa,EAAD,EAAKZ,KAAL,CAAvC;MACAL,OAAO,CAACG,KAAD,CAAP,GAAiBmC,YAAjB;MACA,IAAIvC,QAAQ,IAAIY,QAAhB,EAA0B;QACxBA,QAAQ,CAAC;UAAEF,MAAF,EAAEA,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE,KAAK,EAAE;QAAzC,CAAD,CAAR;MACD;KArCwB;IAuC3BG,EAAE,WAAAA,GAACH,KAAD,EAAM;MACN/B,MAAM,GAAGnB,MAAM,CAACoB,GAAhB;MACA,IAAIkC,SAAS,GAAGrC,UAAU,CAACJ,KAAK,GAAGqC,KAAT,CAA1B;MACA,IAAIF,YAAY,GAAGtC,OAAO,CAAC4C,SAAD,CAA1B;MACAzC,KAAK,GAAGyC,SAAR;MACA,IAAIjC,QAAJ,EAAc;QACZA,QAAQ,CAAC;UAAEF,MAAF,EAAEA,MAAF;UAAUU,QAAQ,EAAEmB,YAApB;UAAkCE,KAAA,EAAAA;QAAlC,CAAD,CAAR;MACD;KA9CwB;IAgD3BK,MAAM,WAAAA,OAACC,EAAD,EAAa;MACjBnC,QAAQ,GAAGmC,EAAX;MACA,OAAO,YAAK;QACVnC,QAAQ,GAAG,IAAX;OADF;IAGD;GArDH;EAwDA,OAAOiB,OAAP;AACD;AAkBD;;;;;;AAMG;;AACa,SAAAmB,qBACdtD,OADc,EACqB;EAAA,IAAnCA,OAAmC;IAAnCA,OAAmC,GAAF,EAAE;EAAA;EAEnC,SAASuD,qBAATA,CACEC,MADF,EAEEC,aAFF,EAEkC;IAEhC,IAAAC,gBAAA,GAAiCF,MAAM,CAAC9B,QAAxC;MAAME,QAAF,GAAA8B,gBAAA,CAAE9B,QAAF;MAAYa,MAAZ,GAAAiB,gBAAA,CAAYjB,MAAZ;MAAoBC,IAAA,GAAAgB,gBAAA,CAAAhB,IAAA;IACxB,OAAOf,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF,EAAEA,QAAF;MAAYa,MAAZ,EAAYA,MAAZ;MAAoBC,IAAA,EAAAA;IAApB,CAFmB;IAAA;IAIlBe,aAAa,CAAC7C,KAAd,IAAuB6C,aAAa,CAAC7C,KAAd,CAAoB+C,GAA5C,IAAoD,IAJjC,EAKlBF,aAAa,CAAC7C,KAAd,IAAuB6C,aAAa,CAAC7C,KAAd,CAAoBa,GAA5C,IAAoD,SALjC,CAArB;EAOD;EAED,SAASmC,iBAATA,CAA2BJ,MAA3B,EAA2ChC,EAA3C,EAAiD;IAC/C,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAA/C;EACD;EAED,OAAOqC,kBAAkB,CACvBN,qBADuB,EAEvBK,iBAFuB,EAGvB,IAHuB,EAIvB5D,OAJuB,CAAzB;AAMD;AAsBD;;;;;;;AAOG;;AACa,SAAA8D,kBACd9D,OADc,EACkB;EAAA,IAAhCA,OAAgC;IAAhCA,OAAgC,GAAF,EAAE;EAAA;EAEhC,SAAS+D,kBAATA,CACEP,MADF,EAEEC,aAFF,EAEkC;IAEhC,IAAAO,UAAA,GAIIxB,SAAS,CAACgB,MAAM,CAAC9B,QAAP,CAAgBgB,IAAhB,CAAqBuB,MAArB,CAA4B,CAA5B,CAAD,CAJb;MAAAC,mBAAA,GAAAF,UAAA,CACEpC,QAAQ;MAARA,QAAQ,GAAAsC,mBAAA,cAAG,GADT,GAAAA,mBAAA;MAAAC,iBAAA,GAAAH,UAAA,CAEFvB,MAAM;MAANA,MAAM,GAAA0B,iBAAA,cAAG,EAFP,GAAAA,iBAAA;MAAAC,eAAA,GAAAJ,UAAA,CAGFtB,IAAI;MAAJA,IAAI,GAAA0B,eAAA,cAAG,KAAAA,eAAA;IAET,OAAOzC,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF,EAAEA,QAAF;MAAYa,MAAZ,EAAYA,MAAZ;MAAoBC,IAAA,EAAAA;IAApB,CAFmB;IAAA;IAIlBe,aAAa,CAAC7C,KAAd,IAAuB6C,aAAa,CAAC7C,KAAd,CAAoB+C,GAA5C,IAAoD,IAJjC,EAKlBF,aAAa,CAAC7C,KAAd,IAAuB6C,aAAa,CAAC7C,KAAd,CAAoBa,GAA5C,IAAoD,SALjC,CAArB;EAOD;EAED,SAAS4C,cAATA,CAAwBb,MAAxB,EAAwChC,EAAxC,EAA8C;IAC5C,IAAI8C,IAAI,GAAGd,MAAM,CAACe,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,CAAX;IACA,IAAIC,IAAI,GAAG,EAAX;IAEA,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAAL,CAAkB,MAAlB,CAAZ,EAAuC;MACrC,IAAIC,GAAG,GAAGnB,MAAM,CAAC9B,QAAP,CAAgB+C,IAA1B;MACA,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAhB;MACAJ,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAf,GAAmBD,GAAnB,GAAyBA,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,SAAb,CAAhC;IACD;IAED,OAAOH,IAAI,GAAG,GAAP,IAAc,OAAOjD,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAtD,CAAP;EACD;EAED,SAASuD,oBAATA,CAA8BrD,QAA9B,EAAkDF,EAAlD,EAAwD;IACtDK,SAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,CAAgC,QAD3B,iEAEwDC,IAAI,CAACC,SAAL,CAC3DR,EAD2D,CAFxD,GAAP;EAMD;EAED,OAAOqC,kBAAkB,CACvBE,kBADuB,EAEvBM,cAFuB,EAGvBU,oBAHuB,EAIvB/E,OAJuB,CAAzB;AAMD;AAee,SAAAgF,UAAUC,KAAV,EAAsBC,OAAtB,EAAsC;EACpD,IAAID,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,IAA7B,IAAqC,OAAOA,KAAP,KAAiB,WAA1D,EAAuE;IACrE,MAAM,IAAIE,KAAJ,CAAUD,OAAV,CAAN;EACD;AACF;AAED,SAASrD,SAATuD,CAAiBC,IAAjB,EAA4BH,OAA5B,EAA2C;EACzC,IAAI,CAACG,IAAL,EAAW;IACT;IACA,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaL,OAAb;IAEpC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN,CANE;IAQH,CARD,CAQE,OAAOM,CAAP,EAAU;EACb;AACF;AAED,SAASC,SAATA,CAAA,EAAkB;EAChB,OAAOrE,IAAI,CAACsE,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2B1B,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAP;AACD;AAED;;AAEG;;AACH,SAAS2B,eAATA,CAAyBlE,QAAzB,EAA6ChB,KAA7C,EAA0D;EACxD,OAAO;IACLiD,GAAG,EAAEjC,QAAQ,CAACd,KADT;IAELa,GAAG,EAAEC,QAAQ,CAACD,GAFT;IAGLoE,GAAG,EAAEnF;GAHP;AAKD;AAED;;AAEG;;AACG,SAAUiB,cAAVA,CACJmE,OADI,EAEJtE,EAFI,EAGJZ,KAHI,EAIJa,GAJI,EAIQ;EAAA,IADZb,KACY;IADZA,KACY,GADC,IACD;EAAA;EAEZ,IAAIc,QAAQ,GAAAqE,QAAA;IACVnE,QAAQ,EAAE,OAAOkE,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAAClE,QADhD;IAEVa,MAAM,EAAE,EAFE;IAGVC,IAAI,EAAE;GACF,SAAOlB,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAJnC;IAKVZ,KALU,EAKVA,KALU;IAMV;IACA;IACA;IACA;IACAa,GAAG,EAAGD,EAAE,IAAKA,EAAe,CAACC,GAAxB,IAAgCA,GAAhC,IAAuCgE,SAAS;GAVvD;EAYA,OAAO/D,QAAP;AACD;AAED;;AAEG;;AACa,SAAAQ,WAIA8D,IAAA;EAAA,IAAAC,aAAA,GAAAD,IAAA,CAHdpE,QAAQ;IAARA,QAAQ,GAAAqE,aAAA,cAAG,GADc,GAAAA,aAAA;IAAAC,WAAA,GAIXF,IAAA,CAFdvD,MAAM;IAANA,MAAM,GAAAyD,WAAA,cAAG,EAFgB,GAAAA,WAAA;IAAAC,SAAA,GAIXH,IAAA,CADdtD,IAAI;IAAJA,IAAI,GAAAyD,SAAA,cAAG,KAAAA,SAAA;EAEP,IAAI1D,MAAM,IAAIA,MAAM,KAAK,GAAzB,EACEb,QAAQ,IAAIa,MAAM,CAACX,MAAP,CAAc,CAAd,CAAqB,QAArB,GAA2BW,MAA3B,GAAoC,MAAMA,MAAtD;EACF,IAAIC,IAAI,IAAIA,IAAI,KAAK,GAArB,EACEd,QAAQ,IAAIc,IAAI,CAACZ,MAAL,CAAY,CAAZ,CAAmB,QAAnB,GAAyBY,IAAzB,GAAgC,MAAMA,IAAlD;EACF,OAAOd,QAAP;AACD;AAED;;AAEG;;AACG,SAAUY,SAAVA,CAAoBD,IAApB,EAAgC;EACpC,IAAI6D,UAAU,GAAkB,EAAhC;EAEA,IAAI7D,IAAJ,EAAU;IACR,IAAIqC,SAAS,GAAGrC,IAAI,CAACsC,OAAL,CAAa,GAAb,CAAhB;IACA,IAAID,SAAS,IAAI,CAAjB,EAAoB;MAClBwB,UAAU,CAAC1D,IAAX,GAAkBH,IAAI,CAAC0B,MAAL,CAAYW,SAAZ,CAAlB;MACArC,IAAI,GAAGA,IAAI,CAAC0B,MAAL,CAAY,CAAZ,EAAeW,SAAf,CAAP;IACD;IAED,IAAIyB,WAAW,GAAG9D,IAAI,CAACsC,OAAL,CAAa,GAAb,CAAlB;IACA,IAAIwB,WAAW,IAAI,CAAnB,EAAsB;MACpBD,UAAU,CAAC3D,MAAX,GAAoBF,IAAI,CAAC0B,MAAL,CAAYoC,WAAZ,CAApB;MACA9D,IAAI,GAAGA,IAAI,CAAC0B,MAAL,CAAY,CAAZ,EAAeoC,WAAf,CAAP;IACD;IAED,IAAI9D,IAAJ,EAAU;MACR6D,UAAU,CAACxE,QAAX,GAAsBW,IAAtB;IACD;EACF;EAED,OAAO6D,UAAP;AACD;AASD,SAASvC,kBAATA,CACEyC,WADF,EAEErE,WAFF,EAGEsE,gBAHF,EAIEvG,OAJF,EAIiC;EAAA,IAA/BA,OAA+B;IAA/BA,OAA+B,GAAF,EAAE;EAAA;EAE/B,IAAAwG,SAAA,GAA2DxG,OAA3D;IAAAyG,gBAAA,GAAAD,SAAA,CAAMhD,MAAM;IAANA,MAAM,GAAAiD,gBAAA,cAAGlC,QAAQ,CAACmC,WAApB,GAAAD,gBAAA;IAAAE,kBAAA,GAAAH,SAAA,CAAkClG,QAAQ;IAARA,QAAQ,GAAAqG,kBAAA,cAAG,QAAAA,kBAAA;EACjD,IAAIlD,aAAa,GAAGD,MAAM,CAACrB,OAA3B;EACA,IAAInB,MAAM,GAAGnB,MAAM,CAACoB,GAApB;EACA,IAAIC,QAAQ,GAAoB,IAAhC;EAEA,IAAIR,KAAK,GAAGkG,QAAQ,EAApB,CAP+B;EAS/B;EACA;;EACA,IAAIlG,KAAK,IAAI,IAAb,EAAmB;IACjBA,KAAK,GAAG,CAAR;IACA+C,aAAa,CAACoD,YAAd,CAAgCd,QAAA,KAAAtC,aAAa,CAAC7C,KAA9C;MAAqDiF,GAAG,EAAEnF;IAA1D,IAAmE,EAAnE;EACD;EAED,SAASkG,QAATA,CAAA,EAAiB;IACf,IAAIhG,KAAK,GAAG6C,aAAa,CAAC7C,KAAd,IAAuB;MAAEiF,GAAG,EAAE;KAA1C;IACA,OAAOjF,KAAK,CAACiF,GAAb;EACD;EAED,SAASiB,SAATA,CAAA,EAAkB;IAChB9F,MAAM,GAAGnB,MAAM,CAACoB,GAAhB;IACA,IAAIkC,SAAS,GAAGyD,QAAQ,EAAxB;IACA,IAAI7D,KAAK,GAAGI,SAAS,IAAI,IAAb,GAAoB,IAApB,GAA2BA,SAAS,GAAGzC,KAAnD;IACAA,KAAK,GAAGyC,SAAR;IACA,IAAIjC,QAAJ,EAAc;MACZA,QAAQ,CAAC;QAAEF,MAAF,EAAEA,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB,KAAA,EAAAA;MAAtC,CAAD,CAAR;IACD;EACF;EAED,SAASJ,IAATA,CAAcnB,EAAd,EAAsBZ,KAAtB,EAAiC;IAC/BI,MAAM,GAAGnB,MAAM,CAAC+C,IAAhB;IACA,IAAIlB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAT,EAAmBF,EAAnB,EAAuBZ,KAAvB,CAA7B;IACA,IAAI2F,gBAAJ,EAAsBA,gBAAgB,CAAC7E,QAAD,EAAWF,EAAX,CAAhB;IAEtBd,KAAK,GAAGkG,QAAQ,KAAK,CAArB;IACA,IAAIG,YAAY,GAAGnB,eAAe,CAAClE,QAAD,EAAWhB,KAAX,CAAlC;IACA,IAAIiE,GAAG,GAAGxC,OAAO,CAACF,UAAR,CAAmBP,QAAnB,CAAV,CAP+B;;IAU/B,IAAI;MACF+B,aAAa,CAACuD,SAAd,CAAwBD,YAAxB,EAAsC,EAAtC,EAA0CpC,GAA1C;KADF,CAEE,OAAOsC,KAAP,EAAc;MACd;MACA;MACAzD,MAAM,CAAC9B,QAAP,CAAgBwF,MAAhB,CAAuBvC,GAAvB;IACD;IAED,IAAIrE,QAAQ,IAAIY,QAAhB,EAA0B;MACxBA,QAAQ,CAAC;QAAEF,MAAF,EAAEA,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB,KAAK,EAAE;MAA7C,CAAD,CAAR;IACD;EACF;EAED,SAASC,OAATA,CAAiBxB,EAAjB,EAAyBZ,KAAzB,EAAoC;IAClCI,MAAM,GAAGnB,MAAM,CAACoD,OAAhB;IACA,IAAIvB,QAAQ,GAAGC,cAAc,CAACQ,OAAO,CAACT,QAAT,EAAmBF,EAAnB,EAAuBZ,KAAvB,CAA7B;IACA,IAAI2F,gBAAJ,EAAsBA,gBAAgB,CAAC7E,QAAD,EAAWF,EAAX,CAAhB;IAEtBd,KAAK,GAAGkG,QAAQ,EAAhB;IACA,IAAIG,YAAY,GAAGnB,eAAe,CAAClE,QAAD,EAAWhB,KAAX,CAAlC;IACA,IAAIiE,GAAG,GAAGxC,OAAO,CAACF,UAAR,CAAmBP,QAAnB,CAAV;IACA+B,aAAa,CAACoD,YAAd,CAA2BE,YAA3B,EAAyC,EAAzC,EAA6CpC,GAA7C;IAEA,IAAIrE,QAAQ,IAAIY,QAAhB,EAA0B;MACxBA,QAAQ,CAAC;QAAEF,MAAF,EAAEA,MAAF;QAAUU,QAAQ,EAAES,OAAO,CAACT,QAA5B;QAAsCqB,KAAK,EAAE;MAA7C,CAAD,CAAR;IACD;EACF;EAED,SAASX,SAATA,CAAmBZ,EAAnB,EAAyB;IACvB;IACA;IACA;IACA,IAAI8C,IAAI,GACNd,MAAM,CAAC9B,QAAP,CAAgByF,MAAhB,KAA2B,MAA3B,GACI3D,MAAM,CAAC9B,QAAP,CAAgByF,MADpB,GAEI3D,MAAM,CAAC9B,QAAP,CAAgB+C,IAHtB;IAKA,IAAIA,IAAI,GAAG,OAAOjD,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAnD;IACAwD,SAAS,CACPV,IADO,EAE+D,wEAAAG,IAF/D,CAAT;IAIA,OAAO,IAAIpC,GAAJ,CAAQoC,IAAR,EAAcH,IAAd,CAAP;EACD;EAED,IAAInC,OAAO,GAAY;IACrB,IAAInB,MAAJA,CAAA,EAAU;MACR,OAAOA,MAAP;KAFmB;IAIrB,IAAIU,QAAJA,CAAA,EAAY;MACV,OAAO4E,WAAW,CAAC9C,MAAD,EAASC,aAAT,CAAlB;KALmB;IAOrBL,MAAM,WAAAA,OAACC,EAAD,EAAa;MACjB,IAAInC,QAAJ,EAAc;QACZ,MAAM,IAAIiE,KAAJ,CAAU,4CAAV,CAAN;MACD;MACD3B,MAAM,CAAC4D,gBAAP,CAAwBtH,iBAAxB,EAA2CgH,SAA3C;MACA5F,QAAQ,GAAGmC,EAAX;MAEA,OAAO,YAAK;QACVG,MAAM,CAAC6D,mBAAP,CAA2BvH,iBAA3B,EAA8CgH,SAA9C;QACA5F,QAAQ,GAAG,IAAX;OAFF;KAdmB;IAmBrBe,UAAU,WAAAA,WAACT,EAAD,EAAG;MACX,OAAOS,WAAU,CAACuB,MAAD,EAAShC,EAAT,CAAjB;KApBmB;IAsBrBY,SAtBqB,EAsBrBA,SAtBqB;IAuBrBE,cAAc,WAAAA,eAACd,EAAD,EAAG;MACf;MACA,IAAImD,GAAG,GAAGvC,SAAS,CAACZ,EAAD,CAAnB;MACA,OAAO;QACLI,QAAQ,EAAE+C,GAAG,CAAC/C,QADT;QAELa,MAAM,EAAEkC,GAAG,CAAClC,MAFP;QAGLC,IAAI,EAAEiC,GAAG,CAACjC;OAHZ;KA1BmB;IAgCrBC,IAhCqB,EAgCrBA,IAhCqB;IAiCrBK,OAjCqB,EAiCrBA,OAjCqB;IAkCrBE,EAAE,WAAAA,GAAC/B,CAAD,EAAE;MACF,OAAOsC,aAAa,CAACP,EAAd,CAAiB/B,CAAjB,CAAP;IACD;GApCH;EAuCA,OAAOgB,OAAP;AACD;;ACpsBD,IAAYmF,UAAZ;AAAA,WAAYA,UAAZ,EAAsB;EACpBA,UAAA;EACAA,UAAA;EACAA,UAAA;EACAA,UAAA;AACD,CALD,EAAYA,UAAU,KAAVA,UAAU,GAKrB,EALqB,CAAtB;AAmQA,SAASC,YAATA,CACEC,KADF,EAC4B;EAE1B,OAAOA,KAAK,CAAC9G,KAAN,KAAgB,IAAvB;AACD;AAGD;;AACM,SAAU+G,yBAAVA,CACJC,MADI,EAEJC,UAFI,EAGJC,MAHI,EAGmC;EAAA,IADvCD,UACuC;IADvCA,UACuC,GADhB,EACgB;EAAA;EAAA,IAAvCC,MAAuC;IAAvCA,MAAuC,GAAjB,IAAIC,GAAJ,EAAiB;EAAA;EAEvC,OAAOH,MAAM,CAAClH,GAAP,CAAW,UAACgH,KAAD,EAAQ9G,KAAR,EAAiB;IACjC,IAAIoH,QAAQ,MAAAC,MAAA,CAAAC,kBAAA,CAAOL,UAAJ,IAAgBjH,KAAhB,EAAf;IACA,IAAIuH,EAAE,GAAG,OAAOT,KAAK,CAACS,EAAb,KAAoB,QAApB,GAA+BT,KAAK,CAACS,EAArC,GAA0CH,QAAQ,CAACI,IAAT,CAAc,GAAd,CAAnD;IACAlD,SAAS,CACPwC,KAAK,CAAC9G,KAAN,KAAgB,IAAhB,IAAwB,CAAC8G,KAAK,CAACW,QADxB,EAAT;IAIAnD,SAAS,CACP,CAAC4C,MAAM,CAACQ,GAAP,CAAWH,EAAX,CADM,EAEP,wCAAqCA,EAArC,mBACE,wDAHK,CAAT;IAKAL,MAAM,CAACS,GAAP,CAAWJ,EAAX;IAEA,IAAIV,YAAY,CAACC,KAAD,CAAhB,EAAyB;MACvB,IAAIc,UAAU,GAAAvC,QAAA,KAAsCyB,KAAtC;QAA6CS,EAAA,EAAAA;OAA3D;MACA,OAAOK,UAAP;IACD,CAHD,MAGO;MACL,IAAIC,iBAAiB,GAAAxC,QAAA,KAChByB,KADgB;QAEnBS,EAFmB,EAEnBA,EAFmB;QAGnBE,QAAQ,EAAEX,KAAK,CAACW,QAAN,GACNV,yBAAyB,CAACD,KAAK,CAACW,QAAP,EAAiBL,QAAjB,EAA2BF,MAA3B,CADnB,GAEN/G;OALN;MAOA,OAAO0H,iBAAP;IACD;EACF,CA3BM,CAAP;AA4BD;AAED;;;;AAIG;;AACG,SAAUC,WAAVA,CAGJd,MAHI,EAIJe,WAJI,EAKJC,QALI,EAKU;EAAA,IAAdA,QAAc;IAAdA,QAAc,GAAH,GAAG;EAAA;EAEd,IAAIhH,QAAQ,GACV,OAAO+G,WAAP,KAAuB,QAAvB,GAAkCjG,SAAS,CAACiG,WAAD,CAA3C,GAA2DA,WAD7D;EAGA,IAAI7G,QAAQ,GAAG+G,aAAa,CAACjH,QAAQ,CAACE,QAAT,IAAqB,GAAtB,EAA2B8G,QAA3B,CAA5B;EAEA,IAAI9G,QAAQ,IAAI,IAAhB,EAAsB;IACpB,OAAO,IAAP;EACD;EAED,IAAIgH,QAAQ,GAAGC,aAAa,CAACnB,MAAD,CAA5B;EACAoB,iBAAiB,CAACF,QAAD,CAAjB;EAEA,IAAIG,OAAO,GAAG,IAAd;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,OAAO,IAAI,IAAX,IAAmBC,CAAC,GAAGJ,QAAQ,CAAC7H,MAAhD,EAAwD,EAAEiI,CAA1D,EAA6D;IAC3DD,OAAO,GAAGE,gBAAgB,CACxBL,QAAQ,CAACI,CAAD,CADgB;IAAA;IAGxB;IACA;IACA;IACA;IACA;IACAE,eAAe,CAACtH,QAAD,CARS,CAA1B;EAUD;EAED,OAAOmH,OAAP;AACD;AAmBD,SAASF,aAATA,CAGEnB,MAHF,EAIEkB,QAJF,EAKEO,WALF,EAMExB,UANF,EAMiB;EAAA,IAFfiB,QAEe;IAFfA,QAEe,GAF4B,EAE5B;EAAA;EAAA,IADfO,WACe;IADfA,WACe,GAD6B,EAC7B;EAAA;EAAA,IAAfxB,UAAe;IAAfA,UAAe,GAAF,EAAE;EAAA;EAEf,IAAIyB,YAAY,GAAG,SAAfA,YAAYA,CACd5B,KADiB,EAEjB9G,KAFiB,EAGjB2I,YAHiB,EAIf;IACF,IAAIC,IAAI,GAA+B;MACrCD,YAAY,EACVA,YAAY,KAAKxI,SAAjB,GAA6B2G,KAAK,CAACjF,IAAN,IAAc,EAA3C,GAAgD8G,YAFb;MAGrCE,aAAa,EAAE/B,KAAK,CAAC+B,aAAN,KAAwB,IAHF;MAIrCC,aAAa,EAAE9I,KAJsB;MAKrC8G,KAAA,EAAAA;KALF;IAQA,IAAI8B,IAAI,CAACD,YAAL,CAAkBI,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;MACrCzE,SAAS,CACPsE,IAAI,CAACD,YAAL,CAAkBI,UAAlB,CAA6B9B,UAA7B,CADO,EAEP,2BAAwB2B,IAAI,CAACD,YAA7B,GACM,kCAAA1B,UADN,oHAFO,CAAT;MAOA2B,IAAI,CAACD,YAAL,GAAoBC,IAAI,CAACD,YAAL,CAAkBvE,KAAlB,CAAwB6C,UAAU,CAAC5G,MAAnC,CAApB;IACD;IAED,IAAIwB,IAAI,GAAGmH,SAAS,CAAC,CAAC/B,UAAD,EAAa2B,IAAI,CAACD,YAAlB,CAAD,CAApB;IACA,IAAIM,UAAU,GAAGR,WAAW,CAACpB,MAAZ,CAAmBuB,IAAnB,CAAjB,CArBE;IAwBF;IACA;;IACA,IAAI9B,KAAK,CAACW,QAAN,IAAkBX,KAAK,CAACW,QAAN,CAAepH,MAAf,GAAwB,CAA9C,EAAiD;MAC/CiE,SAAS;MAAA;MAEP;MACAwC,KAAK,CAAC9G,KAAN,KAAgB,IAHT,EAIP,yDACuC,4CAAA6B,IADvC,SAJO,CAAT;MAQAsG,aAAa,CAACrB,KAAK,CAACW,QAAP,EAAiBS,QAAjB,EAA2Be,UAA3B,EAAuCpH,IAAvC,CAAb;IACD,CApCC;IAuCF;;IACA,IAAIiF,KAAK,CAACjF,IAAN,IAAc,IAAd,IAAsB,CAACiF,KAAK,CAAC9G,KAAjC,EAAwC;MACtC;IACD;IAEDkI,QAAQ,CAACjG,IAAT,CAAc;MACZJ,IADY,EACZA,IADY;MAEZqH,KAAK,EAAEC,YAAY,CAACtH,IAAD,EAAOiF,KAAK,CAAC9G,KAAb,CAFP;MAGZiJ,UAAA,EAAAA;KAHF;GAhDF;EAsDAjC,MAAM,CAACoC,OAAP,CAAe,UAACtC,KAAD,EAAQ9G,KAAR,EAAiB;IAAA,IAAAqJ,WAAA;;IAC9B;IACA,IAAIvC,KAAK,CAACjF,IAAN,KAAe,EAAf,IAAqB,EAAC,CAAAwH,WAAA,GAAAvC,KAAK,CAACjF,IAAP,aAACwH,WAAY,CAAAC,QAAZ,CAAqB,GAArB,CAAD,CAAzB,EAAqD;MACnDZ,YAAY,CAAC5B,KAAD,EAAQ9G,KAAR,CAAZ;IACD,CAFD,MAEO;MAAA,IAAAuJ,SAAA,GAAAC,0BAAA,CACgBC,uBAAuB,CAAC3C,KAAK,CAACjF,IAAP,CAA5C;QAAA6H,KAAA;MAAA;QAAA,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAA9I,CAAA,IAAAmJ,IAAA,GAA0D;UAAA,IAAjDC,QAAT,GAAAH,KAAA,CAAAnF,KAAA;UACEmE,YAAY,CAAC5B,KAAD,EAAQ9G,KAAR,EAAe6J,QAAf,CAAZ;QACD;MAAA,SAAAC,GAAA;QAAAP,SAAA,CAAAzE,CAAA,CAAAgF,GAAA;MAAA;QAAAP,SAAA,CAAAQ,CAAA;MAAA;IACF;GARH;EAWA,OAAO7B,QAAP;AACD;AAED;;;;;;;;;;;;;AAaG;;AACH,SAASuB,uBAATA,CAAiC5H,IAAjC,EAA6C;EAC3C,IAAImI,QAAQ,GAAGnI,IAAI,CAACoI,KAAL,CAAW,GAAX,CAAf;EACA,IAAID,QAAQ,CAAC3J,MAAT,KAAoB,CAAxB,EAA2B,OAAO,EAAP;EAE3B,IAAA6J,SAAA,GAAAC,QAAA,CAAuBH,QAAvB;IAAKI,KAAD,GAAAF,SAAA;IAAWG,IAAX,GAAAH,SAAA,CAAA9F,KAAA,IAJuC;;EAO3C,IAAIkG,UAAU,GAAGF,KAAK,CAACG,QAAN,CAAe,GAAf,CAAjB,CAP2C;;EAS3C,IAAIC,QAAQ,GAAGJ,KAAK,CAAC9H,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAf;EAEA,IAAI+H,IAAI,CAAChK,MAAL,KAAgB,CAApB,EAAuB;IACrB;IACA;IACA,OAAOiK,UAAU,GAAG,CAACE,QAAD,EAAW,EAAX,CAAH,GAAoB,CAACA,QAAD,CAArC;EACD;EAED,IAAIC,YAAY,GAAGhB,uBAAuB,CAACY,IAAI,CAAC7C,IAAL,CAAU,GAAV,CAAD,CAA1C;EAEA,IAAIkD,MAAM,GAAa,EAAvB,CAnB2C;EAsB3C;EACA;EACA;EACA;EACA;EACA;;EACAA,MAAM,CAACzI,IAAP,CAAA0I,KAAA,CAAAD,MAAM,EAAApD,kBAAA,CACDmD,YAAY,CAAC3K,GAAb,CAAkB,UAAA8K,OAAD;IAAA,OAClBA,OAAO,KAAK,EAAZ,GAAiBJ,QAAjB,GAA4B,CAACA,QAAD,EAAWI,OAAX,EAAoBpD,IAApB,CAAyB,GAAzB,CAD3B;EAAA,EADL,GA5B2C;;EAmC3C,IAAI8C,UAAJ,EAAgB;IACdI,MAAM,CAACzI,IAAP,CAAA0I,KAAA,CAAAD,MAAM,EAAApD,kBAAA,CAASmD,YAAf;EACD,CArC0C;;EAwC3C,OAAOC,MAAM,CAAC5K,GAAP,CAAY,UAAA+J,QAAD;IAAA,OAChBhI,IAAI,CAACkH,UAAL,CAAgB,GAAhB,KAAwBc,QAAQ,KAAK,EAArC,GAA0C,GAA1C,GAAgDA,QAD3C;EAAA,EAAP;AAGD;AAED,SAASzB,iBAATA,CAA2BF,QAA3B,EAAkD;EAChDA,QAAQ,CAAC2C,IAAT,CAAc,UAACC,CAAD,EAAIC,CAAJ;IAAA,OACZD,CAAC,CAAC5B,KAAF,KAAY6B,CAAC,CAAC7B,KAAd,GACI6B,CAAC,CAAC7B,KAAF,GAAU4B,CAAC,CAAC5B,KADhB;IAAA,EAEI8B,cAAc,CACZF,CAAC,CAAC7B,UAAF,CAAanJ,GAAb,CAAkB,UAAA8I,IAAD;MAAA,OAAUA,IAAI,CAACE,aAAhC;IAAA,EADY,EAEZiC,CAAC,CAAC9B,UAAF,CAAanJ,GAAb,CAAkB,UAAA8I,IAAD;MAAA,OAAUA,IAAI,CAACE,aAAhC;IAAA,EAFY,CAHpB;EAAA;AAQD;AAED,IAAMmC,OAAO,GAAG,QAAhB;AACA,IAAMC,mBAAmB,GAAG,CAA5B;AACA,IAAMC,eAAe,GAAG,CAAxB;AACA,IAAMC,iBAAiB,GAAG,CAA1B;AACA,IAAMC,kBAAkB,GAAG,EAA3B;AACA,IAAMC,YAAY,GAAG,CAAC,CAAtB;AACA,IAAMC,OAAO,GAAI,SAAXA,OAAOA,CAAI5B,CAAD;EAAA,OAAeA,CAAC,KAAK,GAArC;AAAA;AAEA,SAASR,YAATA,CAAsBtH,IAAtB,EAAoC7B,KAApC,EAA8D;EAC5D,IAAIgK,QAAQ,GAAGnI,IAAI,CAACoI,KAAL,CAAW,GAAX,CAAf;EACA,IAAIuB,YAAY,GAAGxB,QAAQ,CAAC3J,MAA5B;EACA,IAAI2J,QAAQ,CAACyB,IAAT,CAAcF,OAAd,CAAJ,EAA4B;IAC1BC,YAAY,IAAIF,YAAhB;EACD;EAED,IAAItL,KAAJ,EAAW;IACTwL,YAAY,IAAIL,eAAhB;EACD;EAED,OAAOnB,QAAQ,CACZ0B,MADI,CACI,UAAA/B,CAAD;IAAA,OAAO,CAAC4B,OAAO,CAAC5B,CAAD,CADlB;EAAA,EAEJ,CAAAgC,MAFI,CAGH,UAACzC,KAAD,EAAQ0C,OAAR;IAAA,OACE1C,KAAK,IACJ+B,OAAO,CAACY,IAAR,CAAaD,OAAb,IACGV,mBADH,GAEGU,OAAO,KAAK,EAAZ,GACAR,iBADA,GAEAC,kBALC,CAJJ;EAAA,GAUHG,YAVG,CAAP;AAYD;AAED,SAASR,cAATA,CAAwBF,CAAxB,EAAqCC,CAArC,EAAgD;EAC9C,IAAIe,QAAQ,GACVhB,CAAC,CAACzK,MAAF,KAAa0K,CAAC,CAAC1K,MAAf,IAAyByK,CAAC,CAAC1G,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAe,CAAA2H,KAAf,CAAqB,UAACtL,CAAD,EAAI6H,CAAJ;IAAA,OAAU7H,CAAC,KAAKsK,CAAC,CAACzC,CAAD,CAAtC;EAAA,EAD3B;EAGA,OAAOwD,QAAQ;EAAA;EAEX;EACA;EACA;EACAhB,CAAC,CAACA,CAAC,CAACzK,MAAF,GAAW,CAAZ,CAAD,GAAkB0K,CAAC,CAACA,CAAC,CAAC1K,MAAF,GAAW,CAAZ,CALR;EAAA;EAOX;EACA,CARJ;AASD;AAED,SAASkI,gBAATA,CAIEyD,MAJF,EAKE9K,QALF,EAKkB;EAEhB,IAAM+H,UAAA,GAAe+C,MAArB,CAAM/C,UAAA;EAEN,IAAIgD,aAAa,GAAG,EAApB;EACA,IAAIC,eAAe,GAAG,GAAtB;EACA,IAAI7D,OAAO,GAAoD,EAA/D;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,UAAU,CAAC5I,MAA/B,EAAuC,EAAEiI,CAAzC,EAA4C;IAC1C,IAAIM,IAAI,GAAGK,UAAU,CAACX,CAAD,CAArB;IACA,IAAI6D,GAAG,GAAG7D,CAAC,KAAKW,UAAU,CAAC5I,MAAX,GAAoB,CAApC;IACA,IAAI+L,iBAAiB,GACnBF,eAAe,KAAK,GAApB,GACIhL,QADJ,GAEIA,QAAQ,CAACkD,KAAT,CAAe8H,eAAe,CAAC7L,MAA/B,KAA0C,GAHhD;IAIA,IAAIgM,KAAK,GAAGC,SAAS,CACnB;MAAEzK,IAAI,EAAE+G,IAAI,CAACD,YAAb;MAA2BE,aAAa,EAAED,IAAI,CAACC,aAA/C;MAA8DsD,GAAA,EAAAA;KAD3C,EAEnBC,iBAFmB,CAArB;IAKA,IAAI,CAACC,KAAL,EAAY,OAAO,IAAP;IAEZE,MAAM,CAAC/F,MAAP,CAAcyF,aAAd,EAA6BI,KAAK,CAACG,MAAnC;IAEA,IAAI1F,KAAK,GAAG8B,IAAI,CAAC9B,KAAjB;IAEAuB,OAAO,CAACpG,IAAR,CAAa;MACX;MACAuK,MAAM,EAAEP,aAFG;MAGX/K,QAAQ,EAAE8H,SAAS,CAAC,CAACkD,eAAD,EAAkBG,KAAK,CAACnL,QAAxB,CAAD,CAHR;MAIXuL,YAAY,EAAEC,iBAAiB,CAC7B1D,SAAS,CAAC,CAACkD,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CADoB,CAJpB;MAOX3F,KAAA,EAAAA;KAPF;IAUA,IAAIuF,KAAK,CAACI,YAAN,KAAuB,GAA3B,EAAgC;MAC9BP,eAAe,GAAGlD,SAAS,CAAC,CAACkD,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CAA3B;IACD;EACF;EAED,OAAOpE,OAAP;AACD;AAED;;;;AAIG;;SACasE,aACdC,YAAA,EACAJ,MAAA,EAEa;EAAA,IAFbA,MAEa;IAFbA,MAEa,GAAT,EAAS;EAAA;EAEb,IAAI3K,IAAI,GAAG+K,YAAX;EACA,IAAI/K,IAAI,CAAC0I,QAAL,CAAc,GAAd,KAAsB1I,IAAI,KAAK,GAA/B,IAAsC,CAACA,IAAI,CAAC0I,QAAL,CAAc,IAAd,CAA3C,EAAgE;IAC9D7F,OAAO,CACL,KADK,EAEL,eAAe,GAAA7C,IAAf,iDACMA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,wJAGsCT,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,SAFK,CAAP;IAOAT,IAAI,GAAGA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAAP;EACD;EAED,OACET,IAAI,CACDS,OADH,CAEI,eAFJ,EAGI,UAACuK,CAAD,EAAI9L,GAAJ,EAA0B+L,QAA1B,EAA0D;IACxD,IAAIC,KAAK,GAAGP,MAAM,CAACzL,GAAD,CAAlB;IACA,IAAI+L,QAAQ,KAAK,GAAjB,EAAsB;MACpB,OAAOC,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAA5B;IACD;IACD,IAAIA,KAAK,IAAI,IAAb,EAAmB;MACjBzI,SAAS,CAAC,KAAD,EAAqB,gBAAAvD,GAArB,GAAT;IACD;IACD,OAAOgM,KAAP;GAXN,EAcGzK,OAdH,CAeI,gBAfJ,EAgBI,UAACuK,CAAD,EAAI9L,GAAJ,EAA0B+L,QAA1B,EAA0D;IACxD,IAAIC,KAAK,GAAGP,MAAM,CAACzL,GAAD,CAAlB;IACA,IAAI+L,QAAQ,KAAK,GAAjB,EAAsB;MACpB,OAAOC,KAAK,IAAI,IAAT,GAAgB,EAAhB,SAAyBA,KAAhC;IACD;IACD,IAAIA,KAAK,IAAI,IAAb,EAAmB;MACjBzI,SAAS,CAAC,KAAD,EAAqB,gBAAAvD,GAArB,GAAT;IACD;IACD,aAAWgM,KAAX;EACD,CAzBL,CA2BE;EAAA,CACCzK,OA5BH,CA4BW,KA5BX,EA4BkB,EA5BlB,EA6BGA,OA7BH,CA6BW,SA7BX,EA6BsB,UAACuK,CAAD,EAAIG,MAAJ,EAAYC,EAAZ,EAAgBC,GAAhB,EAAuB;IACzC,IAAMC,IAAI,GAAG,GAAb;IAEA,IAAIX,MAAM,CAACW,IAAD,CAAN,IAAgB,IAApB,EAA0B;MACxB;MACA;MACA,OAAOD,GAAG,KAAK,IAAR,GAAe,GAAf,GAAqB,EAA5B;IACD,CAPwC;;IAUzC,YAAUF,MAAV,GAAmBR,MAAM,CAACW,IAAD,CAAzB;EACD,CAxCH,CADF;AA2CD;AAiDD;;;;;AAKG;;AACa,SAAAb,UAIdc,OAJc,EAKdlM,QALc,EAKE;EAEhB,IAAI,OAAOkM,OAAP,KAAmB,QAAvB,EAAiC;IAC/BA,OAAO,GAAG;MAAEvL,IAAI,EAAEuL,OAAR;MAAiBvE,aAAa,EAAE,KAAhC;MAAuCsD,GAAG,EAAE;KAAtD;EACD;EAED,IAAAkB,YAAA,GAA4BC,WAAW,CACrCF,OAAO,CAACvL,IAD6B,EAErCuL,OAAO,CAACvE,aAF6B,EAGrCuE,OAAO,CAACjB,GAH6B,CAAvC;IAAAoB,aAAA,GAAAC,cAAA,CAAAH,YAAA;IAAKI,OAAD,GAAAF,aAAA;IAAUG,UAAV,GAAAH,aAAA;EAMJ,IAAIlB,KAAK,GAAGnL,QAAQ,CAACmL,KAAT,CAAeoB,OAAf,CAAZ;EACA,IAAI,CAACpB,KAAL,EAAY,OAAO,IAAP;EAEZ,IAAIH,eAAe,GAAGG,KAAK,CAAC,CAAD,CAA3B;EACA,IAAII,YAAY,GAAGP,eAAe,CAAC5J,OAAhB,CAAwB,SAAxB,EAAmC,IAAnC,CAAnB;EACA,IAAIqL,aAAa,GAAGtB,KAAK,CAACjI,KAAN,CAAY,CAAZ,CAApB;EACA,IAAIoI,MAAM,GAAWkB,UAAU,CAAC/B,MAAX,CACnB,UAACiC,IAAD,EAAOC,SAAP,EAAkB7N,KAAlB,EAA2B;IACzB;IACA;IACA,IAAI6N,SAAS,KAAK,GAAlB,EAAuB;MACrB,IAAIC,UAAU,GAAGH,aAAa,CAAC3N,KAAD,CAAb,IAAwB,EAAzC;MACAyM,YAAY,GAAGP,eAAe,CAC3B9H,KADY,CACN,CADM,EACH8H,eAAe,CAAC7L,MAAhB,GAAyByN,UAAU,CAACzN,MADjC,CAEZ,CAAAiC,OAFY,CAEJ,SAFI,EAEO,IAFP,CAAf;IAGD;IAEDsL,IAAI,CAACC,SAAD,CAAJ,GAAkBE,wBAAwB,CACxCJ,aAAa,CAAC3N,KAAD,CAAb,IAAwB,EADgB,EAExC6N,SAFwC,CAA1C;IAIA,OAAOD,IAAP;GAfiB,EAiBnB,EAjBmB,CAArB;EAoBA,OAAO;IACLpB,MADK,EACLA,MADK;IAELtL,QAAQ,EAAEgL,eAFL;IAGLO,YAHK,EAGLA,YAHK;IAILW,OAAA,EAAAA;GAJF;AAMD;AAED,SAASE,WAATA,CACEzL,IADF,EAEEgH,aAFF,EAGEsD,GAHF,EAGY;EAAA,IADVtD,aACU;IADVA,aACU,GADM,KACN;EAAA;EAAA,IAAVsD,GAAU;IAAVA,GAAU,GAAJ,IAAI;EAAA;EAEVzH,OAAO,CACL7C,IAAI,KAAK,GAAT,IAAgB,CAACA,IAAI,CAAC0I,QAAL,CAAc,GAAd,CAAjB,IAAuC1I,IAAI,CAAC0I,QAAL,CAAc,IAAd,CADlC,EAEL,eAAe,GAAA1I,IAAf,iDACMA,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,wJAGsCT,IAAI,CAACS,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,SAFK,CAAP;EAQA,IAAIoL,UAAU,GAAa,EAA3B;EACA,IAAIM,YAAY,GACd,MACAnM,IAAI,CACDS,OADH,CACW,SADX,EACsB,EADtB,CAC0B;EAAA,CACvBA,OAFH,CAEW,MAFX,EAEmB,GAFnB,CAEwB;EAAA,CACrBA,OAHH,CAGW,qBAHX,EAGkC,MAHlC,CAG0C;EAAA,CACvCA,OAJH,CAIW,WAJX,EAIwB,UAACuK,CAAD,EAAYgB,SAAZ,EAAiC;IACrDH,UAAU,CAACzL,IAAX,CAAgB4L,SAAhB;IACA,OAAO,YAAP;EACD,CAPH,CAFF;EAWA,IAAIhM,IAAI,CAAC0I,QAAL,CAAc,GAAd,CAAJ,EAAwB;IACtBmD,UAAU,CAACzL,IAAX,CAAgB,GAAhB;IACA+L,YAAY,IACVnM,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,GACI,OADJ;IAAA,EAEI,mBAHN,CAFsB;GAAxB,MAMO,IAAIsK,GAAJ,EAAS;IACd;IACA6B,YAAY,IAAI,OAAhB;GAFK,MAGA,IAAInM,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAA5B,EAAiC;IACtC;IACA;IACA;IACA;IACA;IACA;IACA;IACAmM,YAAY,IAAI,eAAhB;EACD,CATM,MASA;EAIP,IAAIP,OAAO,GAAG,IAAIQ,MAAJ,CAAWD,YAAX,EAAyBnF,aAAa,GAAG1I,SAAH,GAAe,GAArD,CAAd;EAEA,OAAO,CAACsN,OAAD,EAAUC,UAAV,CAAP;AACD;AAED,SAASlF,eAATA,CAAyBjE,KAAzB,EAAsC;EACpC,IAAI;IACF,OAAO2J,SAAS,CAAC3J,KAAD,CAAhB;GADF,CAEE,OAAOgC,KAAP,EAAc;IACd7B,OAAO,CACL,KADK,EAEL,oBAAiBH,KAAjB,GAEe,kIAAAgC,KAFf,QAFK,CAAP;IAOA,OAAOhC,KAAP;EACD;AACF;AAED,SAASwJ,wBAATA,CAAkCxJ,KAAlC,EAAiDsJ,SAAjD,EAAkE;EAChE,IAAI;IACF,OAAOM,kBAAkB,CAAC5J,KAAD,CAAzB;GADF,CAEE,OAAOgC,KAAP,EAAc;IACd7B,OAAO,CACL,KADK,EAEL,gCAAgC,GAAAmJ,SAAhC,0DACkBtJ,KADlB,8FAEqCgC,KAFrC,QAFK,CAAP;IAOA,OAAOhC,KAAP;EACD;AACF;AAED;;AAEG;;AACa,SAAA0D,cACd/G,QADc,EAEd8G,QAFc,EAEE;EAEhB,IAAIA,QAAQ,KAAK,GAAjB,EAAsB,OAAO9G,QAAP;EAEtB,IAAI,CAACA,QAAQ,CAACkN,WAAT,EAAuB,CAAArF,UAAvB,CAAkCf,QAAQ,CAACoG,WAAT,EAAlC,CAAL,EAAgE;IAC9D,OAAO,IAAP;EACD,CANe;EAShB;;EACA,IAAIC,UAAU,GAAGrG,QAAQ,CAACuC,QAAT,CAAkB,GAAlB,IACbvC,QAAQ,CAAC3H,MAAT,GAAkB,CADL,GAEb2H,QAAQ,CAAC3H,MAFb;EAGA,IAAIiO,QAAQ,GAAGpN,QAAQ,CAACE,MAAT,CAAgBiN,UAAhB,CAAf;EACA,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,GAA7B,EAAkC;IAChC;IACA,OAAO,IAAP;EACD;EAED,OAAOpN,QAAQ,CAACkD,KAAT,CAAeiK,UAAf,KAA8B,GAArC;AACD;AAED;;AAEG;;AACa,SAAA3J,QAAQC,IAAR,EAAmBH,OAAnB,EAAkC;EAChD,IAAI,CAACG,IAAL,EAAW;IACT;IACA,IAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaL,OAAb;IAEpC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN,CANE;IAQH,CARD,CAQE,OAAOM,CAAP,EAAU;EACb;AACF;AAED;;;;AAIG;;SACayJ,YAAYzN,EAAA,EAAQ0N,YAAA,EAAkB;EAAA,IAAlBA,YAAkB;IAAlBA,YAAkB,GAAH,GAAG;EAAA;EACpD,IAAAC,KAAA,GAII,OAAO3N,EAAP,KAAc,QAAd,GAAyBgB,SAAS,CAAChB,EAAD,CAAlC,GAAyCA,EAJ7C;IACY4N,UADR,GAAAD,KAAA,CACFvN,QAAQ;IAAAyN,YAAA,GAAAF,KAAA,CACR1M,MAAM;IAANA,MAAM,GAAA4M,YAAA,cAAG,EAFP,GAAAA,YAAA;IAAAC,UAAA,GAAAH,KAAA,CAGFzM,IAAI;IAAJA,IAAI,GAAA4M,UAAA,cAAG,KAAAA,UAAA;EAGT,IAAI1N,QAAQ,GAAGwN,UAAU,GACrBA,UAAU,CAAC3F,UAAX,CAAsB,GAAtB,IACE2F,UADF,GAEEG,eAAe,CAACH,UAAD,EAAaF,YAAb,CAHI,GAIrBA,YAJJ;EAMA,OAAO;IACLtN,QADK,EACLA,QADK;IAELa,MAAM,EAAE+M,eAAe,CAAC/M,MAAD,CAFlB;IAGLC,IAAI,EAAE+M,aAAa,CAAC/M,IAAD;GAHrB;AAKD;AAED,SAAS6M,eAATA,CAAyBlG,YAAzB,EAA+C6F,YAA/C,EAAmE;EACjE,IAAIxE,QAAQ,GAAGwE,YAAY,CAAClM,OAAb,CAAqB,MAArB,EAA6B,EAA7B,EAAiC2H,KAAjC,CAAuC,GAAvC,CAAf;EACA,IAAI+E,gBAAgB,GAAGrG,YAAY,CAACsB,KAAb,CAAmB,GAAnB,CAAvB;EAEA+E,gBAAgB,CAAC5F,OAAjB,CAA0B,UAAAwC,OAAD,EAAY;IACnC,IAAIA,OAAO,KAAK,IAAhB,EAAsB;MACpB;MACA,IAAI5B,QAAQ,CAAC3J,MAAT,GAAkB,CAAtB,EAAyB2J,QAAQ,CAACiF,GAAT;IAC1B,CAHD,MAGO,IAAIrD,OAAO,KAAK,GAAhB,EAAqB;MAC1B5B,QAAQ,CAAC/H,IAAT,CAAc2J,OAAd;IACD;GANH;EASA,OAAO5B,QAAQ,CAAC3J,MAAT,GAAkB,CAAlB,GAAsB2J,QAAQ,CAACxC,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAAlD;AACD;AAED,SAAS0H,mBAATA,CACEC,IADF,EAEEC,KAFF,EAGEC,IAHF,EAIExN,IAJF,EAIqB;EAEnB,OACE,oBAAqB,GAAAsN,IAArB,GACQ,mDAAAC,KADR,GAC0B,cAAA/N,IAAI,CAACC,SAAL,CACxBO,IADwB,CAD1B,qDAIQwN,IAJR,GADF;AAQD;AAED;;;;;;;;;;;;;;;;;;;;;;AAsBG;;AACG,SAAUC,0BAAVA,CAEJjH,OAFI,EAEQ;EACZ,OAAOA,OAAO,CAACqD,MAAR,CACL,UAACW,KAAD,EAAQrM,KAAR;IAAA,OACEA,KAAK,KAAK,CAAV,IAAgBqM,KAAK,CAACvF,KAAN,CAAYjF,IAAZ,IAAoBwK,KAAK,CAACvF,KAAN,CAAYjF,IAAZ,CAAiBxB,MAAjB,GAA0B,CAF3D;EAAA,EAAP;AAID;AAED;;AAEG;;AACG,SAAUkP,SAAVA,CACJC,KADI,EAEJC,cAFI,EAGJC,gBAHI,EAIJC,cAJI,EAIkB;EAAA,IAAtBA,cAAsB;IAAtBA,cAAsB,GAAL,KAAK;EAAA;EAEtB,IAAI7O,EAAJ;EACA,IAAI,OAAO0O,KAAP,KAAiB,QAArB,EAA+B;IAC7B1O,EAAE,GAAGgB,SAAS,CAAC0N,KAAD,CAAd;EACD,CAFD,MAEO;IACL1O,EAAE,GAAAuE,QAAA,KAAQmK,KAAR,CAAF;IAEAlL,SAAS,CACP,CAACxD,EAAE,CAACI,QAAJ,IAAgB,CAACJ,EAAE,CAACI,QAAH,CAAYoI,QAAZ,CAAqB,GAArB,CADV,EAEP4F,mBAAmB,CAAC,GAAD,EAAM,UAAN,EAAkB,QAAlB,EAA4BpO,EAA5B,CAFZ,CAAT;IAIAwD,SAAS,CACP,CAACxD,EAAE,CAACI,QAAJ,IAAgB,CAACJ,EAAE,CAACI,QAAH,CAAYoI,QAAZ,CAAqB,GAArB,CADV,EAEP4F,mBAAmB,CAAC,GAAD,EAAM,UAAN,EAAkB,MAAlB,EAA0BpO,EAA1B,CAFZ,CAAT;IAIAwD,SAAS,CACP,CAACxD,EAAE,CAACiB,MAAJ,IAAc,CAACjB,EAAE,CAACiB,MAAH,CAAUuH,QAAV,CAAmB,GAAnB,CADR,EAEP4F,mBAAmB,CAAC,GAAD,EAAM,QAAN,EAAgB,MAAhB,EAAwBpO,EAAxB,CAFZ,CAAT;EAID;EAED,IAAI8O,WAAW,GAAGJ,KAAK,KAAK,EAAV,IAAgB1O,EAAE,CAACI,QAAH,KAAgB,EAAlD;EACA,IAAIwN,UAAU,GAAGkB,WAAW,GAAG,GAAH,GAAS9O,EAAE,CAACI,QAAxC;EAEA,IAAI2O,IAAJ,CAzBsB;EA4BtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIF,cAAc,IAAIjB,UAAU,IAAI,IAApC,EAA0C;IACxCmB,IAAI,GAAGH,gBAAP;EACD,CAFD,MAEO;IACL,IAAII,kBAAkB,GAAGL,cAAc,CAACpP,MAAf,GAAwB,CAAjD;IAEA,IAAIqO,UAAU,CAAC3F,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;MAC/B,IAAIgH,UAAU,GAAGrB,UAAU,CAACzE,KAAX,CAAiB,GAAjB,CAAjB,CAD+B;MAI/B;MACA;;MACA,OAAO8F,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAzB,EAA+B;QAC7BA,UAAU,CAACC,KAAX;QACAF,kBAAkB,IAAI,CAAtB;MACD;MAEDhP,EAAE,CAACI,QAAH,GAAc6O,UAAU,CAACvI,IAAX,CAAgB,GAAhB,CAAd;IACD,CAfI;IAkBL;;IACAqI,IAAI,GAAGC,kBAAkB,IAAI,CAAtB,GAA0BL,cAAc,CAACK,kBAAD,CAAxC,GAA+D,GAAtE;EACD;EAED,IAAIjO,IAAI,GAAG0M,WAAW,CAACzN,EAAD,EAAK+O,IAAL,CAAtB,CA5DsB;;EA+DtB,IAAII,wBAAwB,GAC1BvB,UAAU,IAAIA,UAAU,KAAK,GAA7B,IAAoCA,UAAU,CAACnE,QAAX,CAAoB,GAApB,CADtC,CA/DsB;;EAkEtB,IAAI2F,uBAAuB,GACzB,CAACN,WAAW,IAAIlB,UAAU,KAAK,GAA/B,KAAuCgB,gBAAgB,CAACnF,QAAjB,CAA0B,GAA1B,CADzC;EAEA,IACE,CAAC1I,IAAI,CAACX,QAAL,CAAcqJ,QAAd,CAAuB,GAAvB,CAAD,KACC0F,wBAAwB,IAAIC,uBAD7B,CADF,EAGE;IACArO,IAAI,CAACX,QAAL,IAAiB,GAAjB;EACD;EAED,OAAOW,IAAP;AACD;AAED;;AAEG;;AACG,SAAUsO,aAAVA,CAAwBrP,EAAxB,EAA8B;EAClC;EACA,OAAOA,EAAE,KAAK,EAAP,IAAcA,EAAW,CAACI,QAAZ,KAAyB,EAAvC,GACH,GADG,GAEH,OAAOJ,EAAP,KAAc,QAAd,GACAgB,SAAS,CAAChB,EAAD,CAAT,CAAcI,QADd,GAEAJ,EAAE,CAACI,QAJP;AAKD;AAED;;AAEG;;IACU8H,SAAS,GAAI,SAAbA,SAASA,CAAIoH,KAAD;EAAA,OACvBA,KAAK,CAAC5I,IAAN,CAAW,GAAX,EAAgBlF,OAAhB,CAAwB,QAAxB,EAAkC,GAAlC;AAAA;AAEF;;AAEG;;IACUoK,iBAAiB,GAAI,SAArBA,iBAAiBA,CAAIxL,QAAD;EAAA,OAC/BA,QAAQ,CAACoB,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAA6B,CAAAA,OAA7B,CAAqC,MAArC,EAA6C,GAA7C;AAAA;AAEF;;AAEG;;AACI,IAAMwM,eAAe,GAAI,SAAnBA,eAAeA,CAAI/M,MAAD;EAAA,OAC7B,CAACA,MAAD,IAAWA,MAAM,KAAK,GAAtB,GACI,EADJ,GAEIA,MAAM,CAACgH,UAAP,CAAkB,GAAlB,CACA,GAAAhH,MADA,GAEA,MAAMA,MALL;AAAA;AAOP;;AAEG;;AACI,IAAMgN,aAAa,GAAI,SAAjBA,aAAaA,CAAI/M,IAAD;EAAA,OAC3B,CAACA,IAAD,IAASA,IAAI,KAAK,GAAlB,GAAwB,EAAxB,GAA6BA,IAAI,CAAC+G,UAAL,CAAgB,GAAhB,CAAuB,GAAA/G,IAAvB,GAA8B,MAAMA,IAD5D;AAAA;AAQP;;;AAGG;;AACI,IAAMqO,IAAI,GAAiB,SAArBA,IAAqBA,CAACC,IAAD,EAAOC,IAAP,EAAoB;EAAA,IAAbA,IAAa;IAAbA,IAAa,GAAN,EAAM;EAAA;EACpD,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;IAAEE,MAAM,EAAEF;EAAV,CAA3B,GAA8CA,IAAjE;EAEA,IAAIG,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;EACA,IAAI,CAACA,OAAO,CAAChJ,GAAR,CAAY,cAAZ,CAAL,EAAkC;IAChCgJ,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4B,iCAA5B;EACD;EAED,OAAO,IAAIC,QAAJ,CAAaxP,IAAI,CAACC,SAAL,CAAegP,IAAf,CAAb,EAAAjL,QAAA,KACFmL,YADE;IAELE,OAAA,EAAAA;GAFF;AAID;AAZM,IAoBMI,oBAAP,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,oBAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,oBAAA;EAAA,SAAAA,qBAAA;IAAAK,eAAA,OAAAL,oBAAA;IAAA,OAAAG,MAAA,CAAAtG,KAAA,OAAAyG,SAAA;EAAA;EAAA,OAAAC,YAAA,CAAAP,oBAAA;AAAA,gBAAAQ,gBAAA,CAAoC7M,KAApC;AAAA,IAEO8M,YAAA;EAWX,SAAAA,aAAYjB,IAAA,EAA+BE,YAA/B,EAA0D;IAAA,IAAAgB,KAAA;IAAAL,eAAA,OAAAI,YAAA;IAV9D,KAAAE,cAAA,GAA8B,IAAItK,GAAJ,EAA9B;IAIA,KAAAuK,WAAA,GACN,IAAIvK,GAAJ,EADM;IAIR,IAAY,CAAAwK,YAAZ,GAAyB,EAAzB;IAGErN,SAAS,CACPgM,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoC,CAACsB,KAAK,CAACC,OAAN,CAAcvB,IAAd,CAD9B,EAEP,oCAFO,CAAT,CADoE;IAOpE;;IACA,IAAIwB,MAAJ;IACA,KAAKC,YAAL,GAAoB,IAAIC,OAAJ,CAAY,UAACnF,CAAD,EAAIoF,CAAJ;MAAA,OAAWH,MAAM,GAAGG,CAAhC;IAAA,EAApB;IACA,KAAKC,UAAL,GAAkB,IAAIC,eAAJ,EAAlB;IACA,IAAIC,OAAO,GAAG,SAAVA,OAAOA,CAAA;MAAA,OACTN,MAAM,CAAC,IAAIhB,oBAAJ,CAAyB,uBAAzB,CAAD,CADR;IAAA;IAEA,KAAKuB,mBAAL,GAA2B;MAAA,OACzBb,KAAA,CAAKU,UAAL,CAAgBI,MAAhB,CAAuB3L,mBAAvB,CAA2C,OAA3C,EAAoDyL,OAApD,CADF;IAAA;IAEA,IAAK,CAAAF,UAAL,CAAgBI,MAAhB,CAAuB5L,gBAAvB,CAAwC,OAAxC,EAAiD0L,OAAjD;IAEA,IAAK,CAAA9B,IAAL,GAAY/D,MAAM,CAAC1M,OAAP,CAAeyQ,IAAf,CAAqB,CAAA3E,MAArB,CACV,UAAC4G,GAAD,EAAAjN,IAAA;MAAA,IAAAkN,KAAA,GAAAhF,cAAA,CAAAlI,IAAA;QAAOvE,GAAD,GAAAyR,KAAA;QAAMjO,KAAN,GAAAiO,KAAA;MAAN,OACEjG,MAAM,CAAC/F,MAAP,CAAc+L,GAAd,EAAAE,eAAA,KACG1R,GAAD,EAAOyQ,KAAA,CAAKkB,YAAL,CAAkB3R,GAAlB,EAAuBwD,KAAvB,GAFX;KADU,EAKV,EALU,CAAZ;IAQA,IAAI,KAAKqF,IAAT,EAAe;MACb;MACA,KAAKyI,mBAAL;IACD;IAED,IAAK,CAAA9B,IAAL,GAAYC,YAAZ;EACD;EAAAa,YAAA,CAAAE,YAAA;IAAAxQ,GAAA;IAAAwD,KAAA,EAEO,SAAAmO,aACN3R,GADkB,EAElBwD,KAFkB,EAEe;MAAA,IAAAoO,MAAA;MAEjC,IAAI,EAAEpO,KAAK,YAAYyN,OAAnB,CAAJ,EAAiC;QAC/B,OAAOzN,KAAP;MACD;MAED,KAAKoN,YAAL,CAAkB1P,IAAlB,CAAuBlB,GAAvB;MACA,KAAK0Q,cAAL,CAAoB9J,GAApB,CAAwB5G,GAAxB,EAPiC;MAUjC;;MACA,IAAI6R,OAAO,GAAmBZ,OAAO,CAACa,IAAR,CAAa,CAACtO,KAAD,EAAQ,KAAKwN,YAAb,CAAb,EAAyCe,IAAzC,CAC3B,UAAAxC,IAAD;QAAA,OAAUqC,MAAA,CAAKI,QAAL,CAAcH,OAAd,EAAuB7R,GAAvB,EAA4B,IAA5B,EAAkCuP,IAAlC,CADkB;MAAA,GAE3B,UAAA/J,KAAD;QAAA,OAAWoM,MAAA,CAAKI,QAAL,CAAcH,OAAd,EAAuB7R,GAAvB,EAA4BwF,KAA5B,CAFiB;MAAA,EAA9B,CAXiC;MAiBjC;;MACAqM,OAAO,CAACI,KAAR,CAAc,YAAO,EAArB;MAEAzG,MAAM,CAAC0G,cAAP,CAAsBL,OAAtB,EAA+B,UAA/B,EAA2C;QAAEM,GAAG,EAAE,SAAAA,IAAA;UAAA,OAAM;QAAA;OAAxD;MACA,OAAON,OAAP;IACD;EAAA;IAAA7R,GAAA;IAAAwD,KAAA,EAEO,SAAAwO,SACNH,OADc,EAEd7R,GAFc,EAGdwF,KAHc,EAId+J,IAJc,EAIA;MAEd,IACE,KAAK4B,UAAL,CAAgBI,MAAhB,CAAuBa,OAAvB,IACA5M,KAAK,YAAYuK,oBAFnB,EAGE;QACA,KAAKuB,mBAAL;QACA9F,MAAM,CAAC0G,cAAP,CAAsBL,OAAtB,EAA+B,QAA/B,EAAyC;UAAEM,GAAG,EAAE,SAAAA,IAAA;YAAA,OAAM3M,KAAA;UAAA;SAAtD;QACA,OAAOyL,OAAO,CAACF,MAAR,CAAevL,KAAf,CAAP;MACD;MAED,KAAKkL,cAAL,CAAoB2B,MAApB,CAA2BrS,GAA3B;MAEA,IAAI,KAAK6I,IAAT,EAAe;QACb;QACA,KAAKyI,mBAAL;MACD;MAED,IAAI9L,KAAJ,EAAW;QACTgG,MAAM,CAAC0G,cAAP,CAAsBL,OAAtB,EAA+B,QAA/B,EAAyC;UAAEM,GAAG,EAAE,SAAAA,IAAA;YAAA,OAAM3M,KAAA;UAAA;SAAtD;QACA,KAAK8M,IAAL,CAAU,KAAV,EAAiBtS,GAAjB;QACA,OAAOiR,OAAO,CAACF,MAAR,CAAevL,KAAf,CAAP;MACD;MAEDgG,MAAM,CAAC0G,cAAP,CAAsBL,OAAtB,EAA+B,OAA/B,EAAwC;QAAEM,GAAG,EAAE,SAAAA,IAAA;UAAA,OAAM5C,IAAA;QAAA;OAArD;MACA,KAAK+C,IAAL,CAAU,KAAV,EAAiBtS,GAAjB;MACA,OAAOuP,IAAP;IACD;EAAA;IAAAvP,GAAA;IAAAwD,KAAA,EAEO,SAAA8O,KAAKF,OAAD,EAAmBG,UAAnB,EAAsC;MAChD,IAAK,CAAA5B,WAAL,CAAiBtI,OAAjB,CAA0B,UAAAmK,UAAD;QAAA,OAAgBA,UAAU,CAACJ,OAAD,EAAUG,UAAV,CAAnD;MAAA;IACD;EAAA;IAAAvS,GAAA;IAAAwD,KAAA,EAED,SAAAiP,UAAU7Q,EAAD,EAAoD;MAAA,IAAA8Q,MAAA;MAC3D,KAAK/B,WAAL,CAAiB/J,GAAjB,CAAqBhF,EAArB;MACA,OAAO;QAAA,OAAM8Q,MAAK,CAAA/B,WAAL,CAAiB0B,MAAjB,CAAwBzQ,EAAxB,CAAb;MAAA;IACD;EAAA;IAAA5B,GAAA;IAAAwD,KAAA,EAED,SAAAmP,OAAA,EAAM;MAAA,IAAAC,MAAA;MACJ,IAAK,CAAAzB,UAAL,CAAgB0B,KAAhB;MACA,KAAKnC,cAAL,CAAoBrI,OAApB,CAA4B,UAACyK,CAAD,EAAIC,CAAJ;QAAA,OAAUH,MAAA,CAAKlC,cAAL,CAAoB2B,MAApB,CAA2BU,CAA3B,CAAtC;MAAA;MACA,IAAK,CAAAT,IAAL,CAAU,IAAV;IACD;EAAA;IAAAtS,GAAA;IAAAwD,KAAA;MAAA,IAAAwP,YAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAEgB,SAAAC,QAAC7B,MAAD;QAAA,IAAA8B,MAAA;QAAA,IAAAjB,OAAA,EAAAf,OAAA;QAAA,OAAA6B,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACXtB,OAAO,GAAG,KAAd;cAAA,IACK,IAAK,CAAAvJ,IAAV;gBAAA2K,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACMrC,OAAO,GAAG,SAAVA,OAAOA,CAAA;gBAAA,OAASgC,MAAA,CAAKV,MAAL,EAApB;cAAA;cACApB,MAAM,CAAC5L,gBAAP,CAAwB,OAAxB,EAAiC0L,OAAjC;cAAAmC,QAAA,CAAAE,IAAA;cAAA,OACgB,IAAIzC,OAAJ,CAAa,UAAA0C,OAAD,EAAY;gBACtCN,MAAK,CAAAZ,SAAL,CAAgB,UAAAL,OAAD,EAAY;kBACzBb,MAAM,CAAC3L,mBAAP,CAA2B,OAA3B,EAAoCyL,OAApC;kBACA,IAAIe,OAAO,IAAIiB,MAAK,CAAAxK,IAApB,EAA0B;oBACxB8K,OAAO,CAACvB,OAAD,CAAP;kBACD;iBAJH;cAMD,CAPe,CAAhB;YAAA;cAAAA,OAAO,GAAAoB,QAAA,CAAAI,IAAA;YAAA;cAAA,OAAAJ,QAAA,CAAAK,MAAA,WASFzB,OAAP;YAAA;YAAA;cAAA,OAAAoB,QAAA,CAAAM,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA,CACD;MAAA,SAAAW,YAAAC,EAAA;QAAA,OAAAhB,YAAA,CAAApJ,KAAA,OAAAyG,SAAA;MAAA;MAAA,OAAA0D,WAAA;IAAA;EAAA;IAAA/T,GAAA;IAAAmS,GAAA,EAEO,SAAAA,IAAA;MACN,OAAO,IAAK,CAAAzB,cAAL,CAAoBuD,IAApB,KAA6B,CAApC;IACD;EAAA;IAAAjU,GAAA;IAAAmS,GAAA,EAEgB,SAAAA,IAAA;MACf5O,SAAS,CACP,IAAK,CAAAgM,IAAL,KAAc,IAAd,IAAsB,IAAK,CAAA1G,IADpB,EAEP,2DAFO,CAAT;MAKA,OAAO2C,MAAM,CAAC1M,OAAP,CAAe,KAAKyQ,IAApB,CAA0B,CAAA3E,MAA1B,CACL,UAAC4G,GAAD,EAAA0C,KAAA;QAAA,IAAAC,KAAA,GAAA1H,cAAA,CAAAyH,KAAA;UAAOlU,GAAD,GAAAmU,KAAA;UAAM3Q,KAAN,GAAA2Q,KAAA;QAAN,OACE3I,MAAM,CAAC/F,MAAP,CAAc+L,GAAd,EAAAE,eAAA,KACG1R,GAAD,EAAOoU,oBAAoB,CAAC5Q,KAAD,GAF/B;OADK,EAKL,EALK,CAAP;IAOD;EAAA;IAAAxD,GAAA;IAAAmS,GAAA,EAEc,SAAAA,IAAA;MACb,OAAOtB,KAAK,CAAC/B,IAAN,CAAW,KAAK4B,cAAhB,CAAP;IACD;EAAA;EAAA,OAAAF,YAAA;AAAA;AAGH,SAAS6D,gBAATA,CAA0B7Q,KAA1B,EAAoC;EAClC,OACEA,KAAK,YAAYyN,OAAjB,IAA6BzN,KAAwB,CAAC8Q,QAAzB,KAAsC,IADrE;AAGD;AAED,SAASF,oBAATA,CAA8B5Q,KAA9B,EAAwC;EACtC,IAAI,CAAC6Q,gBAAgB,CAAC7Q,KAAD,CAArB,EAA8B;IAC5B,OAAOA,KAAP;EACD;EAED,IAAIA,KAAK,CAAC+Q,MAAV,EAAkB;IAChB,MAAM/Q,KAAK,CAAC+Q,MAAZ;EACD;EACD,OAAO/Q,KAAK,CAACgR,KAAb;AACD;AAOM,IAAMC,KAAK,GAAkB,SAAvBA,KAAuBA,CAAClF,IAAD,EAAOC,IAAP,EAAoB;EAAA,IAAbA,IAAa;IAAbA,IAAa,GAAN,EAAM;EAAA;EACtD,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;IAAEE,MAAM,EAAEF;EAAV,CAA3B,GAA8CA,IAAjE;EAEA,OAAO,IAAIgB,YAAJ,CAAiBjB,IAAjB,EAAuBE,YAAvB,CAAP;AACD;AAOD;;;AAGG;;AACI,IAAMiF,QAAQ,GAAqB,SAA7BA,QAA6BA,CAACxR,GAAD,EAAMsM,IAAN,EAAoB;EAAA,IAAdA,IAAc;IAAdA,IAAc,GAAP,GAAO;EAAA;EAC5D,IAAIC,YAAY,GAAGD,IAAnB;EACA,IAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;IACpCA,YAAY,GAAG;MAAEC,MAAM,EAAED;KAAzB;GADF,MAEO,IAAI,OAAOA,YAAY,CAACC,MAApB,KAA+B,WAAnC,EAAgD;IACrDD,YAAY,CAACC,MAAb,GAAsB,GAAtB;EACD;EAED,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd;EACAA,OAAO,CAACE,GAAR,CAAY,UAAZ,EAAwB3M,GAAxB;EAEA,OAAO,IAAI4M,QAAJ,CAAa,IAAb,EAAAxL,QAAA,KACFmL,YADE;IAELE,OAAA,EAAAA;GAFF;AAID;AAED;;;AAGG;AAHH,IAIagF,aAAA,gBAAArE,YAAA,CAOX,SAAAqE,cACEjF,MAAA,EACAkF,UADA,EAEArF,IAFA,EAGAsF,QAHA,EAGgB;EAAAzE,eAAA,OAAAuE,aAAA;EAAA,IAAhBE,QAAgB;IAAhBA,QAAgB,GAAL,KAAK;EAAA;EAEhB,IAAK,CAAAnF,MAAL,GAAcA,MAAd;EACA,KAAKkF,UAAL,GAAkBA,UAAU,IAAI,EAAhC;EACA,IAAK,CAAAC,QAAL,GAAgBA,QAAhB;EACA,IAAItF,IAAI,YAAY7L,KAApB,EAA2B;IACzB,KAAK6L,IAAL,GAAYA,IAAI,CAACrL,QAAL,EAAZ;IACA,IAAK,CAAAsB,KAAL,GAAa+J,IAAb;EACD,CAHD,MAGO;IACL,IAAK,CAAAA,IAAL,GAAYA,IAAZ;EACD;AACF;AAGH;;;AAGG;AACG,SAAUuF,oBAAVA,CAA+BtP,KAA/B,EAAyC;EAC7C,OACEA,KAAK,IAAI,IAAT,IACA,OAAOA,KAAK,CAACkK,MAAb,KAAwB,QADxB,IAEA,OAAOlK,KAAK,CAACoP,UAAb,KAA4B,QAF5B,IAGA,OAAOpP,KAAK,CAACqP,QAAb,KAA0B,SAH1B,IAIA,UAAUrP,KALZ;AAOD;ACj0BD,IAAMuP,uBAAuB,GAAyB,CACpD,MADoD,EAEpD,KAFoD,EAGpD,OAHoD,EAIpD,QAJoD,CAAtD;AAMA,IAAMC,oBAAoB,GAAG,IAAI5O,GAAJ,CAC3B2O,uBAD2B,CAA7B;AAIA,IAAME,sBAAsB,IAC1B,KAD2C,EAAA3O,MAAA,CAExCyO,uBAFwC,CAA7C;AAIA,IAAMG,mBAAmB,GAAG,IAAI9O,GAAJ,CAAoB6O,sBAApB,CAA5B;AAEA,IAAME,mBAAmB,GAAG,IAAI/O,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAR,CAA5B;AACA,IAAMgP,iCAAiC,GAAG,IAAIhP,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,CAA1C;AAEO,IAAMiP,eAAe,GAA6B;EACvDlW,KAAK,EAAE,MADgD;EAEvDc,QAAQ,EAAEb,SAF6C;EAGvDkW,UAAU,EAAElW,SAH2C;EAIvDmW,UAAU,EAAEnW,SAJ2C;EAKvDoW,WAAW,EAAEpW,SAL0C;EAMvDqW,QAAQ,EAAErW;AAN6C;AASlD,IAAMsW,YAAY,GAA0B;EACjDvW,KAAK,EAAE,MAD0C;EAEjDoQ,IAAI,EAAEnQ,SAF2C;EAGjDkW,UAAU,EAAElW,SAHqC;EAIjDmW,UAAU,EAAEnW,SAJqC;EAKjDoW,WAAW,EAAEpW,SALoC;EAMjDqW,QAAQ,EAAErW;AANuC;AAS5C,IAAMuW,YAAY,GAAqB;EAC5CxW,KAAK,EAAE,WADqC;EAE5CyW,OAAO,EAAExW,SAFmC;EAG5CyW,KAAK,EAAEzW,SAHqC;EAI5Ca,QAAQ,EAAEb;AAJkC;AAO9C,IAAM0W,kBAAkB,GAAG,+BAA3B;AAEA,IAAMC,SAAS,GACb,OAAOhU,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACe,QAAd,KAA2B,WAD3B,IAEA,OAAOf,MAAM,CAACe,QAAP,CAAgBkT,aAAvB,KAAyC,WAH3C;AAIA,IAAMC,QAAQ,GAAG,CAACF,SAAlB;AAGA;AACA;AACA;;AAEA;;AAEG;;AACG,SAAUG,YAAVA,CAAuB1G,IAAvB,EAAuC;EAC3CjM,SAAS,CACPiM,IAAI,CAACvJ,MAAL,CAAY3G,MAAZ,GAAqB,CADd,EAEP,2DAFO,CAAT;EAKA,IAAI6W,UAAU,GAAGnQ,yBAAyB,CAACwJ,IAAI,CAACvJ,MAAN,CAA1C,CAN2C;;EAQ3C,IAAImQ,eAAe,GAAwB,IAA3C,CAR2C;;EAU3C,IAAIzF,WAAW,GAAG,IAAIvK,GAAJ,EAAlB,CAV2C;;EAY3C,IAAIiQ,oBAAoB,GAAkC,IAA1D,CAZ2C;;EAc3C,IAAIC,uBAAuB,GAA2C,IAAtE,CAd2C;;EAgB3C,IAAIC,iBAAiB,GAAqC,IAA1D,CAhB2C;EAkB3C;EACA;EACA;EACA;EACA;;EACA,IAAIC,qBAAqB,GAAGhH,IAAI,CAACiH,aAAL,IAAsB,IAAlD;EAEA,IAAIC,cAAc,GAAG3P,WAAW,CAC9BoP,UAD8B,EAE9B3G,IAAI,CAAC9O,OAAL,CAAaT,QAFiB,EAG9BuP,IAAI,CAACvI,QAHyB,CAAhC;EAKA,IAAI0P,aAAa,GAAqB,IAAtC;EAEA,IAAID,cAAc,IAAI,IAAtB,EAA4B;IAC1B;IACA;IACA,IAAIlR,KAAK,GAAGoR,sBAAsB,CAAC,GAAD,EAAM;MACtCzW,QAAQ,EAAEqP,IAAI,CAAC9O,OAAL,CAAaT,QAAb,CAAsBE;IADM,CAAN,CAAlC;IAGA,IAAA0W,qBAAA,GAAyBC,sBAAsB,CAACX,UAAD,CAA/C;MAAM7O,OAAF,GAAAuP,qBAAA,CAAEvP,OAAF;MAAWvB,KAAA,GAAA8Q,qBAAA,CAAA9Q,KAAA;IACf2Q,cAAc,GAAGpP,OAAjB;IACAqP,aAAa,GAAAjF,eAAA,KAAM3L,KAAK,CAACS,EAAP,EAAYhB,KAAA,CAA9B;EACD;EAED,IAAIuR,WAAW,GACb,CAACL,cAAc,CAAChM,IAAf,CAAqB,UAAAsM,CAAD;IAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQkR,MAAnC;EAAA,EAAD,IAA+CzH,IAAI,CAACiH,aAAL,IAAsB,IADvE;EAGA,IAAIS,MAAJ;EACA,IAAI/X,KAAK,GAAgB;IACvBgY,aAAa,EAAE3H,IAAI,CAAC9O,OAAL,CAAanB,MADL;IAEvBU,QAAQ,EAAEuP,IAAI,CAAC9O,OAAL,CAAaT,QAFA;IAGvBqH,OAAO,EAAEoP,cAHc;IAIvBK,WAJuB,EAIvBA,WAJuB;IAKvBK,UAAU,EAAE/B,eALW;IAMvB;IACAgC,qBAAqB,EAAE7H,IAAI,CAACiH,aAAL,IAAsB,IAAtB,GAA6B,KAA7B,GAAqC,IAPrC;IAQvBa,kBAAkB,EAAE,KARG;IASvBC,YAAY,EAAE,MATS;IAUvBC,UAAU,EAAGhI,IAAI,CAACiH,aAAL,IAAsBjH,IAAI,CAACiH,aAAL,CAAmBe,UAA1C,IAAyD,EAV9C;IAWvBC,UAAU,EAAGjI,IAAI,CAACiH,aAAL,IAAsBjH,IAAI,CAACiH,aAAL,CAAmBgB,UAA1C,IAAyD,IAX9C;IAYvBC,MAAM,EAAGlI,IAAI,CAACiH,aAAL,IAAsBjH,IAAI,CAACiH,aAAL,CAAmBiB,MAA1C,IAAqDf,aAZtC;IAavBgB,QAAQ,EAAE,IAAIC,GAAJ,EAba;IAcvBC,QAAQ,EAAE,IAAID,GAAJ;EAda,CAAzB,CA/C2C;EAiE3C;;EACA,IAAIE,aAAa,GAAkB1Z,MAAa,CAACoB,GAAjD,CAlE2C;EAqE3C;;EACA,IAAIuY,yBAAyB,GAAG,KAAhC,CAtE2C;;EAyE3C,IAAIC,2BAAJ,CAzE2C;EA4E3C;;EACA,IAAIC,2BAA2B,GAAG,KAAlC,CA7E2C;EAgF3C;EACA;EACA;;EACA,IAAIC,sBAAsB,GAAG,KAA7B,CAnF2C;EAsF3C;;EACA,IAAIC,uBAAuB,GAAa,EAAxC,CAvF2C;EA0F3C;;EACA,IAAIC,qBAAqB,GAAa,EAAtC,CA3F2C;;EA8F3C,IAAIC,gBAAgB,GAAG,IAAIT,GAAJ,EAAvB,CA9F2C;;EAiG3C,IAAIU,kBAAkB,GAAG,CAAzB,CAjG2C;EAoG3C;EACA;;EACA,IAAIC,uBAAuB,GAAG,CAAC,CAA/B,CAtG2C;;EAyG3C,IAAIC,cAAc,GAAG,IAAIZ,GAAJ,EAArB,CAzG2C;;EA4G3C,IAAIa,gBAAgB,GAAG,IAAIrS,GAAJ,EAAvB,CA5G2C;;EA+G3C,IAAIsS,gBAAgB,GAAG,IAAId,GAAJ,EAAvB,CA/G2C;EAkH3C;EACA;EACA;;EACA,IAAIe,eAAe,GAAG,IAAIf,GAAJ,EAAtB,CArH2C;EAwH3C;;EACA,IAAIgB,gBAAgB,GAAG,IAAIhB,GAAJ,EAAvB,CAzH2C;EA4H3C;;EACA,IAAIiB,uBAAuB,GAAG,KAA9B,CA7H2C;EAgI3C;EACA;;EACA,SAASC,UAATA,CAAA,EAAmB;IACjB;IACA;IACA1C,eAAe,GAAG5G,IAAI,CAAC9O,OAAL,CAAaiB,MAAb,CAChB,UAAA4C,IAA+C;MAAA,IAApC4S,aAAV,GAA8C5S,IAAA,CAA5ChF,MAAM;QAAiBU,QAAzB,GAA8CsE,IAAA,CAArBtE,QAAzB;QAAmCqB,KAAA,GAAWiD,IAAA,CAAXjD,KAAA;;MAClC;MACA;MACA,IAAIuX,uBAAJ,EAA6B;QAC3BA,uBAAuB,GAAG,KAA1B;QACA;MACD;MAEDlV,OAAO,CACLiV,gBAAgB,CAAC3E,IAAjB,KAA0B,CAA1B,IAA+B3S,KAAK,IAAI,IADnC,EAEL,oEACE,2EADF,GAEE,uEAFF,GAGE,yEAHF,GAIE,iEAJF,GAKE,yDAPG,CAAP;MAUA,IAAIyX,UAAU,GAAGC,qBAAqB,CAAC;QACrCC,eAAe,EAAE9Z,KAAK,CAACc,QADc;QAErCmB,YAAY,EAAEnB,QAFuB;QAGrCkX,aAAA,EAAAA;MAHqC,CAAD,CAAtC;MAMA,IAAI4B,UAAU,IAAIzX,KAAK,IAAI,IAA3B,EAAiC;QAC/B;QACAuX,uBAAuB,GAAG,IAA1B;QACArJ,IAAI,CAAC9O,OAAL,CAAae,EAAb,CAAgBH,KAAK,GAAG,CAAC,CAAzB,EAH+B;;QAM/B4X,aAAa,CAACH,UAAD,EAAa;UACxB5Z,KAAK,EAAE,SADiB;UAExBc,QAFwB,EAExBA,QAFwB;UAGxB2V,OAAO,WAAAA,QAAA;YACLsD,aAAa,CAACH,UAAD,EAAc;cACzB5Z,KAAK,EAAE,YADkB;cAEzByW,OAAO,EAAExW,SAFgB;cAGzByW,KAAK,EAAEzW,SAHkB;cAIzBa,QAAA,EAAAA;aAJW,CAAb,CADK;;YAQLuP,IAAI,CAAC9O,OAAL,CAAae,EAAb,CAAgBH,KAAhB;WAXsB;UAaxBuU,KAAK,WAAAA,MAAA;YACHsD,aAAa,CAACJ,UAAD,CAAb;YACAK,WAAW,CAAC;cAAEvB,QAAQ,EAAE,IAAID,GAAJ,CAAQV,MAAM,CAAC/X,KAAP,CAAa0Y,QAArB;YAAZ,CAAD,CAAX;UACD;QAhBuB,CAAb,CAAb;QAkBA;MACD;MAED,OAAOwB,eAAe,CAAClC,aAAD,EAAgBlX,QAAhB,CAAtB;KApDc,CAAlB,CAHiB;;IA4DjB,IAAI,CAACd,KAAK,CAAC4X,WAAX,EAAwB;MACtBsC,eAAe,CAACjb,MAAa,CAACoB,GAAf,EAAoBL,KAAK,CAACc,QAA1B,CAAf;IACD;IAED,OAAOiX,MAAP;EACD,CAnM0C;;EAsM3C,SAASoC,OAATA,CAAA,EAAgB;IACd,IAAIlD,eAAJ,EAAqB;MACnBA,eAAe;IAChB;IACDzF,WAAW,CAAC4I,KAAZ;IACAvB,2BAA2B,IAAIA,2BAA2B,CAACnF,KAA5B,EAA/B;IACA1T,KAAK,CAACwY,QAAN,CAAetP,OAAf,CAAuB,UAACyD,CAAD,EAAI9L,GAAJ;MAAA,OAAYwZ,aAAa,CAACxZ,GAAD,CAAhD;IAAA;IACAb,KAAK,CAAC0Y,QAAN,CAAexP,OAAf,CAAuB,UAACyD,CAAD,EAAI9L,GAAJ;MAAA,OAAYmZ,aAAa,CAACnZ,GAAD,CAAhD;IAAA;EACD,CA9M0C;;EAiN3C,SAASyS,SAATA,CAAmB7Q,EAAnB,EAAuC;IACrC+O,WAAW,CAAC/J,GAAZ,CAAgBhF,EAAhB;IACA,OAAO;MAAA,OAAM+O,WAAW,CAAC0B,MAAZ,CAAmBzQ,EAAnB,CAAb;IAAA;EACD,CApN0C;;EAuN3C,SAASwX,WAATA,CAAqBK,QAArB,EAAmD;IACjDta,KAAK,GACAmF,QAAA,KAAAnF,KADA,EAEAsa,QAFA,CAAL;IAIA9I,WAAW,CAACtI,OAAZ,CAAqB,UAAAmK,UAAD;MAAA,OAAgBA,UAAU,CAACrT,KAAD,CAA9C;IAAA;EACD,CA7N0C;EAgO3C;EACA;EACA;EACA;;EACA,SAASua,kBAATA,CACEzZ,QADF,EAEEwZ,QAFF,EAE4E;IAAA,IAAAE,eAAA,EAAAC,gBAAA;;IAE1E;IACA;IACA;IACA;IACA;IACA,IAAIC,cAAc,GAChB1a,KAAK,CAACsY,UAAN,IAAoB,IAApB,IACAtY,KAAK,CAACiY,UAAN,CAAiB9B,UAAjB,IAA+B,IAD/B,IAEAwE,gBAAgB,CAAC3a,KAAK,CAACiY,UAAN,CAAiB9B,UAAlB,CAFhB,IAGAnW,KAAK,CAACiY,UAAN,CAAiBjY,KAAjB,KAA2B,SAH3B,IAIA,EAAAwa,eAAA,GAAA1Z,QAAQ,CAACd,KAAT,KAAgB,gBAAAwa,eAAA,CAAAI,WAAhB,MAAgC,IALlC;IAOA,IAAItC,UAAJ;IACA,IAAIgC,QAAQ,CAAChC,UAAb,EAAyB;MACvB,IAAIjM,MAAM,CAACwO,IAAP,CAAYP,QAAQ,CAAChC,UAArB,CAAiC,CAAAnY,MAAjC,GAA0C,CAA9C,EAAiD;QAC/CmY,UAAU,GAAGgC,QAAQ,CAAChC,UAAtB;MACD,CAFD,MAEO;QACL;QACAA,UAAU,GAAG,IAAb;MACD;KANH,MAOO,IAAIoC,cAAJ,EAAoB;MACzB;MACApC,UAAU,GAAGtY,KAAK,CAACsY,UAAnB;IACD,CAHM,MAGA;MACL;MACAA,UAAU,GAAG,IAAb;IACD,CA5ByE;;IA+B1E,IAAID,UAAU,GAAGiC,QAAQ,CAACjC,UAAT,GACbyC,eAAe,CACb9a,KAAK,CAACqY,UADO,EAEbiC,QAAQ,CAACjC,UAFI,EAGbiC,QAAQ,CAACnS,OAAT,IAAoB,EAHP,EAIbmS,QAAQ,CAAC/B,MAJI,CADF,GAObvY,KAAK,CAACqY,UAPV,CA/B0E;IAyC1E;IAAA,IAAA0C,UAAA,GAAAzR,0BAAA,CACkBmQ,gBAAlB;MAAAuB,MAAA;IAAA;MAAA,KAAAD,UAAA,CAAAtR,CAAA,MAAAuR,MAAA,GAAAD,UAAA,CAAAxa,CAAA,IAAAmJ,IAAA,GAAoC;QAAA,IAAAuR,YAAA,GAAA3N,cAAA,CAAA0N,MAAA,CAAA3W,KAAA;UAA1BxD,GAAD,GAAAoa,YAAA;QACPjB,aAAa,CAACnZ,GAAD,CAAb;MACD,CA5CyE;MA+C1E;IAAA,SAAA+I,GAAA;MAAAmR,UAAA,CAAAnW,CAAA,CAAAgF,GAAA;IAAA;MAAAmR,UAAA,CAAAlR,CAAA;IAAA;IACA,IAAIsO,kBAAkB,GACpBS,yBAAyB,KAAK,IAA9B,IACC5Y,KAAK,CAACiY,UAAN,CAAiB9B,UAAjB,IAA+B,IAA/B,IACCwE,gBAAgB,CAAC3a,KAAK,CAACiY,UAAN,CAAiB9B,UAAlB,CADjB,IAEC,EAAAsE,gBAAA,GAAA3Z,QAAQ,CAACd,KAAT,KAAgB,gBAAAya,gBAAA,CAAAG,WAAhB,MAAgC,IAJpC;IAMAX,WAAW,CAAA9U,QAAA,KACNmV,QADM;MAEThC,UAFS,EAETA,UAFS;MAGTD,UAHS,EAGTA,UAHS;MAITL,aAAa,EAAEW,aAJN;MAKT7X,QALS,EAKTA,QALS;MAMT8W,WAAW,EAAE,IANJ;MAOTK,UAAU,EAAE/B,eAPH;MAQTkC,YAAY,EAAE,MARL;MASTF,qBAAqB,EAAEgD,sBAAsB,CAC3Cpa,QAD2C,EAE3CwZ,QAAQ,CAACnS,OAAT,IAAoBnI,KAAK,CAACmI,OAFiB,CATpC;MAaTgQ,kBAbS,EAaTA,kBAbS;MAcTO,QAAQ,EAAE,IAAID,GAAJ,CAAQzY,KAAK,CAAC0Y,QAAd;KAdZ;IAiBA,IAAII,2BAAJ,EAAiC,CAAjC,KAEO,IAAIH,aAAa,KAAK1Z,MAAa,CAACoB,GAApC,EAAyC,CAAzC,KAEA,IAAIsY,aAAa,KAAK1Z,MAAa,CAAC+C,IAApC,EAA0C;MAC/CqO,IAAI,CAAC9O,OAAL,CAAaQ,IAAb,CAAkBjB,QAAlB,EAA4BA,QAAQ,CAACd,KAArC;IACD,CAFM,MAEA,IAAI2Y,aAAa,KAAK1Z,MAAa,CAACoD,OAApC,EAA6C;MAClDgO,IAAI,CAAC9O,OAAL,CAAaa,OAAb,CAAqBtB,QAArB,EAA+BA,QAAQ,CAACd,KAAxC;IACD,CA/EyE;;IAkF1E2Y,aAAa,GAAG1Z,MAAa,CAACoB,GAA9B;IACAuY,yBAAyB,GAAG,KAA5B;IACAE,2BAA2B,GAAG,KAA9B;IACAC,sBAAsB,GAAG,KAAzB;IACAC,uBAAuB,GAAG,EAA1B;IACAC,qBAAqB,GAAG,EAAxB;EACD,CA9T0C;EAiU3C;EAAA,SACekC,QAAfA,CAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAC,SAAA,CAAA7Q,KAAA,OAAAyG,SAAA;EAAA,EAlU2C;EA0Z3C;EACA;EAAA,SAAAoK,UAAA;IAAAA,SAAA,GAAAxH,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAzFA,SAAAuH,SACE3a,EADF,EAEE4a,IAFF;MAAA,IAAAC,sBAAA,EAAA9Z,IAAA,EAAA+Z,UAAA,EAAArV,KAAA,EAAAyT,eAAA,EAAA7X,YAAA,EAAA0Z,WAAA,EAAA3D,aAAA,EAAAG,kBAAA,EAAAyB,UAAA;MAAA,OAAA7F,mBAAA,GAAAI,IAAA,UAAAyH,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAvH,IAAA,GAAAuH,SAAA,CAAAtH,IAAA;UAAA;YAAA,MAIM,OAAO3T,EAAP,KAAc,QAAlB;cAAAib,SAAA,CAAAtH,IAAA;cAAA;YAAA;YACElE,IAAI,CAAC9O,OAAL,CAAae,EAAb,CAAgB1B,EAAhB;YAAA,OAAAib,SAAA,CAAAnH,MAAA;UAAA;YAAA+G,sBAAA,GAIgCK,wBAAwB,CAAClb,EAAD,EAAK4a,IAAL,CAA1D,EAAM7Z,IAAF,GAAA8Z,sBAAA,CAAE9Z,IAAF,EAAQ+Z,UAAR,GAAAD,sBAAA,CAAQC,UAAR,EAAoBrV,KAAA,GAAAoV,sBAAA,CAAApV,KAAA;YAEpByT,eAAe,GAAG9Z,KAAK,CAACc,QAA5B;YACImB,YAAY,GAAGlB,cAAc,CAACf,KAAK,CAACc,QAAP,EAAiBa,IAAjB,EAAuB6Z,IAAI,IAAIA,IAAI,CAACxb,KAApC,CAAjC,EAV4B;YAa5B;YACA;YACA;YACA;YACAiC,YAAY,GAAAkD,QAAA,KACPlD,YADO,EAEPoO,IAAI,CAAC9O,OAAL,CAAaG,cAAb,CAA4BO,YAA5B,CAFO,CAAZ;YAKI0Z,WAAW,GAAGH,IAAI,IAAIA,IAAI,CAACpZ,OAAL,IAAgB,IAAxB,GAA+BoZ,IAAI,CAACpZ,OAApC,GAA8CnC,SAAhE;YAEI+X,aAAa,GAAG/Y,MAAa,CAAC+C,IAAlC;YAEA,IAAI2Z,WAAW,KAAK,IAApB,EAA0B;cACxB3D,aAAa,GAAG/Y,MAAa,CAACoD,OAA9B;YACD,CAFD,MAEO,IAAIsZ,WAAW,KAAK,KAApB,EAA2B,CAA3B,KAEA,IACLD,UAAU,IAAI,IAAd,IACAf,gBAAgB,CAACe,UAAU,CAACvF,UAAZ,CADhB,IAEAuF,UAAU,CAACtF,UAAX,KAA0BpW,KAAK,CAACc,QAAN,CAAeE,QAAf,GAA0BhB,KAAK,CAACc,QAAN,CAAee,MAH9D,EAIL;cACA;cACA;cACA;cACA;cACAmW,aAAa,GAAG/Y,MAAa,CAACoD,OAA9B;YACD;YAEG8V,kBAAkB,GACpBqD,IAAI,IAAI,oBAAwB,IAAAA,IAAhC,GACIA,IAAI,CAACrD,kBAAL,KAA4B,IADhC,GAEIlY,SAHN;YAKI2Z,UAAU,GAAGC,qBAAqB,CAAC;cACrCC,eADqC,EACrCA,eADqC;cAErC7X,YAFqC,EAErCA,YAFqC;cAGrC+V,aAAA,EAAAA;YAHqC,CAAD,CAAtC;YAAA,KAKI4B,UAAJ;cAAAiC,SAAA,CAAAtH,IAAA;cAAA;YAAA;YACE;YACAwF,aAAa,CAACH,UAAD,EAAa;cACxB5Z,KAAK,EAAE,SADiB;cAExBc,QAAQ,EAAEmB,YAFc;cAGxBwU,OAAO,WAAAA,QAAA;gBACLsD,aAAa,CAACH,UAAD,EAAc;kBACzB5Z,KAAK,EAAE,YADkB;kBAEzByW,OAAO,EAAExW,SAFgB;kBAGzByW,KAAK,EAAEzW,SAHkB;kBAIzBa,QAAQ,EAAEmB;iBAJC,CAAb,CADK;;gBAQLkZ,QAAQ,CAACva,EAAD,EAAK4a,IAAL,CAAR;eAXsB;cAaxB9E,KAAK,WAAAA,MAAA;gBACHsD,aAAa,CAACJ,UAAD,CAAb;gBACAK,WAAW,CAAC;kBAAEvB,QAAQ,EAAE,IAAID,GAAJ,CAAQzY,KAAK,CAAC0Y,QAAd;gBAAZ,CAAD,CAAX;cACD;YAhBuB,CAAb,CAAb;YAAA,OAAAmD,SAAA,CAAAnH,MAAA;UAAA;YAAAmH,SAAA,CAAAtH,IAAA;YAAA,OAqBW2F,eAAe,CAAClC,aAAD,EAAgB/V,YAAhB,EAA8B;cACxDyZ,UADwD,EACxDA,UADwD;cAExD;cACA;cACAK,YAAY,EAAE1V,KAJ0C;cAKxD8R,kBALwD,EAKxDA,kBALwD;cAMxD/V,OAAO,EAAEoZ,IAAI,IAAIA,IAAI,CAACpZ;YANkC,CAA9B,CAA5B;UAAA;YAAA,OAAAyZ,SAAA,CAAAnH,MAAA,WAAAmH,SAAA,CAAApH,IAAA;UAAA;UAAA;YAAA,OAAAoH,SAAA,CAAAlH,IAAA;QAAA;MAAA,GAAA4G,QAAA;IAAA,CA/YyC;IAAA,OAAAD,SAAA,CAAA7Q,KAAA,OAAAyG,SAAA;EAAA;EA4Z3C,SAAS8K,UAATA,CAAA,EAAmB;IACjBC,oBAAoB;IACpBhC,WAAW,CAAC;MAAE7B,YAAY,EAAE;KAAjB,CAAX,CAFiB;IAKjB;;IACA,IAAIpY,KAAK,CAACiY,UAAN,CAAiBjY,KAAjB,KAA2B,YAA/B,EAA6C;MAC3C;IACD,CARgB;IAWjB;IACA;;IACA,IAAIA,KAAK,CAACiY,UAAN,CAAiBjY,KAAjB,KAA2B,MAA/B,EAAuC;MACrCka,eAAe,CAACla,KAAK,CAACgY,aAAP,EAAsBhY,KAAK,CAACc,QAA5B,EAAsC;QACnDob,8BAA8B,EAAE;MADmB,CAAtC,CAAf;MAGA;IACD,CAlBgB;IAqBjB;IACA;;IACAhC,eAAe,CACbvB,aAAa,IAAI3Y,KAAK,CAACgY,aADV,EAEbhY,KAAK,CAACiY,UAAN,CAAiBnX,QAFJ,EAGb;MAAEqb,kBAAkB,EAAEnc,KAAK,CAACiY;IAA5B,CAHa,CAAf;EAKD,CAxb0C;EA2b3C;EACA;EAAA,SACeiC,eAAfA,CAAAkC,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAAC,gBAAA,CAAA9R,KAAA,OAAAyG,SAAA;EAAA,EA7b2C;EAukB3C;EAAA,SAAAqL,iBAAA;IAAAA,gBAAA,GAAAzI,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CA1IA,SAAAwI,SACExE,aADF,EAEElX,QAFF,EAGE0a,IAHF;MAAA,IAAAiB,iBAAA,EAAAtU,OAAA,EAAAiN,MAAA,EAAAsH,sBAAA,EAAAC,eAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,iBAAA,EAAAf,YAAA,EAAAgB,YAAA,EAAA9E,UAAA,EAAA+E,oBAAA,EAAAC,cAAA,EAAA5E,UAAA,EAAAE,MAAA;MAAA,OAAAxE,mBAAA,GAAAI,IAAA,UAAA+I,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA7I,IAAA,GAAA6I,SAAA,CAAA5I,IAAA;UAAA;YAYE;YACA;YACA;YACAsE,2BAA2B,IAAIA,2BAA2B,CAACnF,KAA5B,EAA/B;YACAmF,2BAA2B,GAAG,IAA9B;YACAF,aAAa,GAAGX,aAAhB;YACAc,2BAA2B,GACzB,CAAC0C,IAAI,IAAIA,IAAI,CAACU,8BAAd,MAAkD,IADpD,CARC;YAYD;;YACAkB,kBAAkB,CAACpd,KAAK,CAACc,QAAP,EAAiBd,KAAK,CAACmI,OAAvB,CAAlB;YACAyQ,yBAAyB,GAAG,CAAC4C,IAAI,IAAIA,IAAI,CAACrD,kBAAd,MAAsC,IAAlE;YAEIsE,iBAAiB,GAAGjB,IAAI,IAAIA,IAAI,CAACW,kBAArC;YACIhU,OAAO,GAAGP,WAAW,CAACoP,UAAD,EAAalW,QAAb,EAAuBuP,IAAI,CAACvI,QAA5B,CAAzB,EAjBC;YAAA,IAoBIK,OAAL;cAAAgV,SAAA,CAAA5I,IAAA;cAAA;YAAA;YACMlO,MAAK,GAAGoR,sBAAsB,CAAC,GAAD,EAAM;cAAEzW,QAAQ,EAAEF,QAAQ,CAACE;YAArB,CAAN,CAAlC;YAAA0b,sBAAA,GAEE/E,sBAAsB,CAACX,UAAD,CADxB,EAAe2F,eAAX,GAAAD,sBAAA,CAAEvU,OAAO,EAAmBvB,MAAA,GAAA8V,sBAAA,CAAA9V,KAAA,EAFpB;YAKZyW,qBAAqB;YACrB9C,kBAAkB,CAACzZ,QAAD,EAAW;cAC3BqH,OAAO,EAAEwU,eADkB;cAE3BtE,UAAU,EAAE,EAFe;cAG3BE,MAAM,EAAAhG,eAAA,KACH3L,MAAK,CAACS,EAAP,EAAYhB,MAAA;YAJa,CAAX,CAAlB;YAAA,OAAA8W,SAAA,CAAAzI,MAAA;UAAA;YAAA,MAcA4I,gBAAgB,CAACtd,KAAK,CAACc,QAAP,EAAiBA,QAAjB,CAAhB,IACA,EAAE0a,IAAI,IAAIA,IAAI,CAACE,UAAb,IAA2Bf,gBAAgB,CAACa,IAAI,CAACE,UAAL,CAAgBvF,UAAjB,CAA7C,CAFF;cAAAgH,SAAA,CAAA5I,IAAA;cAAA;YAAA;YAIEgG,kBAAkB,CAACzZ,QAAD,EAAW;cAAEqH,OAAA,EAAAA;YAAF,CAAX,CAAlB;YAAA,OAAAgV,SAAA,CAAAzI,MAAA;UAAA;YA3CD;;YAgDDmE,2BAA2B,GAAG,IAAI5G,eAAJ,EAA9B;YACI4K,OAAO,GAAGU,uBAAuB,CACnClN,IAAI,CAAC9O,OAD8B,EAEnCT,QAFmC,EAGnC+X,2BAA2B,CAACzG,MAHO,EAInCoJ,IAAI,IAAIA,IAAI,CAACE,UAJsB,CAArC;YAAA,MASIF,IAAI,IAAIA,IAAI,CAACO,YAAjB;cAAAoB,SAAA,CAAA5I,IAAA;cAAA;YAAA;YACE;YACA;YACA;YACA;YACAwH,YAAY,GAAAxJ,eAAA,KACTiL,mBAAmB,CAACrV,OAAD,CAAnB,CAA6BvB,KAA7B,CAAmCS,EAApC,EAAyCmU,IAAI,CAACO,YAAA,CADhD;YAAAoB,SAAA,CAAA5I,IAAA;YAAA;UAAA;YAAA,MAIAiH,IAAI,IACJA,IAAI,CAACE,UADL,IAEAf,gBAAgB,CAACa,IAAI,CAACE,UAAL,CAAgBvF,UAAjB,CAHX;cAAAgH,SAAA,CAAA5I,IAAA;cAAA;YAAA;YAAA4I,SAAA,CAAA5I,IAAA;YAAA,OAMoBkJ,YAAY,CACnCZ,OADmC,EAEnC/b,QAFmC,EAGnC0a,IAAI,CAACE,UAH8B,EAInCvT,OAJmC,EAKnC;cAAE/F,OAAO,EAAEoZ,IAAI,CAACpZ;YAAhB,CALmC,CAArC;UAAA;YAAI2a,YAAY,GAAAI,SAAA,CAAA1I,IAAA;YAAA,KAQZsI,YAAY,CAACE,cAAjB;cAAAE,SAAA,CAAA5I,IAAA;cAAA;YAAA;YAAA,OAAA4I,SAAA,CAAAzI,MAAA;UAAA;YAIAoI,iBAAiB,GAAGC,YAAY,CAACD,iBAAjC;YACAf,YAAY,GAAGgB,YAAY,CAACW,kBAA5B;YAEIzF,UAAU,GAAA9S,QAAA;cACZnF,KAAK,EAAE,SADK;cAEZc,QAAA,EAAAA;aACG,EAAA0a,IAAI,CAACE,UAHI,CAAd;YAKAe,iBAAiB,GAAGxE,UAApB,CAtBA;;YAyBA4E,OAAO,GAAG,IAAIc,OAAJ,CAAYd,OAAO,CAAC9Y,GAApB,EAAyB;cAAEqO,MAAM,EAAEyK,OAAO,CAACzK;YAAlB,CAAzB,CAAV;UAAA;YAAA+K,SAAA,CAAA5I,IAAA;YAAA,OAIiDqJ,aAAa,CAC9Df,OAD8D,EAE9D/b,QAF8D,EAG9DqH,OAH8D,EAI9DsU,iBAJ8D,EAK9DjB,IAAI,IAAIA,IAAI,CAACE,UALiD,EAM9DF,IAAI,IAAIA,IAAI,CAACpZ,OANiD,EAO9D0a,iBAP8D,EAQ9Df,YAR8D,CAAhE;UAAA;YAAAiB,oBAAA,GAAAG,SAAA,CAAA1I,IAAA;YAAMwI,cAAF,GAAAD,oBAAA,CAAEC,cAAF;YAAkB5E,UAAlB,GAAA2E,oBAAA,CAAkB3E,UAAlB;YAA8BE,MAAA,GAAAyE,oBAAA,CAAAzE,MAAA;YAAA,KAW9B0E,cAAJ;cAAAE,SAAA,CAAA5I,IAAA;cAAA;YAAA;YAAA,OAAA4I,SAAA,CAAAzI,MAAA;UAAA;YA9GC;YAmHD;YACA;;YACAmE,2BAA2B,GAAG,IAA9B;YAEA0B,kBAAkB,CAACzZ,QAAD,EAAAqE,QAAA;cAChBgD,OAAA,EAAAA;YADgB,GAEZ2U,iBAAiB,GAAG;cAAExE,UAAU,EAAEwE;YAAd,CAAH,GAAuC,EAF5C;cAGhBzE,UAHgB,EAGhBA,UAHgB;cAIhBE,MAAA,EAAAA;aAJF;UAAA;UAAA;YAAA,OAAA4E,SAAA,CAAAxI,IAAA;QAAA;MAAA,GAAA6H,QAAA;IAAA,CA9jByC;IAAA,OAAAD,gBAAA,CAAA9R,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAwkB5BuM,YAAfA,CAAAI,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,aAAA,CAAAzT,KAAA,OAAAyG,SAAA;EAAA,EAxkB2C;EAiqB3C;EAAA,SAAAgN,cAAA;IAAAA,aAAA,GAAApK,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAzFA,SAAAmK,SACEtB,OADF,EAEE/b,QAFF,EAGE4a,UAHF,EAIEvT,OAJF,EAKEqT,IALF;MAAA,IAAAvD,UAAA,EAAAzN,MAAA,EAAA4T,WAAA,EAAAhc,OAAA,EAAAic,aAAA;MAAA,OAAAtK,mBAAA,GAAAI,IAAA,UAAAmK,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAjK,IAAA,GAAAiK,SAAA,CAAAhK,IAAA;UAAA;YAOE0H,oBAAoB,GAFQ;YAKxBhE,UAAU,GAAA9S,QAAA;cACZnF,KAAK,EAAE,YADK;cAEZc,QAAA,EAAAA;YAFY,GAGT4a,UAHS,CAAd;YAKAzB,WAAW,CAAC;cAAEhC,UAAA,EAAAA;aAAH,CAAX,CAV4B;YAcxBmG,WAAW,GAAGI,cAAc,CAACrW,OAAD,EAAUrH,QAAV,CAAhC;YAAA,IAEKsd,WAAW,CAACxX,KAAZ,CAAkBxG,MAAvB;cAAAme,SAAA,CAAAhK,IAAA;cAAA;YAAA;YACE/J,MAAM,GAAG;cACPiU,IAAI,EAAE/X,UAAU,CAACL,KADV;cAEPA,KAAK,EAAEoR,sBAAsB,CAAC,GAAD,EAAM;gBACjCiH,MAAM,EAAE7B,OAAO,CAAC6B,MADiB;gBAEjC1d,QAAQ,EAAEF,QAAQ,CAACE,QAFc;gBAGjC2d,OAAO,EAAEP,WAAW,CAACxX,KAAZ,CAAkBS;eAHA;aAF/B;YAAAkX,SAAA,CAAAhK,IAAA;YAAA;UAAA;YAAAgK,SAAA,CAAAhK,IAAA;YAAA,OASeqK,kBAAkB,CAC/B,QAD+B,EAE/B/B,OAF+B,EAG/BuB,WAH+B,EAI/BjW,OAJ+B,EAK/B4P,MAAM,CAACjQ,QALwB,CAAjC;UAAA;YAAA0C,MAAM,GAAA+T,SAAA,CAAA9J,IAAA;YAAA,KAQFoI,OAAO,CAACzK,MAAR,CAAea,OAAnB;cAAAsL,SAAA,CAAAhK,IAAA;cAAA;YAAA;YAAA,OAAAgK,SAAA,CAAA7J,MAAA,WACS;cAAEuI,cAAc,EAAE;aAAzB;UAAA;YAAA,KAIA4B,gBAAgB,CAACrU,MAAD,CAApB;cAAA+T,SAAA,CAAAhK,IAAA;cAAA;YAAA;YAEE,IAAIiH,IAAI,IAAIA,IAAI,CAACpZ,OAAL,IAAgB,IAA5B,EAAkC;cAChCA,OAAO,GAAGoZ,IAAI,CAACpZ,OAAf;YACD,CAFD,MAEO;cACL;cACA;cACA;cACAA,OAAO,GACLoI,MAAM,CAAC1J,QAAP,KAAoBd,KAAK,CAACc,QAAN,CAAeE,QAAf,GAA0BhB,KAAK,CAACc,QAAN,CAAee,MAD/D;YAED;YAAA0c,SAAA,CAAAhK,IAAA;YAAA,OACKuK,uBAAuB,CAAC9e,KAAD,EAAQwK,MAAR,EAAgB;cAAEkR,UAAF,EAAEA,UAAF;cAActZ,OAAA,EAAAA;YAAd,CAAhB,CAA7B;UAAA;YAAA,OAAAmc,SAAA,CAAA7J,MAAA,WACO;cAAEuI,cAAc,EAAE;aAAzB;UAAA;YAAA,KAGE8B,aAAa,CAACvU,MAAD,CAAjB;cAAA+T,SAAA,CAAAhK,IAAA;cAAA;YAAA;YACE;YACA;YACI8J,aAAa,GAAGb,mBAAmB,CAACrV,OAAD,EAAUiW,WAAW,CAACxX,KAAZ,CAAkBS,EAA5B,CAAvC,EAHyB;YAMzB;YACA;YACA;YACA,IAAI,CAACmU,IAAI,IAAIA,IAAI,CAACpZ,OAAd,MAA2B,IAA/B,EAAqC;cACnCuW,aAAa,GAAG1Z,MAAa,CAAC+C,IAA9B;YACD;YAAA,OAAAuc,SAAA,CAAA7J,MAAA,WAEM;cACL;cACAoI,iBAAiB,EAAE,EAFd;cAGLY,kBAAkB,EAAAnL,eAAA,KAAK8L,aAAa,CAACzX,KAAd,CAAoBS,EAArB,EAA0BmD,MAAM,CAACnE,KAAA;aAHzD;UAAA;YAAA,KAOE2Y,gBAAgB,CAACxU,MAAD,CAApB;cAAA+T,SAAA,CAAAhK,IAAA;cAAA;YAAA;YAAA,MACQkD,sBAAsB,CAAC,GAAD,EAAM;cAAEgH,IAAI,EAAE;YAAR,CAAN,CAA5B;UAAA;YAAA,OAAAF,SAAA,CAAA7J,MAAA,WAGK;cACLoI,iBAAiB,EAAAvK,eAAA,KAAK6L,WAAW,CAACxX,KAAZ,CAAkBS,EAAnB,EAAwBmD,MAAM,CAAC4F,IAAA;aADtD;UAAA;UAAA;YAAA,OAAAmO,SAAA,CAAA5J,IAAA;QAAA;MAAA,GAAAwJ,QAAA;IAAA,CA3pByC;IAAA,OAAAD,aAAA,CAAAzT,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAkqB5B0M,aAAfA,CAAAqB,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,cAAA,CAAAhV,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAAAuO,eAAA;IAAAA,cAAA,GAAA3L,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAA0L,SACE7C,OADF,EAEE/b,QAFF,EAGEqH,OAHF,EAIEgU,kBAJF,EAKET,UALF,EAMEtZ,OANF,EAOE0a,iBAPF,EAQEf,YARF;MAAA,IAAAU,iBAAA,EAAAxE,UAAA,EAAA0H,gBAAA,EAAAC,iBAAA,EAAAC,kBAAA,EAAAC,aAAA,EAAAC,oBAAA,EAAAzH,UAAA,EAAA0H,qBAAA,EAAAC,OAAA,EAAAC,aAAA,EAAAC,cAAA,EAAA5K,QAAA,EAAA6K,kBAAA,EAAA/H,UAAA,EAAAE,MAAA,EAAA8H,kBAAA;MAAA,OAAAtM,mBAAA,GAAAI,IAAA,UAAAmM,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAjM,IAAA,GAAAiM,SAAA,CAAAhM,IAAA;UAAA;YAUE;YACIkI,iBAAiB,GAAGN,kBAAxB;YACA,IAAI,CAACM,iBAAL,EAAwB;cAClBxE,UAAU,GAAA9S,QAAA;gBACZnF,KAAK,EAAE,SADK;gBAEZc,QAFY,EAEZA,QAFY;gBAGZqV,UAAU,EAAElW,SAHA;gBAIZmW,UAAU,EAAEnW,SAJA;gBAKZoW,WAAW,EAAEpW,SALD;gBAMZqW,QAAQ,EAAErW;cANE,GAOTyb,UAPS,CAAd;cASAe,iBAAiB,GAAGxE,UAApB;YACD,CAfuB;YAkBxB;YACI0H,gBAAgB,GAAGjE,UAAU,GAC7BA,UAD6B,GAE7Be,iBAAiB,CAACtG,UAAlB,IACAsG,iBAAiB,CAACrG,UADlB,IAEAqG,iBAAiB,CAACnG,QAFlB,IAGAmG,iBAAiB,CAACpG,WAHlB,GAIA;cACEF,UAAU,EAAEsG,iBAAiB,CAACtG,UADhC;cAEEC,UAAU,EAAEqG,iBAAiB,CAACrG,UAFhC;cAGEE,QAAQ,EAAEmG,iBAAiB,CAACnG,QAH9B;cAIED,WAAW,EAAEoG,iBAAiB,CAACpG;YAJjC,CAJA,GAUApW,SAZJ;YAAA2f,iBAAA,GAc4CY,gBAAgB,CAC1DnQ,IAAI,CAAC9O,OADqD,EAE1DvB,KAF0D,EAG1DmI,OAH0D,EAI1DwX,gBAJ0D,EAK1D7e,QAL0D,EAM1DiY,sBAN0D,EAO1DC,uBAP0D,EAQ1DC,qBAR0D,EAS1D6D,iBAT0D,EAU1Df,YAV0D,EAW1DxC,gBAX0D,CAA5D,EAAAsG,kBAAA,GAAAvS,cAAA,CAAAsS,iBAAA,MAAKE,aAAD,GAAAD,kBAAA,KAAgBE,oBAAhB,GAAAF,kBAAA,KAjCoB;YAgDxB;YACA;YACAxC,qBAAqB,CAClB,UAAAsB,OAAD;cAAA,OACE,EAAExW,OAAO,IAAIA,OAAO,CAACoD,IAAR,CAAc,UAAAsM,CAAD;gBAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQS,EAAR,KAAesX,OAAnC;cAAA,EAAb,KACCmB,aAAa,IAAIA,aAAa,CAACvU,IAAd,CAAoB,UAAAsM,CAAD;gBAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQS,EAAR,KAAesX,OAAzC;cAAA,EAHD;YAAA,EAArB,CAlDwB;YAAA,MAyDpBmB,aAAa,CAAC3f,MAAd,KAAyB,CAAzB,IAA8B4f,oBAAoB,CAAC5f,MAArB,KAAgC,CAAlE;cAAAogB,SAAA,CAAAhM,IAAA;cAAA;YAAA;YACEgG,kBAAkB,CAACzZ,QAAD,EAAAqE,QAAA;cAChBgD,OADgB,EAChBA,OADgB;cAEhBkQ,UAAU,EAAE,EAFI;cAGhB;cACAE,MAAM,EAAEwD,YAAY,IAAI;YAJR,GAKZe,iBAAiB,GAAG;cAAExE,UAAU,EAAEwE;aAAjB,GAAuC,EAL5C,CAAlB;YAAA,OAAAyD,SAAA,CAAA7L,MAAA,WAOO;cAAEuI,cAAc,EAAE;aAAzB;UAAA;YAjEsB;YAqExB;YACA;YACA;;YACA,IAAI,CAACnE,2BAAL,EAAkC;cAChCiH,oBAAoB,CAAC7W,OAArB,CAA8B,UAAAuX,EAAD,EAAO;gBAClC,IAAIC,OAAO,GAAG1gB,KAAK,CAACwY,QAAN,CAAexF,GAAf,CAAmByN,EAAE,CAAC5f,GAAtB,CAAd;gBACA,IAAI8f,mBAAmB,GAA6B;kBAClD3gB,KAAK,EAAE,SAD2C;kBAElDoQ,IAAI,EAAEsQ,OAAO,IAAIA,OAAO,CAACtQ,IAFyB;kBAGlD+F,UAAU,EAAElW,SAHsC;kBAIlDmW,UAAU,EAAEnW,SAJsC;kBAKlDoW,WAAW,EAAEpW,SALqC;kBAMlDqW,QAAQ,EAAErW,SANwC;kBAOlD,2BAA6B;iBAP/B;gBASAD,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB+P,EAAE,CAAC5f,GAAtB,EAA2B8f,mBAA3B;eAXF;cAaIrI,UAAU,GAAGwE,iBAAiB,IAAI9c,KAAK,CAACsY,UAA5C;cACA2B,WAAW,CAAA9U,QAAA;gBACT8S,UAAU,EAAEwE;eACR,EAAAnE,UAAU,GACVjM,MAAM,CAACwO,IAAP,CAAYvC,UAAZ,CAAwB,CAAAnY,MAAxB,KAAmC,CAAnC,GACE;gBAAEmY,UAAU,EAAE;cAAd,CADF,GAEE;gBAAEA,UAAA,EAAAA;eAHM,GAIV,EANK,EAOLyH,oBAAoB,CAAC5f,MAArB,GAA8B,CAA9B,GACA;gBAAEqY,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;eADZ,GAEA,EATK,CAAX;YAWD;YAEDY,uBAAuB,GAAG,EAAED,kBAA5B;YACA4G,oBAAoB,CAAC7W,OAArB,CAA8B,UAAAuX,EAAD;cAAA,OAC3BvH,gBAAgB,CAACxI,GAAjB,CAAqB+P,EAAE,CAAC5f,GAAxB,EAA6BgY,2BAA7B,CADF;YAAA;YAAA0H,SAAA,CAAAhM,IAAA;YAAA,OAKQqM,8BAA8B,CAClC5gB,KAAK,CAACmI,OAD4B,EAElCA,OAFkC,EAGlC2X,aAHkC,EAIlCC,oBAJkC,EAKlClD,OALkC,CADtC;UAAA;YAAAmD,qBAAA,GAAAO,SAAA,CAAA9L,IAAA;YAAMwL,OAAF,GAAAD,qBAAA,CAAEC,OAAF;YAAWC,aAAX,GAAAF,qBAAA,CAAWE,aAAX;YAA0BC,cAAA,GAAAH,qBAAA,CAAAG,cAAA;YAAA,KAS1BtD,OAAO,CAACzK,MAAR,CAAea,OAAnB;cAAAsN,SAAA,CAAAhM,IAAA;cAAA;YAAA;YAAA,OAAAgM,SAAA,CAAA7L,MAAA,WACS;cAAEuI,cAAc,EAAE;aAAzB;UAAA;YAnHsB;YAuHxB;YACA;;YACA8C,oBAAoB,CAAC7W,OAArB,CAA8B,UAAAuX,EAAD;cAAA,OAAQvH,gBAAgB,CAAChG,MAAjB,CAAwBuN,EAAE,CAAC5f,GAA3B,CAArC;YAAA,GAzHwB;YA4HpB0U,QAAQ,GAAGsL,YAAY,CAACZ,OAAD,CAA3B;YAAA,KACI1K,QAAJ;cAAAgL,SAAA,CAAAhM,IAAA;cAAA;YAAA;YAAAgM,SAAA,CAAAhM,IAAA;YAAA,OACQuK,uBAAuB,CAAC9e,KAAD,EAAQuV,QAAR,EAAkB;cAAEnT,OAAA,EAAAA;YAAF,CAAlB,CAA7B;UAAA;YAAA,OAAAme,SAAA,CAAA7L,MAAA,WACO;cAAEuI,cAAc,EAAE;aAAzB;UAAA;YA/HsB;YAAAmD,kBAAA,GAmIKU,iBAAiB,CAC5C9gB,KAD4C,EAE5CmI,OAF4C,EAG5C2X,aAH4C,EAI5CI,aAJ4C,EAK5CnE,YAL4C,EAM5CgE,oBAN4C,EAO5CI,cAP4C,EAQ5C3G,eAR4C,CAA9C,EAAMnB,UAAF,GAAA+H,kBAAA,CAAE/H,UAAF,EAAcE,MAAA,GAAA6H,kBAAA,CAAA7H,MAAA,EAnIM;YA+IxBiB,eAAe,CAACtQ,OAAhB,CAAwB,UAAC6X,YAAD,EAAepC,OAAf,EAA0B;cAChDoC,YAAY,CAACzN,SAAb,CAAwB,UAAAL,OAAD,EAAY;gBACjC;gBACA;gBACA;gBACA,IAAIA,OAAO,IAAI8N,YAAY,CAACrX,IAA5B,EAAkC;kBAChC8P,eAAe,CAACtG,MAAhB,CAAuByL,OAAvB;gBACD;eANH;aADF;YAWAqC,sBAAsB;YAClBX,kBAAkB,GAAGY,oBAAoB,CAAC7H,uBAAD,CAA7C;YAAA,OAAAmH,SAAA,CAAA7L,MAAA,WAEAvP,QAAA;cACEkT,UADF,EACEA,UADF;cAEEE,MAAA,EAAAA;YAFF,GAGM8H,kBAAkB,IAAIN,oBAAoB,CAAC5f,MAArB,GAA8B,CAApD,GACA;cAAEqY,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;YAAZ,CADA,GAEA,EALN;UAAA;UAAA;YAAA,OAAA+H,SAAA,CAAA5L,IAAA;QAAA;MAAA,GAAA+K,QAAA;IAAA,CAOD;IAAA,OAAAD,cAAA,CAAAhV,KAAA,OAAAyG,SAAA;EAAA;EAED,SAASgQ,UAATA,CAAiCrgB,GAAjC,EAA4C;IAC1C,OAAOb,KAAK,CAACwY,QAAN,CAAexF,GAAf,CAAmBnS,GAAnB,KAA2B0V,YAAlC;EACD,CAl1B0C;;EAq1B3C,SAAS4K,KAATA,CACEtgB,GADF,EAEE8d,OAFF,EAGE9a,IAHF,EAIE2X,IAJF,EAI2B;IAEzB,IAAI1E,QAAJ,EAAc;MACZ,MAAM,IAAIvS,KAAJ,CACJ,8EACE,8EADF,GAEE,6CAHE,CAAN;IAKD;IAED,IAAI2U,gBAAgB,CAAC1R,GAAjB,CAAqB3G,GAArB,CAAJ,EAA+BugB,YAAY,CAACvgB,GAAD,CAAZ;IAE/B,IAAIsH,OAAO,GAAGP,WAAW,CAACoP,UAAD,EAAanT,IAAb,EAAmBwM,IAAI,CAACvI,QAAxB,CAAzB;IACA,IAAI,CAACK,OAAL,EAAc;MACZkZ,eAAe,CACbxgB,GADa,EAEb8d,OAFa,EAGblH,sBAAsB,CAAC,GAAD,EAAM;QAAEzW,QAAQ,EAAE6C;MAAZ,CAAN,CAHT,CAAf;MAKA;IACD;IAED,IAAAyd,qBAAA,GAA2BxF,wBAAwB,CAACjY,IAAD,EAAO2X,IAAP,EAAa,IAAb,CAAnD;MAAM7Z,IAAF,GAAA2f,qBAAA,CAAE3f,IAAF;MAAQ+Z,UAAA,GAAA4F,qBAAA,CAAA5F,UAAA;IACZ,IAAIvP,KAAK,GAAGqS,cAAc,CAACrW,OAAD,EAAUxG,IAAV,CAA1B;IAEAiX,yBAAyB,GAAG,CAAC4C,IAAI,IAAIA,IAAI,CAACrD,kBAAd,MAAsC,IAAlE;IAEA,IAAIuD,UAAU,IAAIf,gBAAgB,CAACe,UAAU,CAACvF,UAAZ,CAAlC,EAA2D;MACzDoL,mBAAmB,CAAC1gB,GAAD,EAAM8d,OAAN,EAAehd,IAAf,EAAqBwK,KAArB,EAA4BhE,OAA5B,EAAqCuT,UAArC,CAAnB;MACA;IACD,CA9BwB;IAiCzB;;IACAnC,gBAAgB,CAAC7I,GAAjB,CAAqB7P,GAArB,EAA0B;MAAE8d,OAAF,EAAEA,OAAF;MAAWhd,IAAX,EAAWA,IAAX;MAAiBwK,KAAjB,EAAiBA,KAAjB;MAAwBhE,OAAA,EAAAA;KAAlD;IACAqZ,mBAAmB,CAAC3gB,GAAD,EAAM8d,OAAN,EAAehd,IAAf,EAAqBwK,KAArB,EAA4BhE,OAA5B,EAAqCuT,UAArC,CAAnB;EACD,CA73B0C;EAg4B3C;EAAA,SACe6F,mBAAfA,CAAAE,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,oBAAA,CAAAtX,KAAA,OAAAyG,SAAA;EAAA,EAj4B2C;EAAA,SAAA6Q,qBAAA;IAAAA,oBAAA,GAAAjO,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAi4B3C,SAAAgO,SACEnhB,GADF,EAEE8d,OAFF,EAGEhd,IAHF,EAIEwK,KAJF,EAKE8V,cALF,EAMEvG,UANF;MAAA,IAAAwG,OAAA,EAAAC,eAAA,EAAAzB,OAAA,EAAA0B,eAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,cAAA,EAAAtgB,YAAA,EAAAugB,mBAAA,EAAAra,OAAA,EAAAsa,MAAA,EAAAC,WAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAA9C,aAAA,EAAAC,oBAAA,EAAA8C,sBAAA,EAAA5C,OAAA,EAAAC,aAAA,EAAAC,cAAA,EAAA5K,QAAA,EAAAuN,mBAAA,EAAAzK,UAAA,EAAAE,MAAA,EAAAwK,WAAA,EAAA1C,kBAAA;MAAA,OAAAtM,mBAAA,GAAAI,IAAA,UAAA6O,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAA3O,IAAA,GAAA2O,SAAA,CAAA1O,IAAA;UAAA;YAQE0H,oBAAoB;YACpB1C,gBAAgB,CAACrG,MAAjB,CAAwBrS,GAAxB;YAAA,IAEKsL,KAAK,CAACvF,KAAN,CAAYxG,MAAjB;cAAA6iB,SAAA,CAAA1O,IAAA;cAAA;YAAA;YACMlO,OAAK,GAAGoR,sBAAsB,CAAC,GAAD,EAAM;cACtCiH,MAAM,EAAEhD,UAAU,CAACvF,UADmB;cAEtCnV,QAAQ,EAAEW,IAF4B;cAGtCgd,OAAO,EAAEA;YAH6B,CAAN,CAAlC;YAKA0C,eAAe,CAACxgB,GAAD,EAAM8d,OAAN,EAAetY,OAAf,CAAf;YAAA,OAAA4c,SAAA,CAAAvO,MAAA;UAAA;YAXoB;YAgBlByN,eAAe,GAAGniB,KAAK,CAACwY,QAAN,CAAexF,GAAf,CAAmBnS,GAAnB,CAAtB;YACI6f,OAAO,GAAAvb,QAAA;cACTnF,KAAK,EAAE;YADE,GAEN0b,UAFM;cAGTtL,IAAI,EAAE+R,eAAe,IAAIA,eAAe,CAAC/R,IAHhC;cAIT,2BAA6B;aAJ/B;YAMApQ,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB7P,GAAnB,EAAwB6f,OAAxB;YACAzG,WAAW,CAAC;cAAEzB,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;aAAb,CAAX,CAxBsB;YA2BlB4J,eAAe,GAAG,IAAInQ,eAAJ,EAAtB;YACIoQ,YAAY,GAAG9E,uBAAuB,CACxClN,IAAI,CAAC9O,OADmC,EAExCI,IAFwC,EAGxCygB,eAAe,CAAChQ,MAHwB,EAIxCsJ,UAJwC,CAA1C;YAMAxC,gBAAgB,CAACxI,GAAjB,CAAqB7P,GAArB,EAA0BuhB,eAA1B;YAAAa,SAAA,CAAA1O,IAAA;YAAA,OAEyBqK,kBAAkB,CACzC,QADyC,EAEzCyD,YAFyC,EAGzClW,KAHyC,EAIzC8V,cAJyC,EAKzClK,MAAM,CAACjQ,QALkC,CAA3C;UAAA;YAAIwa,YAAY,GAAAW,SAAA,CAAAxO,IAAA;YAAA,KAQZ4N,YAAY,CAACjQ,MAAb,CAAoBa,OAAxB;cAAAgQ,SAAA,CAAA1O,IAAA;cAAA;YAAA;YACE;YACA;YACA,IAAI2E,gBAAgB,CAAClG,GAAjB,CAAqBnS,GAArB,MAA8BuhB,eAAlC,EAAmD;cACjDlJ,gBAAgB,CAAChG,MAAjB,CAAwBrS,GAAxB;YACD;YAAA,OAAAoiB,SAAA,CAAAvO,MAAA;UAAA;YAAA,KAICmK,gBAAgB,CAACyD,YAAD,CAApB;cAAAW,SAAA,CAAA1O,IAAA;cAAA;YAAA;YACE2E,gBAAgB,CAAChG,MAAjB,CAAwBrS,GAAxB;YACAyY,gBAAgB,CAAC7R,GAAjB,CAAqB5G,GAArB;YACI0hB,cAAc,GAAApd,QAAA;cAChBnF,KAAK,EAAE;YADS,GAEb0b,UAFa;cAGhBtL,IAAI,EAAEnQ,SAHU;cAIhB,2BAA6B;aAJ/B;YAMAD,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB7P,GAAnB,EAAwB0hB,cAAxB;YACAtI,WAAW,CAAC;cAAEzB,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;YAAZ,CAAD,CAAX;YAAA,OAAAyK,SAAA,CAAAvO,MAAA,WAEOoK,uBAAuB,CAAC9e,KAAD,EAAQsiB,YAAR,EAAsB;cAClDY,qBAAqB,EAAE;YAD2B,CAAtB,CAA9B;UAAA;YAAA,KAMEnE,aAAa,CAACuD,YAAD,CAAjB;cAAAW,SAAA,CAAA1O,IAAA;cAAA;YAAA;YACE8M,eAAe,CAACxgB,GAAD,EAAM8d,OAAN,EAAe2D,YAAY,CAACjc,KAA5B,CAAf;YAAA,OAAA4c,SAAA,CAAAvO,MAAA;UAAA;YAAA,KAIEsK,gBAAgB,CAACsD,YAAD,CAApB;cAAAW,SAAA,CAAA1O,IAAA;cAAA;YAAA;YAAA,MACQkD,sBAAsB,CAAC,GAAD,EAAM;cAAEgH,IAAI,EAAE;YAAR,CAAN,CAA5B;UAAA;YA7EoB;YAiFtB;YACIxc,YAAY,GAAGjC,KAAK,CAACiY,UAAN,CAAiBnX,QAAjB,IAA6Bd,KAAK,CAACc,QAAtD;YACI0hB,mBAAmB,GAAGjF,uBAAuB,CAC/ClN,IAAI,CAAC9O,OAD0C,EAG/CU,YAH+C,EAI/CmgB,eAAe,CAAChQ,MAJ+B,CAAjD;YAMIjK,OAAO,GACTnI,KAAK,CAACiY,UAAN,CAAiBjY,KAAjB,KAA2B,MAA3B,GACI4H,WAAW,CAACoP,UAAD,EAAahX,KAAK,CAACiY,UAAN,CAAiBnX,QAA9B,EAAwCuP,IAAI,CAACvI,QAA7C,CADf,GAEI9H,KAAK,CAACmI,OAHZ;YAKA/D,SAAS,CAAC+D,OAAD,EAAU,8CAAV,CAAT;YAEIsa,MAAM,GAAG,EAAEtJ,kBAAf;YACAE,cAAc,CAAC3I,GAAf,CAAmB7P,GAAnB,EAAwB4hB,MAAxB;YAEIC,WAAW,GAAAvd,QAAA;cACbnF,KAAK,EAAE,SADM;cAEboQ,IAAI,EAAEkS,YAAY,CAAClS;YAFN,GAGVsL,UAHU;cAIb,2BAA6B;aAJ/B;YAMA1b,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB7P,GAAnB,EAAwB6hB,WAAxB;YAAAC,kBAAA,GAE4CnC,gBAAgB,CAC1DnQ,IAAI,CAAC9O,OADqD,EAE1DvB,KAF0D,EAG1DmI,OAH0D,EAI1DuT,UAJ0D,EAK1DzZ,YAL0D,EAM1D8W,sBAN0D,EAO1DC,uBAP0D,EAQ1DC,qBAR0D,EAAA1G,eAAA,KASvDpG,KAAK,CAACvF,KAAN,CAAYS,EAAb,EAAkBib,YAAY,CAAClS,IAAA,GACjCnQ,SAV0D;YAAA;YAW1DsZ,gBAX0D,CAA5D,EAAAqJ,kBAAA,GAAAtV,cAAA,CAAAqV,kBAAA,MAAK7C,aAAD,GAAA8C,kBAAA,KAAgB7C,oBAAhB,GAAA6C,kBAAA,KA3GkB;YA0HtB;YACA;YACA7C,oBAAoB,CACjBvU,MADH,CACW,UAAAiV,EAAD;cAAA,OAAQA,EAAE,CAAC5f,GAAH,KAAWA,GAD7B;YAAA,GAEGqI,OAFH,CAEY,UAAAuX,EAAD,EAAO;cACd,IAAI0C,QAAQ,GAAG1C,EAAE,CAAC5f,GAAlB;cACA,IAAIshB,eAAe,GAAGniB,KAAK,CAACwY,QAAN,CAAexF,GAAf,CAAmBmQ,QAAnB,CAAtB;cACA,IAAIxC,mBAAmB,GAA6B;gBAClD3gB,KAAK,EAAE,SAD2C;gBAElDoQ,IAAI,EAAE+R,eAAe,IAAIA,eAAe,CAAC/R,IAFS;gBAGlD+F,UAAU,EAAElW,SAHsC;gBAIlDmW,UAAU,EAAEnW,SAJsC;gBAKlDoW,WAAW,EAAEpW,SALqC;gBAMlDqW,QAAQ,EAAErW,SANwC;gBAOlD,2BAA6B;eAP/B;cASAD,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmByS,QAAnB,EAA6BxC,mBAA7B;cACAzH,gBAAgB,CAACxI,GAAjB,CAAqByS,QAArB,EAA+Bf,eAA/B;aAfJ;YAkBAnI,WAAW,CAAC;cAAEzB,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;YAAZ,CAAD,CAAX;YAAAyK,SAAA,CAAA1O,IAAA;YAAA,OAGQqM,8BAA8B,CAClC5gB,KAAK,CAACmI,OAD4B,EAElCA,OAFkC,EAGlC2X,aAHkC,EAIlCC,oBAJkC,EAKlCyC,mBALkC,CADtC;UAAA;YAAAK,sBAAA,GAAAI,SAAA,CAAAxO,IAAA;YAAMwL,OAAF,GAAA4C,sBAAA,CAAE5C,OAAF;YAAWC,aAAX,GAAA2C,sBAAA,CAAW3C,aAAX;YAA0BC,cAAA,GAAA0C,sBAAA,CAAA1C,cAAA;YAAA,KAS1BiC,eAAe,CAAChQ,MAAhB,CAAuBa,OAA3B;cAAAgQ,SAAA,CAAA1O,IAAA;cAAA;YAAA;YAAA,OAAA0O,SAAA,CAAAvO,MAAA;UAAA;YAIA2E,cAAc,CAACnG,MAAf,CAAsBrS,GAAtB;YACAqY,gBAAgB,CAAChG,MAAjB,CAAwBrS,GAAxB;YACAkf,oBAAoB,CAAC7W,OAArB,CAA8B,UAAA6I,CAAD;cAAA,OAAOmH,gBAAgB,CAAChG,MAAjB,CAAwBnB,CAAC,CAAClR,GAA1B,CAApC;YAAA;YAEI0U,QAAQ,GAAGsL,YAAY,CAACZ,OAAD,CAA3B;YAAA,KACI1K,QAAJ;cAAA0N,SAAA,CAAA1O,IAAA;cAAA;YAAA;YAAA,OAAA0O,SAAA,CAAAvO,MAAA,WACSoK,uBAAuB,CAAC9e,KAAD,EAAQuV,QAAR,CAA9B;UAAA;YAnKoB;YAAAuN,mBAAA,GAuKOhC,iBAAiB,CAC5C9gB,KAD4C,EAE5CA,KAAK,CAACmI,OAFsC,EAG5C2X,aAH4C,EAI5CI,aAJ4C,EAK5CjgB,SAL4C,EAM5C8f,oBAN4C,EAO5CI,cAP4C,EAQ5C3G,eAR4C,CAA9C,EAAMnB,UAAF,GAAAyK,mBAAA,CAAEzK,UAAF,EAAcE,MAAA,GAAAuK,mBAAA,CAAAvK,MAAA;YAWdwK,WAAW,GAA0B;cACvC/iB,KAAK,EAAE,MADgC;cAEvCoQ,IAAI,EAAEkS,YAAY,CAAClS,IAFoB;cAGvC+F,UAAU,EAAElW,SAH2B;cAIvCmW,UAAU,EAAEnW,SAJ2B;cAKvCoW,WAAW,EAAEpW,SAL0B;cAMvCqW,QAAQ,EAAErW,SAN6B;cAOvC,2BAA6B;aAP/B;YASAD,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB7P,GAAnB,EAAwBkiB,WAAxB;YAEI1C,kBAAkB,GAAGY,oBAAoB,CAACwB,MAAD,CAA7C,EA7LsB;YAgMtB;YACA;YACA,IACEziB,KAAK,CAACiY,UAAN,CAAiBjY,KAAjB,KAA2B,SAA3B,IACAyiB,MAAM,GAAGrJ,uBAFX,EAGE;cACAhV,SAAS,CAACuU,aAAD,EAAgB,yBAAhB,CAAT;cACAE,2BAA2B,IAAIA,2BAA2B,CAACnF,KAA5B,EAA/B;cAEA6G,kBAAkB,CAACva,KAAK,CAACiY,UAAN,CAAiBnX,QAAlB,EAA4B;gBAC5CqH,OAD4C,EAC5CA,OAD4C;gBAE5CkQ,UAF4C,EAE5CA,UAF4C;gBAG5CE,MAH4C,EAG5CA,MAH4C;gBAI5CC,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;cAJkC,CAA5B,CAAlB;YAMD,CAbD,MAaO;cACL;cACA;cACA;cACAyB,WAAW,CAAA9U,QAAA;gBACToT,MADS,EACTA,MADS;gBAETF,UAAU,EAAEyC,eAAe,CACzB9a,KAAK,CAACqY,UADmB,EAEzBA,UAFyB,EAGzBlQ,OAHyB,EAIzBoQ,MAJyB;cAFlB,GAQL8H,kBAAkB,GAAG;gBAAE7H,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;eAAf,GAA2C,EARxD,CAAX;cAUAO,sBAAsB,GAAG,KAAzB;YACD;UAAA;UAAA;YAAA,OAAAkK,SAAA,CAAAtO,IAAA;QAAA;MAAA,GAAAqN,QAAA;IAAA,CArmCwC;IAAA,OAAAD,oBAAA,CAAAtX,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAymC5BsQ,mBAAfA,CAAA4B,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,oBAAA,CAAAjZ,KAAA,OAAAyG,SAAA;EAAA;EAiGA;;;;;;;;;;;;;;;;;;AAkBG;EAlBH,SAAAwS,qBAAA;IAAAA,oBAAA,GAAA5P,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAjGA,SAAA2P,SACE9iB,GADF,EAEE8d,OAFF,EAGEhd,IAHF,EAIEwK,KAJF,EAKEhE,OALF,EAMEuT,UANF;MAAA,IAAAyG,eAAA,EAAAI,cAAA,EAAAH,eAAA,EAAAC,YAAA,EAAA7X,MAAA,EAAA6T,aAAA,EAAA0E,WAAA;MAAA,OAAAhP,mBAAA,GAAAI,IAAA,UAAAyP,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAvP,IAAA,GAAAuP,SAAA,CAAAtP,IAAA;UAAA;YAQM4N,eAAe,GAAGniB,KAAK,CAACwY,QAAN,CAAexF,GAAf,CAAmBnS,GAAnB,CAAtB,EAFuB;YAInB0hB,cAAc,GAAApd,QAAA;cAChBnF,KAAK,EAAE,SADS;cAEhBmW,UAAU,EAAElW,SAFI;cAGhBmW,UAAU,EAAEnW,SAHI;cAIhBoW,WAAW,EAAEpW,SAJG;cAKhBqW,QAAQ,EAAErW;YALM,GAMbyb,UANa;cAOhBtL,IAAI,EAAE+R,eAAe,IAAIA,eAAe,CAAC/R,IAPzB;cAQhB,2BAA6B;aAR/B;YAUApQ,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB7P,GAAnB,EAAwB0hB,cAAxB;YACAtI,WAAW,CAAC;cAAEzB,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;aAAb,CAAX,CAfuB;YAkBnB4J,eAAe,GAAG,IAAInQ,eAAJ,EAAtB;YACIoQ,YAAY,GAAG9E,uBAAuB,CACxClN,IAAI,CAAC9O,OADmC,EAExCI,IAFwC,EAGxCygB,eAAe,CAAChQ,MAHwB,CAA1C;YAKA8G,gBAAgB,CAACxI,GAAjB,CAAqB7P,GAArB,EAA0BuhB,eAA1B;YAAAyB,SAAA,CAAAtP,IAAA;YAAA,OAC+BqK,kBAAkB,CAC/C,QAD+C,EAE/CyD,YAF+C,EAG/ClW,KAH+C,EAI/ChE,OAJ+C,EAK/C4P,MAAM,CAACjQ,QALwC,CAAjD;UAAA;YAAI0C,MAAM,GAAAqZ,SAAA,CAAApP,IAAA;YAAA,KAYNuK,gBAAgB,CAACxU,MAAD,CAApB;cAAAqZ,SAAA,CAAAtP,IAAA;cAAA;YAAA;YAAAsP,SAAA,CAAAtP,IAAA;YAAA,OAEWuP,mBAAmB,CAACtZ,MAAD,EAAS6X,YAAY,CAACjQ,MAAtB,EAA8B,IAA9B,CAA1B;UAAA;YAAAyR,SAAA,CAAAE,EAAA,GAAAF,SAAA,CAAApP,IAAA;YAAA,IAAAoP,SAAA,CAAAE,EAAA;cAAAF,SAAA,CAAAtP,IAAA;cAAA;YAAA;YAAAsP,SAAA,CAAAE,EAAA,GACAvZ,MAFF;UAAA;YAAAA,MAAM,GAAAqZ,SAAA,CAAAE,EAAA;UAAA;YAtCe;YA4CvB;;YACA,IAAI7K,gBAAgB,CAAClG,GAAjB,CAAqBnS,GAArB,MAA8BuhB,eAAlC,EAAmD;cACjDlJ,gBAAgB,CAAChG,MAAjB,CAAwBrS,GAAxB;YACD;YAAA,KAEGwhB,YAAY,CAACjQ,MAAb,CAAoBa,OAAxB;cAAA4Q,SAAA,CAAAtP,IAAA;cAAA;YAAA;YAAA,OAAAsP,SAAA,CAAAnP,MAAA;UAAA;YAAA,KAKImK,gBAAgB,CAACrU,MAAD,CAApB;cAAAqZ,SAAA,CAAAtP,IAAA;cAAA;YAAA;YAAAsP,SAAA,CAAAtP,IAAA;YAAA,OACQuK,uBAAuB,CAAC9e,KAAD,EAAQwK,MAAR,CAA7B;UAAA;YAAA,OAAAqZ,SAAA,CAAAnP,MAAA;UAAA;YAAA,KAKEqK,aAAa,CAACvU,MAAD,CAAjB;cAAAqZ,SAAA,CAAAtP,IAAA;cAAA;YAAA;YACM8J,aAAa,GAAGb,mBAAmB,CAACxd,KAAK,CAACmI,OAAP,EAAgBwW,OAAhB,CAAvC;YACA3e,KAAK,CAACwY,QAAN,CAAetF,MAAf,CAAsBrS,GAAtB,EAFyB;YAIzB;YACA;;YACAoZ,WAAW,CAAC;cACVzB,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd,CADA;cAEVD,MAAM,EAAAhG,eAAA,KACH8L,aAAa,CAACzX,KAAd,CAAoBS,EAArB,EAA0BmD,MAAM,CAACnE,KAAA;YAHzB,CAAD,CAAX;YAAA,OAAAwd,SAAA,CAAAnP,MAAA;UAAA;YASFtQ,SAAS,CAAC,CAAC4a,gBAAgB,CAACxU,MAAD,CAAlB,EAA4B,iCAA5B,CAAT,CA3EuB;YA8EnBuY,WAAW,GAA0B;cACvC/iB,KAAK,EAAE,MADgC;cAEvCoQ,IAAI,EAAE5F,MAAM,CAAC4F,IAF0B;cAGvC+F,UAAU,EAAElW,SAH2B;cAIvCmW,UAAU,EAAEnW,SAJ2B;cAKvCoW,WAAW,EAAEpW,SAL0B;cAMvCqW,QAAQ,EAAErW,SAN6B;cAOvC,2BAA6B;aAP/B;YASAD,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB7P,GAAnB,EAAwBkiB,WAAxB;YACA9I,WAAW,CAAC;cAAEzB,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;YAAZ,CAAD,CAAX;UAAA;UAAA;YAAA,OAAAqL,SAAA,CAAAlP,IAAA;QAAA;MAAA,GAAAgP,QAAA;IAAA,CACD;IAAA,OAAAD,oBAAA,CAAAjZ,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAqBc4N,uBAAfA,CAAAkF,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,wBAAA,CAAA1Z,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAAAiT,yBAAA;IAAAA,wBAAA,GAAArQ,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAoQ,SACEpkB,KADF,EAEEuV,QAFF,EAWQ8O,KAAA;MAAA,IAAAC,OAAA,EAAAC,KAAA,EAAA7I,UAAA,EAAAtZ,OAAA,EAAA8gB,qBAAA,EAAAsB,gBAAA,EAAAC,SAAA,EAAAC,qBAAA,EAAAC,iBAAA,EAAAxO,UAAA,EAAAC,UAAA,EAAAC,WAAA,EAAAC,QAAA;MAAA,OAAAvC,mBAAA,GAAAI,IAAA,UAAAyQ,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAvQ,IAAA,GAAAuQ,SAAA,CAAAtQ,IAAA;UAAA;YAAAgQ,KAAA,GAAAF,KAAA,cAAF,EAAE,GAAAA,KAAA,EAPJ3I,UADF,GAAA6I,KAAA,CACE7I,UADF,EAEEtZ,OAFF,GAAAmiB,KAAA,CAEEniB,OAFF,EAGE8gB,qBAAA,GAAAqB,KAAA,CAAArB,qBAAA;YAOF,IAAI3N,QAAQ,CAACyG,UAAb,EAAyB;cACvBjD,sBAAsB,GAAG,IAAzB;YACD;YAEGyL,gBAAgB,GAAGzjB,cAAc,CACnCf,KAAK,CAACc,QAD6B,EAEnCyU,QAAQ,CAACzU,QAF0B;YAAA;YAAAqE,QAAA;cAKjCyV,WAAW,EAAE;YALoB,GAM7BsI,qBAAqB,GAAG;cAAE4B,sBAAsB,EAAE;aAA7B,GAAsC,EAN9B,CAArC;YASA1gB,SAAS,CACPogB,gBADO,EAEP,gDAFO,CAAT,CAfM;YAAA,MAsBJ7N,kBAAkB,CAAChL,IAAnB,CAAwB4J,QAAQ,CAACzU,QAAjC,KACA8V,SADA,IAEA,SAAA0N,OAAA,GAAO1hB,MAAP,qBAAO0hB,OAAA,CAAQxjB,QAAf,MAA4B,WAH9B;cAAA+jB,SAAA,CAAAtQ,IAAA;cAAA;YAAA;YAKMkQ,SAAS,GAAGpU,IAAI,CAAC9O,OAAL,CAAaC,SAAb,CAAuB+T,QAAQ,CAACzU,QAAhC,EAA0CyF,MAA1D;YAAA,MACI3D,MAAM,CAAC9B,QAAP,CAAgByF,MAAhB,KAA2Bke,SAA/B;cAAAI,SAAA,CAAAtQ,IAAA;cAAA;YAAA;YACE,IAAInS,OAAJ,EAAa;cACXQ,MAAM,CAAC9B,QAAP,CAAgBsB,OAAhB,CAAwBmT,QAAQ,CAACzU,QAAjC;YACD,CAFD,MAEO;cACL8B,MAAM,CAAC9B,QAAP,CAAgBwF,MAAhB,CAAuBiP,QAAQ,CAACzU,QAAhC;YACD;YAAA,OAAA+jB,SAAA,CAAAnQ,MAAA;UAAA;YAhCC;YAsCN;;YACAmE,2BAA2B,GAAG,IAA9B;YAEI6L,qBAAqB,GACvBtiB,OAAO,KAAK,IAAZ,GAAmBnD,MAAa,CAACoD,OAAjC,GAA2CpD,MAAa,CAAC+C,IAD3D,EAzCM;YA6CN;YAAA2iB,iBAAA,GACwD3kB,KAAK,CAACiY,UAA9D,EAAM9B,UAAF,GAAAwO,iBAAA,CAAExO,UAAF,EAAcC,UAAd,GAAAuO,iBAAA,CAAcvO,UAAd,EAA0BC,WAA1B,GAAAsO,iBAAA,CAA0BtO,WAA1B,EAAuCC,QAAA,GAAAqO,iBAAA,CAAArO,QAAA;YAC3C,IAAI,CAACoF,UAAD,IAAevF,UAAf,IAA6BC,UAA7B,IAA2CE,QAA3C,IAAuDD,WAA3D,EAAwE;cACtEqF,UAAU,GAAG;gBACXvF,UADW,EACXA,UADW;gBAEXC,UAFW,EAEXA,UAFW;gBAGXC,WAHW,EAGXA,WAHW;gBAIXC,QAAA,EAAAA;eAJF;YAMD,CAtDK;YAyDN;YACA;YAAA,MAEEL,iCAAiC,CAACzO,GAAlC,CAAsC+N,QAAQ,CAAChF,MAA/C,KACAmL,UADA,IAEAf,gBAAgB,CAACe,UAAU,CAACvF,UAAZ,CAHlB;cAAA0O,SAAA,CAAAtQ,IAAA;cAAA;YAAA;YAAAsQ,SAAA,CAAAtQ,IAAA;YAAA,OAKQ2F,eAAe,CAACwK,qBAAD,EAAwBF,gBAAxB,EAA0C;cAC7D9I,UAAU,EAAAvW,QAAA,KACLuW,UADK;gBAERtF,UAAU,EAAEb,QAAQ,CAACzU;eAHsC;cAK7D;cACAqX,kBAAkB,EAAES;YANyC,CAA1C,CAArB;UAAA;YAAAiM,SAAA,CAAAtQ,IAAA;YAAA;UAAA;YAAAsQ,SAAA,CAAAtQ,IAAA;YAAA,OAWM2F,eAAe,CAACwK,qBAAD,EAAwBF,gBAAxB,EAA0C;cAC7DrI,kBAAkB,EAAE;gBAClBnc,KAAK,EAAE,SADW;gBAElBc,QAAQ,EAAE0jB,gBAFQ;gBAGlBrO,UAAU,EAAEuF,UAAU,GAAGA,UAAU,CAACvF,UAAd,GAA2BlW,SAH/B;gBAIlBmW,UAAU,EAAEsF,UAAU,GAAGA,UAAU,CAACtF,UAAd,GAA2BnW,SAJ/B;gBAKlBoW,WAAW,EAAEqF,UAAU,GAAGA,UAAU,CAACrF,WAAd,GAA4BpW,SALjC;gBAMlBqW,QAAQ,EAAEoF,UAAU,GAAGA,UAAU,CAACpF,QAAd,GAAyBrW;eAPc;cAS7D;cACAkY,kBAAkB,EAAES;YAVyC,CAA1C,CAArB;UAAA;UAAA;YAAA,OAAAiM,SAAA,CAAAlQ,IAAA;QAAA;MAAA,GAAAyP,QAAA;IAAA,CAaH;IAAA,OAAAD,wBAAA,CAAA1Z,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAEc0P,8BAAfA,CAAAmE,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,+BAAA,CAAA3a,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAAAkU,gCAAA;IAAAA,+BAAA,GAAAtR,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAqR,SACEC,cADF,EAEEnd,OAFF,EAGE2X,aAHF,EAIEyF,cAJF,EAKE1I,OALF;MAAA,IAAAoD,OAAA,EAAAC,aAAA,EAAAC,cAAA;MAAA,OAAApM,mBAAA,GAAAI,IAAA,UAAAqR,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAnR,IAAA,GAAAmR,SAAA,CAAAlR,IAAA;UAAA;YAAAkR,SAAA,CAAAlR,IAAA;YAAA,OAUsBzC,OAAO,CAAC4T,GAAR,IAAAve,MAAA,CAAAC,kBAAA,CACf0Y,aAAa,CAAClgB,GAAd,CAAmB,UAAAuM,KAAD;cAAA,OACnByS,kBAAkB,CAAC,QAAD,EAAW/B,OAAX,EAAoB1Q,KAApB,EAA2BhE,OAA3B,EAAoC4P,MAAM,CAACjQ,QAA3C,CADjB;YAAA,EAD2B,GAAAV,kBAAA,CAI3Bme,cAAc,CAAC3lB,GAAf,CAAoB,UAAAiK,CAAD;cAAA,OACpB+U,kBAAkB,CAChB,QADgB,EAEhBrB,uBAAuB,CAAClN,IAAI,CAAC9O,OAAN,EAAesI,CAAC,CAAClI,IAAjB,EAAuBkb,OAAO,CAACzK,MAA/B,CAFP,EAGhBvI,CAAC,CAACsC,KAHc,EAIhBtC,CAAC,CAAC1B,OAJc,EAKhB4P,MAAM,CAACjQ,QALS,CADjB;YAAA,EAJ2B,GAAhC;UAAA;YAAImY,OAAO,GAAAwF,SAAA,CAAAhR,IAAA;YAcPyL,aAAa,GAAGD,OAAO,CAAC/b,KAAR,CAAc,CAAd,EAAiB4b,aAAa,CAAC3f,MAA/B,CAApB;YACIggB,cAAc,GAAGF,OAAO,CAAC/b,KAAR,CAAc4b,aAAa,CAAC3f,MAA5B,CAArB;YAAAslB,SAAA,CAAAlR,IAAA;YAAA,OAEMzC,OAAO,CAAC4T,GAAR,CAAY,CAChBC,sBAAsB,CACpBL,cADoB,EAEpBxF,aAFoB,EAGpBI,aAHoB,EAIpBrD,OAAO,CAACzK,MAJY,EAKpB,KALoB,EAMpBpS,KAAK,CAACqY,UANc,CADN,EAShBsN,sBAAsB,CACpBL,cADoB,EAEpBC,cAAc,CAAC3lB,GAAf,CAAoB,UAAAiK,CAAD;cAAA,OAAOA,CAAC,CAACsC,KAA5B;YAAA,EAFoB,EAGpBgU,cAHoB,EAIpBtD,OAAO,CAACzK,MAJY,EAKpB,IALoB,CATN,CAAZ,CAAN;UAAA;YAAA,OAAAqT,SAAA,CAAA/Q,MAAA,WAkBO;cAAEuL,OAAF,EAAEA,OAAF;cAAWC,aAAX,EAAWA,aAAX;cAA0BC,cAAA,EAAAA;aAAjC;UAAA;UAAA;YAAA,OAAAsF,SAAA,CAAA9Q,IAAA;QAAA;MAAA,GAAA0Q,QAAA;IAAA,CACD;IAAA,OAAAD,+BAAA,CAAA3a,KAAA,OAAAyG,SAAA;EAAA;EAED,SAAS+K,oBAATA,CAAA,EAA6B;IAAA,IAAA2J,qBAAA;IAC3B;IACA7M,sBAAsB,GAAG,IAAzB,CAF2B;IAK3B;;IACA,CAAA6M,qBAAA,GAAA5M,uBAAuB,EAACjX,IAAxB,CAAA0I,KAAA,CAAAmb,qBAAA,EAAAxe,kBAAA,CAAgCiW,qBAAqB,EAArD,GAN2B;;IAS3B9D,gBAAgB,CAACrQ,OAAjB,CAAyB,UAACyD,CAAD,EAAI9L,GAAJ,EAAW;MAClC,IAAIqY,gBAAgB,CAAC1R,GAAjB,CAAqB3G,GAArB,CAAJ,EAA+B;QAC7BoY,qBAAqB,CAAClX,IAAtB,CAA2BlB,GAA3B;QACAugB,YAAY,CAACvgB,GAAD,CAAZ;MACD;KAJH;EAMD;EAED,SAASwgB,eAATA,CAAyBxgB,GAAzB,EAAsC8d,OAAtC,EAAuDtY,KAAvD,EAAiE;IAC/D,IAAIgY,aAAa,GAAGb,mBAAmB,CAACxd,KAAK,CAACmI,OAAP,EAAgBwW,OAAhB,CAAvC;IACAtE,aAAa,CAACxZ,GAAD,CAAb;IACAoZ,WAAW,CAAC;MACV1B,MAAM,EAAAhG,eAAA,KACH8L,aAAa,CAACzX,KAAd,CAAoBS,EAArB,EAA0BhB,KAAA,CAFlB;MAIVmS,QAAQ,EAAE,IAAIC,GAAJ,CAAQzY,KAAK,CAACwY,QAAd;IAJA,CAAD,CAAX;EAMD;EAED,SAAS6B,aAATA,CAAuBxZ,GAAvB,EAAkC;IAChC,IAAIqY,gBAAgB,CAAC1R,GAAjB,CAAqB3G,GAArB,CAAJ,EAA+BugB,YAAY,CAACvgB,GAAD,CAAZ;IAC/B0Y,gBAAgB,CAACrG,MAAjB,CAAwBrS,GAAxB;IACAwY,cAAc,CAACnG,MAAf,CAAsBrS,GAAtB;IACAyY,gBAAgB,CAACpG,MAAjB,CAAwBrS,GAAxB;IACAb,KAAK,CAACwY,QAAN,CAAetF,MAAf,CAAsBrS,GAAtB;EACD;EAED,SAASugB,YAATA,CAAsBvgB,GAAtB,EAAiC;IAC/B,IAAImR,UAAU,GAAGkH,gBAAgB,CAAClG,GAAjB,CAAqBnS,GAArB,CAAjB;IACAuD,SAAS,CAAC4N,UAAD,EAA2C,gCAAAnR,GAA3C,CAAT;IACAmR,UAAU,CAAC0B,KAAX;IACAwF,gBAAgB,CAAChG,MAAjB,CAAwBrS,GAAxB;EACD;EAED,SAASglB,gBAATA,CAA0BhL,IAA1B,EAAwC;IAAA,IAAAiL,UAAA,GAAAxc,0BAAA,CACtBuR,IAAhB;MAAAkL,MAAA;IAAA;MAAA,KAAAD,UAAA,CAAArc,CAAA,MAAAsc,MAAA,GAAAD,UAAA,CAAAvlB,CAAA,IAAAmJ,IAAA,GAAsB;QAAA,IAAb7I,GAAT,GAAAklB,MAAA,CAAA1hB,KAAA;QACE,IAAIqc,OAAO,GAAGQ,UAAU,CAACrgB,GAAD,CAAxB;QACA,IAAIkiB,WAAW,GAA0B;UACvC/iB,KAAK,EAAE,MADgC;UAEvCoQ,IAAI,EAAEsQ,OAAO,CAACtQ,IAFyB;UAGvC+F,UAAU,EAAElW,SAH2B;UAIvCmW,UAAU,EAAEnW,SAJ2B;UAKvCoW,WAAW,EAAEpW,SAL0B;UAMvCqW,QAAQ,EAAErW,SAN6B;UAOvC,2BAA6B;SAP/B;QASAD,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB7P,GAAnB,EAAwBkiB,WAAxB;MACD;IAAA,SAAAnZ,GAAA;MAAAkc,UAAA,CAAAlhB,CAAA,CAAAgF,GAAA;IAAA;MAAAkc,UAAA,CAAAjc,CAAA;IAAA;EACF;EAED,SAASmX,sBAATA,CAAA,EAA+B;IAC7B,IAAIgF,QAAQ,GAAG,EAAf;IAAA,IAAAC,UAAA,GAAA3c,0BAAA,CACgBgQ,gBAAhB;MAAA4M,MAAA;IAAA;MAAA,KAAAD,UAAA,CAAAxc,CAAA,MAAAyc,MAAA,GAAAD,UAAA,CAAA1lB,CAAA,IAAAmJ,IAAA,GAAkC;QAAA,IAAzB7I,GAAT,GAAAqlB,MAAA,CAAA7hB,KAAA;QACE,IAAIqc,OAAO,GAAG1gB,KAAK,CAACwY,QAAN,CAAexF,GAAf,CAAmBnS,GAAnB,CAAd;QACAuD,SAAS,CAACsc,OAAD,EAA+B,uBAAA7f,GAA/B,CAAT;QACA,IAAI6f,OAAO,CAAC1gB,KAAR,KAAkB,SAAtB,EAAiC;UAC/BsZ,gBAAgB,CAACpG,MAAjB,CAAwBrS,GAAxB;UACAmlB,QAAQ,CAACjkB,IAAT,CAAclB,GAAd;QACD;MACF;IAAA,SAAA+I,GAAA;MAAAqc,UAAA,CAAArhB,CAAA,CAAAgF,GAAA;IAAA;MAAAqc,UAAA,CAAApc,CAAA;IAAA;IACDgc,gBAAgB,CAACG,QAAD,CAAhB;EACD;EAED,SAAS/E,oBAATA,CAA8BkF,QAA9B,EAA8C;IAC5C,IAAIC,UAAU,GAAG,EAAjB;IAAA,IAAAC,UAAA,GAAA/c,0BAAA,CACsB+P,cAAtB;MAAAiN,MAAA;IAAA;MAAA,KAAAD,UAAA,CAAA5c,CAAA,MAAA6c,MAAA,GAAAD,UAAA,CAAA9lB,CAAA,IAAAmJ,IAAA,GAAsC;QAAA,IAAA6c,YAAA,GAAAjZ,cAAA,CAAAgZ,MAAA,CAAAjiB,KAAA;UAA5BxD,GAAD,GAAA0lB,YAAA;UAAMlf,EAAN,GAAAkf,YAAA;QACP,IAAIlf,EAAE,GAAG8e,QAAT,EAAmB;UACjB,IAAIzF,OAAO,GAAG1gB,KAAK,CAACwY,QAAN,CAAexF,GAAf,CAAmBnS,GAAnB,CAAd;UACAuD,SAAS,CAACsc,OAAD,EAA+B,uBAAA7f,GAA/B,CAAT;UACA,IAAI6f,OAAO,CAAC1gB,KAAR,KAAkB,SAAtB,EAAiC;YAC/BohB,YAAY,CAACvgB,GAAD,CAAZ;YACAwY,cAAc,CAACnG,MAAf,CAAsBrS,GAAtB;YACAulB,UAAU,CAACrkB,IAAX,CAAgBlB,GAAhB;UACD;QACF;MACF;IAAA,SAAA+I,GAAA;MAAAyc,UAAA,CAAAzhB,CAAA,CAAAgF,GAAA;IAAA;MAAAyc,UAAA,CAAAxc,CAAA;IAAA;IACDgc,gBAAgB,CAACO,UAAD,CAAhB;IACA,OAAOA,UAAU,CAACjmB,MAAX,GAAoB,CAA3B;EACD;EAED,SAASqmB,UAATA,CAAoB3lB,GAApB,EAAiC4B,EAAjC,EAAoD;IAClD,IAAIgkB,OAAO,GAAYzmB,KAAK,CAAC0Y,QAAN,CAAe1F,GAAf,CAAmBnS,GAAnB,KAA2B2V,YAAlD;IAEA,IAAIiD,gBAAgB,CAACzG,GAAjB,CAAqBnS,GAArB,MAA8B4B,EAAlC,EAAsC;MACpCgX,gBAAgB,CAAC/I,GAAjB,CAAqB7P,GAArB,EAA0B4B,EAA1B;IACD;IAED,OAAOgkB,OAAP;EACD;EAED,SAASzM,aAATA,CAAuBnZ,GAAvB,EAAkC;IAChCb,KAAK,CAAC0Y,QAAN,CAAexF,MAAf,CAAsBrS,GAAtB;IACA4Y,gBAAgB,CAACvG,MAAjB,CAAwBrS,GAAxB;EACD,CAx9C0C;;EA29C3C,SAASkZ,aAATA,CAAuBlZ,GAAvB,EAAoC6lB,UAApC,EAAuD;IACrD,IAAID,OAAO,GAAGzmB,KAAK,CAAC0Y,QAAN,CAAe1F,GAAf,CAAmBnS,GAAnB,KAA2B2V,YAAzC,CADqD;IAIrD;;IACApS,SAAS,CACNqiB,OAAO,CAACzmB,KAAR,KAAkB,WAAlB,IAAiC0mB,UAAU,CAAC1mB,KAAX,KAAqB,SAAvD,IACGymB,OAAO,CAACzmB,KAAR,KAAkB,SAAlB,IAA+B0mB,UAAU,CAAC1mB,KAAX,KAAqB,SADvD,IAEGymB,OAAO,CAACzmB,KAAR,KAAkB,SAAlB,IAA+B0mB,UAAU,CAAC1mB,KAAX,KAAqB,YAFvD,IAGGymB,OAAO,CAACzmB,KAAR,KAAkB,SAAlB,IAA+B0mB,UAAU,CAAC1mB,KAAX,KAAqB,WAHvD,IAIGymB,OAAO,CAACzmB,KAAR,KAAkB,YAAlB,IAAkC0mB,UAAU,CAAC1mB,KAAX,KAAqB,WALnD,yCAM8BymB,OAAO,CAACzmB,KANtC,YAMkD0mB,UAAU,CAAC1mB,KAN7D,CAAT;IASAA,KAAK,CAAC0Y,QAAN,CAAehI,GAAf,CAAmB7P,GAAnB,EAAwB6lB,UAAxB;IACAzM,WAAW,CAAC;MAAEvB,QAAQ,EAAE,IAAID,GAAJ,CAAQzY,KAAK,CAAC0Y,QAAd;IAAZ,CAAD,CAAX;EACD;EAED,SAASmB,qBAATA,CAQC9E,KAAA;IAAA,IAPC+E,eAD6B,GAQ9B/E,KAAA,CAPC+E,eAD6B;MAE7B7X,YAF6B,GAQ9B8S,KAAA,CANC9S,YAF6B;MAG7B+V,aAAA,GAKDjD,KAAA,CALCiD,aAAA;IAMA,IAAIyB,gBAAgB,CAAC3E,IAAjB,KAA0B,CAA9B,EAAiC;MAC/B;IACD,CAHF;IAMC;;IACA,IAAI2E,gBAAgB,CAAC3E,IAAjB,GAAwB,CAA5B,EAA+B;MAC7BtQ,OAAO,CAAC,KAAD,EAAQ,8CAAR,CAAP;IACD;IAED,IAAI7E,OAAO,GAAG+R,KAAK,CAAC/B,IAAN,CAAW8J,gBAAgB,CAAC9Z,OAAjB,EAAX,CAAd;IACA,IAAAgnB,QAAA,GAAArZ,cAAA,CAAoC3N,OAAO,CAACA,OAAO,CAACQ,MAAR,GAAiB,CAAlB,CAA3C;MAAKyZ,UAAD,GAAA+M,QAAA;MAAaC,eAAb,GAAAD,QAAA;IACJ,IAAIF,OAAO,GAAGzmB,KAAK,CAAC0Y,QAAN,CAAe1F,GAAf,CAAmB4G,UAAnB,CAAd;IAEA,IAAI6M,OAAO,IAAIA,OAAO,CAACzmB,KAAR,KAAkB,YAAjC,EAA+C;MAC7C;MACA;MACA;IACD,CAnBF;IAsBC;;IACA,IAAI4mB,eAAe,CAAC;MAAE9M,eAAF,EAAEA,eAAF;MAAmB7X,YAAnB,EAAmBA,YAAnB;MAAiC+V,aAAA,EAAAA;IAAjC,CAAD,CAAnB,EAAuE;MACrE,OAAO4B,UAAP;IACD;EACF;EAED,SAASyD,qBAATA,CACEwJ,SADF,EAC0C;IAExC,IAAIC,iBAAiB,GAAa,EAAlC;IACAtN,eAAe,CAACtQ,OAAhB,CAAwB,UAAC6d,GAAD,EAAMpI,OAAN,EAAiB;MACvC,IAAI,CAACkI,SAAD,IAAcA,SAAS,CAAClI,OAAD,CAA3B,EAAsC;QACpC;QACA;QACA;QACAoI,GAAG,CAACvT,MAAJ;QACAsT,iBAAiB,CAAC/kB,IAAlB,CAAuB4c,OAAvB;QACAnF,eAAe,CAACtG,MAAhB,CAAuByL,OAAvB;MACD;KARH;IAUA,OAAOmI,iBAAP;EACD,CAhiD0C;EAmiD3C;;EACA,SAASE,uBAATA,CACEC,SADF,EAEEC,WAFF,EAGEC,MAHF,EAG0C;IAExCjQ,oBAAoB,GAAG+P,SAAvB;IACA7P,iBAAiB,GAAG8P,WAApB;IACA/P,uBAAuB,GAAGgQ,MAAM,IAAM,UAAArmB,QAAD;MAAA,OAAcA,QAAQ,CAACD,GAA5B;IAAA,CAAhC,CAJwC;IAOxC;IACA;;IACA,IAAI,CAACwW,qBAAD,IAA0BrX,KAAK,CAACiY,UAAN,KAAqB/B,eAAnD,EAAoE;MAClEmB,qBAAqB,GAAG,IAAxB;MACA,IAAI+P,CAAC,GAAGlM,sBAAsB,CAAClb,KAAK,CAACc,QAAP,EAAiBd,KAAK,CAACmI,OAAvB,CAA9B;MACA,IAAIif,CAAC,IAAI,IAAT,EAAe;QACbnN,WAAW,CAAC;UAAE/B,qBAAqB,EAAEkP;QAAzB,CAAD,CAAX;MACD;IACF;IAED,OAAO,YAAK;MACVlQ,oBAAoB,GAAG,IAAvB;MACAE,iBAAiB,GAAG,IAApB;MACAD,uBAAuB,GAAG,IAA1B;KAHF;EAKD;EAED,SAASiG,kBAATA,CACEtc,QADF,EAEEqH,OAFF,EAEmC;IAEjC,IAAI+O,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;MACxE,IAAIiQ,WAAW,GAAGlf,OAAO,CAACvI,GAAR,CAAa,UAAAiY,CAAD;QAAA,OAC5ByP,qBAAqB,CAACzP,CAAD,EAAI7X,KAAK,CAACqY,UAAV,CADL;MAAA,EAAlB;MAGA,IAAIxX,GAAG,GAAGsW,uBAAuB,CAACrW,QAAD,EAAWumB,WAAX,CAAvB,IAAkDvmB,QAAQ,CAACD,GAArE;MACAqW,oBAAoB,CAACrW,GAAD,CAApB,GAA4BuW,iBAAiB,EAA7C;IACD;EACF;EAED,SAAS8D,sBAATA,CACEpa,QADF,EAEEqH,OAFF,EAEmC;IAEjC,IAAI+O,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;MACxE,IAAIiQ,WAAW,GAAGlf,OAAO,CAACvI,GAAR,CAAa,UAAAiY,CAAD;QAAA,OAC5ByP,qBAAqB,CAACzP,CAAD,EAAI7X,KAAK,CAACqY,UAAV,CADL;MAAA,EAAlB;MAGA,IAAIxX,GAAG,GAAGsW,uBAAuB,CAACrW,QAAD,EAAWumB,WAAX,CAAvB,IAAkDvmB,QAAQ,CAACD,GAArE;MACA,IAAIumB,CAAC,GAAGlQ,oBAAoB,CAACrW,GAAD,CAA5B;MACA,IAAI,OAAOumB,CAAP,KAAa,QAAjB,EAA2B;QACzB,OAAOA,CAAP;MACD;IACF;IACD,OAAO,IAAP;EACD;EAEDrP,MAAM,GAAG;IACP,IAAIjQ,QAAJA,CAAA,EAAY;MACV,OAAOuI,IAAI,CAACvI,QAAZ;KAFK;IAIP,IAAI9H,KAAJA,CAAA,EAAS;MACP,OAAOA,KAAP;KALK;IAOP,IAAI8G,MAAJA,CAAA,EAAU;MACR,OAAOkQ,UAAP;KARK;IAUP2C,UAVO,EAUPA,UAVO;IAWPrG,SAXO,EAWPA,SAXO;IAYP0T,uBAZO,EAYPA,uBAZO;IAaP7L,QAbO,EAaPA,QAbO;IAcPgG,KAdO,EAcPA,KAdO;IAePnF,UAfO,EAePA,UAfO;IAgBP;IACA;IACA3a,UAAU,EAAG,SAAAA,WAAAT,EAAD;MAAA,OAAYyP,IAAI,CAAC9O,OAAL,CAAaF,UAAb,CAAwBT,EAAxB,CAlBjB;IAAA;IAmBPc,cAAc,EAAG,SAAAA,eAAAd,EAAD;MAAA,OAAYyP,IAAI,CAAC9O,OAAL,CAAaG,cAAb,CAA4Bd,EAA5B,CAnBrB;IAAA;IAoBPsgB,UApBO,EAoBPA,UApBO;IAqBP7G,aArBO,EAqBPA,aArBO;IAsBPF,OAtBO,EAsBPA,OAtBO;IAuBPqM,UAvBO,EAuBPA,UAvBO;IAwBPxM,aAxBO,EAwBPA,aAxBO;IAyBPuN,yBAAyB,EAAErO,gBAzBpB;IA0BPsO,wBAAwB,EAAEhO;GA1B5B;EA6BA,OAAOzB,MAAP;AACD;AAGD;AACA;AACA;;IAEa0P,sBAAsB,GAAGC,MAAM,CAAC,UAAD;AAE5B,SAAAC,oBACd7gB,MADc,EAEd0U,IAFc,EAIb;EAEDpX,SAAS,CACP0C,MAAM,CAAC3G,MAAP,GAAgB,CADT,EAEP,kEAFO,CAAT;EAKA,IAAI6W,UAAU,GAAGnQ,yBAAyB,CAACC,MAAD,CAA1C;EACA,IAAIgB,QAAQ,GAAG,CAAC0T,IAAI,GAAGA,IAAI,CAAC1T,QAAR,GAAmB,IAAxB,KAAiC,GAAhD;EAEA;;;;;;;;;;;;;;;;;;AAkBG;EAlBH,SAmBe8f,KAAfA,CAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,MAAA,CAAAtd,KAAA,OAAAyG,SAAA;EAAA;EA2DA;;;;;;;;;;;;;;;;;;;AAmBG;EAnBH,SAAA6W,OAAA;IAAAA,MAAA,GAAAjU,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CA3DA,SAAAgU,UACEnL,OADF,EAEuDoL,MAAA;MAAA,IAAAC,KAAA,EAAAC,cAAA,EAAApkB,GAAA,EAAA2a,MAAA,EAAA5d,QAAA,EAAAqH,OAAA,EAAA9B,KAAA,EAAA+hB,sBAAA,EAAAC,uBAAA,EAAAzhB,KAAA,EAAA0hB,OAAA,EAAAC,sBAAA,EAAA5L,eAAA,EAAA6L,OAAA,EAAAhe,MAAA;MAAA,OAAAuJ,mBAAA,GAAAI,IAAA,UAAAsU,WAAAC,UAAA;QAAA,kBAAAA,UAAA,CAAApU,IAAA,GAAAoU,UAAA,CAAAnU,IAAA;UAAA;YAAA2T,KAAA,GAAAD,MAAA,cAAF,EAAE,GAAAA,MAAA,EAAnDE,cAAA,GAAAD,KAAA,CAAAC,cAAA;YAEEpkB,GAAG,GAAG,IAAItC,GAAJ,CAAQob,OAAO,CAAC9Y,GAAhB,CAAV;YACI2a,MAAM,GAAG7B,OAAO,CAAC6B,MAAR,CAAexQ,WAAf,EAAb;YACIpN,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKO,UAAU,CAACyC,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B;YACIoE,OAAO,GAAGP,WAAW,CAACoP,UAAD,EAAalW,QAAb,EAAuBgH,QAAvB,CAAzB,EALqD;YAAA,MAQjD,CAAC6gB,aAAa,CAACjK,MAAD,CAAd,IAA0BA,MAAM,KAAK,MAAzC;cAAAgK,UAAA,CAAAnU,IAAA;cAAA;YAAA;YACMlO,KAAK,GAAGoR,sBAAsB,CAAC,GAAD,EAAM;cAAEiH,MAAA,EAAAA;YAAF,CAAN,CAAlC;YAAA0J,sBAAA,GAEEzQ,sBAAsB,CAACX,UAAD,CADxB,EAAeqR,uBAAX,GAAAD,sBAAA,CAAEjgB,OAAO,EAA2BvB,KAAA,GAAAwhB,sBAAA,CAAAxhB,KAAA;YAAA,OAAA8hB,UAAA,CAAAhU,MAAA,WAEjC;cACL5M,QADK,EACLA,QADK;cAELhH,QAFK,EAELA,QAFK;cAGLqH,OAAO,EAAEkgB,uBAHJ;cAILhQ,UAAU,EAAE,EAJP;cAKLC,UAAU,EAAE,IALP;cAMLC,MAAM,EAAAhG,eAAA,KACH3L,KAAK,CAACS,EAAP,EAAYhB,KAAA,CAPT;cASLuiB,UAAU,EAAEviB,KAAK,CAACkK,MATb;cAULsY,aAAa,EAAE,EAVV;cAWLC,aAAa,EAAE,EAXV;cAYLtP,eAAe,EAAE;aAZnB;UAAA;YAAA,IAcUrR,OAAL;cAAAugB,UAAA,CAAAnU,IAAA;cAAA;YAAA;YACDlO,OAAK,GAAGoR,sBAAsB,CAAC,GAAD,EAAM;cAAEzW,QAAQ,EAAEF,QAAQ,CAACE;YAArB,CAAN,CAAlC;YAAAunB,sBAAA,GAEE5Q,sBAAsB,CAACX,UAAD,CADxB,EAAe2F,eAAX,GAAA4L,sBAAA,CAAEpgB,OAAO,EAAmBvB,OAAA,GAAA2hB,sBAAA,CAAA3hB,KAAA;YAAA,OAAA8hB,UAAA,CAAAhU,MAAA,WAEzB;cACL5M,QADK,EACLA,QADK;cAELhH,QAFK,EAELA,QAFK;cAGLqH,OAAO,EAAEwU,eAHJ;cAILtE,UAAU,EAAE,EAJP;cAKLC,UAAU,EAAE,IALP;cAMLC,MAAM,EAAAhG,eAAA,KACH3L,OAAK,CAACS,EAAP,EAAYhB,OAAA,CAPT;cASLuiB,UAAU,EAAEviB,OAAK,CAACkK,MATb;cAULsY,aAAa,EAAE,EAVV;cAWLC,aAAa,EAAE,EAXV;cAYLtP,eAAe,EAAE;aAZnB;UAAA;YAAAkP,UAAA,CAAAnU,IAAA;YAAA,OAgBiBwU,SAAS,CAAClM,OAAD,EAAU/b,QAAV,EAAoBqH,OAApB,EAA6BggB,cAA7B,CAA5B;UAAA;YAAI3d,MAAM,GAAAke,UAAA,CAAAjU,IAAA;YAAA,KACNuU,UAAU,CAACxe,MAAD,CAAd;cAAAke,UAAA,CAAAnU,IAAA;cAAA;YAAA;YAAA,OAAAmU,UAAA,CAAAhU,MAAA,WACSlK,MAAP;UAAA;YAAA,OAAAke,UAAA,CAAAhU,MAAA,WAMFvP,QAAA;cAASrE,QAAT,EAASA,QAAT;cAAmBgH,QAAA,EAAAA;YAAnB,GAAgC0C,MAAhC;UAAA;UAAA;YAAA,OAAAke,UAAA,CAAA/T,IAAA;QAAA;MAAA,GAAAqT,SAAA;IAAA,CACD;IAAA,OAAAD,MAAA,CAAAtd,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAsBc+X,UAAfA,CAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,WAAA,CAAA3e,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAAAkY,YAAA;IAAAA,WAAA,GAAAtV,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAqV,UACExM,OADF,EAKwDyM,MAAA;MAAA,IAAAC,KAAA,EAAA5K,OAAA,EAAAwJ,cAAA,EAAApkB,GAAA,EAAA2a,MAAA,EAAA5d,QAAA,EAAAqH,OAAA,EAAAgE,KAAA,EAAA3B,MAAA,EAAAnE,KAAA,EAAAmjB,qBAAA,EAAApZ,IAAA;MAAA,OAAA2D,mBAAA,GAAAI,IAAA,UAAAsV,WAAAC,UAAA;QAAA,kBAAAA,UAAA,CAAApV,IAAA,GAAAoV,UAAA,CAAAnV,IAAA;UAAA;YAAAgV,KAAA,GAAAD,MAAA,cAAF,EAAE,GAAAA,MAAA,EAFpD3K,OADF,GAAA4K,KAAA,CACE5K,OADF,EAEEwJ,cAAA,GAAAoB,KAAA,CAAApB,cAAA;YAGEpkB,GAAG,GAAG,IAAItC,GAAJ,CAAQob,OAAO,CAAC9Y,GAAhB,CAAV;YACI2a,MAAM,GAAG7B,OAAO,CAAC6B,MAAR,CAAexQ,WAAf,EAAb;YACIpN,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKO,UAAU,CAACyC,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B;YACIoE,OAAO,GAAGP,WAAW,CAACoP,UAAD,EAAalW,QAAb,EAAuBgH,QAAvB,CAAzB,EALsD;YAAA,MAQlD,CAAC6gB,aAAa,CAACjK,MAAD,CAAd,IAA0BA,MAAM,KAAK,MAArC,IAA+CA,MAAM,KAAK,SAA9D;cAAAgL,UAAA,CAAAnV,IAAA;cAAA;YAAA;YAAA,MACQkD,sBAAsB,CAAC,GAAD,EAAM;cAAEiH,MAAA,EAAAA;YAAF,CAAN,CAA5B;UAAA;YAAA,IACUvW,OAAL;cAAAuhB,UAAA,CAAAnV,IAAA;cAAA;YAAA;YAAA,MACCkD,sBAAsB,CAAC,GAAD,EAAM;cAAEzW,QAAQ,EAAEF,QAAQ,CAACE;YAArB,CAAN,CAA5B;UAAA;YAGEmL,KAAK,GAAGwS,OAAO,GACfxW,OAAO,CAACwhB,IAAR,CAAc,UAAA9R,CAAD;cAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQS,EAAR,KAAesX,OAAnC;YAAA,EADe,GAEfH,cAAc,CAACrW,OAAD,EAAUrH,QAAV,CAFlB;YAAA,MAII6d,OAAO,IAAI,CAACxS,KAAhB;cAAAud,UAAA,CAAAnV,IAAA;cAAA;YAAA;YAAA,MACQkD,sBAAsB,CAAC,GAAD,EAAM;cAChCzW,QAAQ,EAAEF,QAAQ,CAACE,QADa;cAEhC2d,OAAA,EAAAA;YAFgC,CAAN,CAA5B;UAAA;YAAA,IAIUxS,KAAL;cAAAud,UAAA,CAAAnV,IAAA;cAAA;YAAA;YAAA,MAECkD,sBAAsB,CAAC,GAAD,EAAM;cAAEzW,QAAQ,EAAEF,QAAQ,CAACE;YAArB,CAAN,CAA5B;UAAA;YAAA0oB,UAAA,CAAAnV,IAAA;YAAA,OAGiBwU,SAAS,CAC1BlM,OAD0B,EAE1B/b,QAF0B,EAG1BqH,OAH0B,EAI1BggB,cAJ0B,EAK1Bhc,KAL0B,CAA5B;UAAA;YAAI3B,MAAM,GAAAkf,UAAA,CAAAjV,IAAA;YAAA,KAONuU,UAAU,CAACxe,MAAD,CAAd;cAAAkf,UAAA,CAAAnV,IAAA;cAAA;YAAA;YAAA,OAAAmV,UAAA,CAAAhV,MAAA,WACSlK,MAAP;UAAA;YAGEnE,KAAK,GAAGmE,MAAM,CAAC+N,MAAP,GAAgBlM,MAAM,CAACud,MAAP,CAAcpf,MAAM,CAAC+N,MAArB,EAA6B,CAA7B,CAAhB,GAAkDtY,SAA9D;YAAA,MACIoG,KAAK,KAAKpG,SAAd;cAAAypB,UAAA,CAAAnV,IAAA;cAAA;YAAA;YAAA,MAKQlO,KAAN;UAAA;YAAA,KAIEmE,MAAM,CAAC8N,UAAX;cAAAoR,UAAA,CAAAnV,IAAA;cAAA;YAAA;YAAA,OAAAmV,UAAA,CAAAhV,MAAA,WACSrI,MAAM,CAACud,MAAP,CAAcpf,MAAM,CAAC8N,UAArB,CAAiC,EAAjC,CAAP;UAAA;YAAA,KAGE9N,MAAM,CAAC6N,UAAX;cAAAqR,UAAA,CAAAnV,IAAA;cAAA;YAAA;YACMnE,IAAI,GAAG/D,MAAM,CAACud,MAAP,CAAcpf,MAAM,CAAC6N,UAArB,CAAiC,EAAjC,CAAX;YACA,IAAI,CAAAmR,qBAAA,GAAAhf,MAAM,CAACgP,eAAX,KAAI,QAAAgQ,qBAAA,CAAyBrd,KAAK,CAACvF,KAAN,CAAYS,EAArC,CAAJ,EAA8C;cAC5C+I,IAAI,CAACqX,sBAAD,CAAJ,GAA+Bjd,MAAM,CAACgP,eAAP,CAAuBrN,KAAK,CAACvF,KAAN,CAAYS,EAAnC,CAA/B;YACD;YAAA,OAAAqiB,UAAA,CAAAhV,MAAA,WACMtE,IAAP;UAAA;YAAA,OAAAsZ,UAAA,CAAAhV,MAAA,WAGKzU,SAAP;UAAA;UAAA;YAAA,OAAAypB,UAAA,CAAA/U,IAAA;QAAA;MAAA,GAAA0U,SAAA;IAAA,CACD;IAAA,OAAAD,WAAA,CAAA3e,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAEc6X,SAAfA,CAAAc,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,UAAA,CAAAzf,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAAAgZ,WAAA;IAAAA,UAAA,GAAApW,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAmW,UACEtN,OADF,EAEE/b,QAFF,EAGEqH,OAHF,EAIEggB,cAJF,EAKEiC,UALF;MAAA,IAAAC,OAAA,EAAA7f,MAAA;MAAA,OAAAuJ,mBAAA,GAAAI,IAAA,UAAAmW,WAAAC,UAAA;QAAA,kBAAAA,UAAA,CAAAjW,IAAA,GAAAiW,UAAA,CAAAhW,IAAA;UAAA;YAOEnQ,SAAS,CACPyY,OAAO,CAACzK,MADD,EAEP,sEAFO,CAAT;YAAAmY,UAAA,CAAAjW,IAAA;YAAA,KAMMqG,gBAAgB,CAACkC,OAAO,CAAC6B,MAAR,CAAexQ,WAAf,EAAD,CAApB;cAAAqc,UAAA,CAAAhW,IAAA;cAAA;YAAA;YAAAgW,UAAA,CAAAhW,IAAA;YAAA,OACqBiW,MAAM,CACvB3N,OADuB,EAEvB1U,OAFuB,EAGvBiiB,UAAU,IAAI5L,cAAc,CAACrW,OAAD,EAAUrH,QAAV,CAHL,EAIvBqnB,cAJuB,EAKvBiC,UAAU,IAAI,IALS,CAAzB;UAAA;YAAI5f,OAAM,GAAA+f,UAAA,CAAA9V,IAAA;YAAA,OAAA8V,UAAA,CAAA7V,MAAA,WAOHlK,OAAP;UAAA;YAAA+f,UAAA,CAAAhW,IAAA;YAAA,OAGiBkW,aAAa,CAC9B5N,OAD8B,EAE9B1U,OAF8B,EAG9BggB,cAH8B,EAI9BiC,UAJ8B,CAAhC;UAAA;YAAI5f,MAAM,GAAA+f,UAAA,CAAA9V,IAAA;YAAA,OAAA8V,UAAA,CAAA7V,MAAA,WAMHsU,UAAU,CAACxe,MAAD,CAAV,GACHA,MADG,GAAArF,QAAA,KAGEqF,MAHF;cAID8N,UAAU,EAAE,IAJX;cAKDwQ,aAAa,EAAE;aALrB;UAAA;YAAAyB,UAAA,CAAAjW,IAAA;YAAAiW,UAAA,CAAAxG,EAAA,GAAAwG,UAAA;YAAA,KAWIG,oBAAoB,CAAAH,UAAA,CAAAxG,EAAA,CAAxB;cAAAwG,UAAA,CAAAhW,IAAA;cAAA;YAAA;YAAA,MACMgW,UAAA,CAAAxG,EAAA,CAAEtF,IAAF,KAAW/X,UAAU,CAACL,KAAtB,IAA+B,CAACskB,kBAAkB,CAACJ,UAAA,CAAAxG,EAAA,CAAE6G,QAAH,CAAtD;cAAAL,UAAA,CAAAhW,IAAA;cAAA;YAAA;YAAA,MACQgW,UAAA,CAAAxG,EAAA,CAAE6G,QAAR;UAAA;YAAA,OAAAL,UAAA,CAAA7V,MAAA,WAEK6V,UAAA,CAAAxG,EAAA,CAAE6G,QAAT;UAAA;YAAA,KAIED,kBAAkB,CAAAJ,UAAA,CAAAxG,EAAA,CAAtB;cAAAwG,UAAA,CAAAhW,IAAA;cAAA;YAAA;YAAA,OAAAgW,UAAA,CAAA7V,MAAA,WAAA6V,UAAA,CAAAxG,EAAA;UAAA;YAAA,MAAAwG,UAAA,CAAAxG,EAAA;UAAA;UAAA;YAAA,OAAAwG,UAAA,CAAA5V,IAAA;QAAA;MAAA,GAAAwV,SAAA;IAAA,CAKH;IAAA,OAAAD,UAAA,CAAAzf,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAEcsZ,MAAfA,CAAAK,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,OAAA,CAAAzgB,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAAAga,QAAA;IAAAA,OAAA,GAAApX,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAmX,UACEtO,OADF,EAEE1U,OAFF,EAGEiW,WAHF,EAIE+J,cAJF,EAKEiD,cALF;MAAA,IAAA5gB,MAAA,EAAAnE,KAAA,EAAAqY,MAAA,EAAA2M,OAAA,EAAAhN,aAAA,EAAAiN,UAAA,EAAAC,aAAA,EAAAC,OAAA;MAAA,OAAAzX,mBAAA,GAAAI,IAAA,UAAAsX,WAAAC,UAAA;QAAA,kBAAAA,UAAA,CAAApX,IAAA,GAAAoX,UAAA,CAAAnX,IAAA;UAAA;YAAA,IASO6J,WAAW,CAACxX,KAAZ,CAAkBxG,MAAvB;cAAAsrB,UAAA,CAAAnX,IAAA;cAAA;YAAA;YACMlO,KAAK,GAAGoR,sBAAsB,CAAC,GAAD,EAAM;cACtCiH,MAAM,EAAE7B,OAAO,CAAC6B,MADsB;cAEtC1d,QAAQ,EAAE,IAAIS,GAAJ,CAAQob,OAAO,CAAC9Y,GAAhB,EAAqB/C,QAFO;cAGtC2d,OAAO,EAAEP,WAAW,CAACxX,KAAZ,CAAkBS;YAHW,CAAN,CAAlC;YAAA,KAKI+jB,cAAJ;cAAAM,UAAA,CAAAnX,IAAA;cAAA;YAAA;YAAA,MACQlO,KAAN;UAAA;YAEFmE,MAAM,GAAG;cACPiU,IAAI,EAAE/X,UAAU,CAACL,KADV;cAEPA,KAAA,EAAAA;aAFF;YAAAqlB,UAAA,CAAAnX,IAAA;YAAA;UAAA;YAAAmX,UAAA,CAAAnX,IAAA;YAAA,OAKeqK,kBAAkB,CAC/B,QAD+B,EAE/B/B,OAF+B,EAG/BuB,WAH+B,EAI/BjW,OAJ+B,EAK/BL,QAL+B,EAM/B,IAN+B,EAO/BsjB,cAP+B,EAQ/BjD,cAR+B,CAAjC;UAAA;YAAA3d,MAAM,GAAAkhB,UAAA,CAAAjX,IAAA;YAAA,KAWFoI,OAAO,CAACzK,MAAR,CAAea,OAAnB;cAAAyY,UAAA,CAAAnX,IAAA;cAAA;YAAA;YACMmK,MAAM,GAAG0M,cAAc,GAAG,YAAH,GAAkB,OAA7C;YAAA,MACM,IAAI7mB,KAAJ,CAAama,MAAb,GAAN;UAAA;YAAA,KAIAG,gBAAgB,CAACrU,MAAD,CAApB;cAAAkhB,UAAA,CAAAnX,IAAA;cAAA;YAAA;YAAA,MAKQ,IAAI5D,QAAJ,CAAa,IAAb,EAAmB;cACvBJ,MAAM,EAAE/F,MAAM,CAAC+F,MADQ;cAEvBC,OAAO,EAAE;gBACPmb,QAAQ,EAAEnhB,MAAM,CAAC1J;cADV;YAFc,CAAnB,CAAN;UAAA;YAAA,KAQEke,gBAAgB,CAACxU,MAAD,CAApB;cAAAkhB,UAAA,CAAAnX,IAAA;cAAA;YAAA;YACMlO,OAAK,GAAGoR,sBAAsB,CAAC,GAAD,EAAM;cAAEgH,IAAI,EAAE;YAAR,CAAN,CAAlC;YAAA,KACI2M,cAAJ;cAAAM,UAAA,CAAAnX,IAAA;cAAA;YAAA;YAAA,MACQlO,OAAN;UAAA;YAEFmE,MAAM,GAAG;cACPiU,IAAI,EAAE/X,UAAU,CAACL,KADV;cAEPA,KAAA,EAAAA;aAFF;UAAA;YAAA,KAME+kB,cAAJ;cAAAM,UAAA,CAAAnX,IAAA;cAAA;YAAA;YAAA,KAGMwK,aAAa,CAACvU,MAAD,CAAjB;cAAAkhB,UAAA,CAAAnX,IAAA;cAAA;YAAA;YAAA,MACQ/J,MAAM,CAACnE,KAAb;UAAA;YAAA,OAAAqlB,UAAA,CAAAhX,MAAA,WAGK;cACLvM,OAAO,EAAE,CAACiW,WAAD,CADJ;cAEL/F,UAAU,EAAE,EAFP;cAGLC,UAAU,EAAA/F,eAAA,KAAK6L,WAAW,CAACxX,KAAZ,CAAkBS,EAAnB,EAAwBmD,MAAM,CAAC4F,IAAA,CAHxC;cAILmI,MAAM,EAAE,IAJH;cAKL;cACA;cACAqQ,UAAU,EAAE,GAPP;cAQLC,aAAa,EAAE,EARV;cASLC,aAAa,EAAE,EATV;cAULtP,eAAe,EAAE;aAVnB;UAAA;YAAA,KAcEuF,aAAa,CAACvU,MAAD,CAAjB;cAAAkhB,UAAA,CAAAnX,IAAA;cAAA;YAAA;YACE;YACA;YACI8J,aAAa,GAAGb,mBAAmB,CAACrV,OAAD,EAAUiW,WAAW,CAACxX,KAAZ,CAAkBS,EAA5B,CAAvC;YAAAqkB,UAAA,CAAAnX,IAAA;YAAA,OACoBkW,aAAa,CAC/B5N,OAD+B,EAE/B1U,OAF+B,EAG/BggB,cAH+B,EAI/BloB,SAJ+B,EAAAsS,eAAA,KAM5B8L,aAAa,CAACzX,KAAd,CAAoBS,EAArB,EAA0BmD,MAAM,CAACnE,KAAA,EANrC;UAAA;YAAImlB,UAAO,GAAAE,UAAA,CAAAjX,IAAA;YAAA,OAAAiX,UAAA,CAAAhX,MAAA,WAWXvP,QAAA,KACKqmB,UADL;cAEE5C,UAAU,EAAEjT,oBAAoB,CAACnL,MAAM,CAACnE,KAAR,CAApB,GACRmE,MAAM,CAACnE,KAAP,CAAakK,MADL,GAER,GAJN;cAKE+H,UAAU,EAAE,IALd;cAMEwQ,aAAa,EACP3jB,QAAA,KAAAqF,MAAM,CAACgG,OAAP,GAAA+B,eAAA,KAAoB6L,WAAW,CAACxX,KAAZ,CAAkBS,EAAnB,EAAwBmD,MAAM,CAACgG,OAAA,IAAY,EADvD;YANf;UAAA;YA/FqB;YA4GnB+a,aAAa,GAAG,IAAI5N,OAAJ,CAAYd,OAAO,CAAC9Y,GAApB,EAAyB;cAC3CyM,OAAO,EAAEqM,OAAO,CAACrM,OAD0B;cAE3C+E,QAAQ,EAAEsH,OAAO,CAACtH,QAFyB;cAG3CnD,MAAM,EAAEyK,OAAO,CAACzK;YAH2B,CAAzB,CAApB;YAAAsZ,UAAA,CAAAnX,IAAA;YAAA,OAKoBkW,aAAa,CAACc,aAAD,EAAgBpjB,OAAhB,EAAyBggB,cAAzB,CAAjC;UAAA;YAAIqD,OAAO,GAAAE,UAAA,CAAAjX,IAAA;YAAA,OAAAiX,UAAA,CAAAhX,MAAA,WAEXvP,QAAA,KACKqmB,OADL,EAGMhhB,MAAM,CAACoe,UAAP,GAAoB;cAAEA,UAAU,EAAEpe,MAAM,CAACoe;YAArB,CAApB,GAAwD,EAH9D;cAIEtQ,UAAU,EAAA/F,eAAA,KACP6L,WAAW,CAACxX,KAAZ,CAAkBS,EAAnB,EAAwBmD,MAAM,CAAC4F,IAAA,CALnC;cAOE0Y,aAAa,EACP3jB,QAAA,KAAAqF,MAAM,CAACgG,OAAP,GAAA+B,eAAA,KAAoB6L,WAAW,CAACxX,KAAZ,CAAkBS,EAAnB,EAAwBmD,MAAM,CAACgG,OAAA,IAAY,EADvD;YAPf;UAAA;UAAA;YAAA,OAAAkb,UAAA,CAAA/W,IAAA;QAAA;MAAA,GAAAwW,SAAA;IAAA,CAWD;IAAA,OAAAD,OAAA,CAAAzgB,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAEcuZ,aAAfA,CAAAmB,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;IAAA,OAAAC,cAAA,CAAAxhB,KAAA,OAAAyG,SAAA;EAAA;EAAA,SAAA+a,eAAA;IAAAA,cAAA,GAAAnY,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAkY,UACErP,OADF,EAEE1U,OAFF,EAGEggB,cAHF,EAIEiC,UAJF,EAKE1M,kBALF;MAAA,IAAA0N,cAAA,EAAAnJ,cAAA,EAAAnC,aAAA,EAAAG,OAAA,EAAAvB,MAAA,EAAAlF,eAAA,EAAAgS,OAAA,EAAAW,eAAA;MAAA,OAAApY,mBAAA,GAAAI,IAAA,UAAAiY,WAAAC,UAAA;QAAA,kBAAAA,UAAA,CAAA/X,IAAA,GAAA+X,UAAA,CAAA9X,IAAA;UAAA;YAaM6W,cAAc,GAAGhB,UAAU,IAAI,IAAnC,EAR8B;YAAA,MAW1BgB,cAAc,IAAI,EAAChB,UAAD,YAACA,UAAU,CAAExjB,KAAZ,CAAkBkR,MAAnB,CAAtB;cAAAuU,UAAA,CAAA9X,IAAA;cAAA;YAAA;YAAA,MACQkD,sBAAsB,CAAC,GAAD,EAAM;cAChCiH,MAAM,EAAE7B,OAAO,CAAC6B,MADgB;cAEhC1d,QAAQ,EAAE,IAAIS,GAAJ,CAAQob,OAAO,CAAC9Y,GAAhB,EAAqB/C,QAFC;cAGhC2d,OAAO,EAAEyL,UAAF,oBAAEA,UAAU,CAAExjB,KAAZ,CAAkBS;YAHK,CAAN,CAA5B;UAAA;YAOE4a,cAAc,GAAGmI,UAAU,GAC3B,CAACA,UAAD,CAD2B,GAE3BkC,6BAA6B,CAC3BnkB,OAD2B,EAE3BkE,MAAM,CAACwO,IAAP,CAAY6C,kBAAkB,IAAI,EAAlC,EAAsC,CAAtC,CAF2B,CAFjC;YAMIoC,aAAa,GAAGmC,cAAc,CAACzW,MAAf,CAAuB,UAAAqM,CAAD;cAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQkR,MAArC;YAAA,EAApB,EAzB8B;YAAA,MA4B1BgI,aAAa,CAAC3f,MAAd,KAAyB,CAA7B;cAAAksB,UAAA,CAAA9X,IAAA;cAAA;YAAA;YAAA,OAAA8X,UAAA,CAAA3X,MAAA,WACS;cACLvM,OADK,EACLA,OADK;cAEL;cACAkQ,UAAU,EAAElQ,OAAO,CAACsD,MAAR,CACV,UAAC4G,GAAD,EAAMwF,CAAN;gBAAA,OAAYxL,MAAM,CAAC/F,MAAP,CAAc+L,GAAd,EAAAE,eAAA,KAAsBsF,CAAC,CAACjR,KAAF,CAAQS,EAAT,EAAc,MADrC;cAAA,GAEV,EAFU,CAHP;cAOLkR,MAAM,EAAEmF,kBAAkB,IAAI,IAPzB;cAQLkL,UAAU,EAAE,GARP;cASLC,aAAa,EAAE,EATV;cAULrP,eAAe,EAAE;aAVnB;UAAA;YAAA6S,UAAA,CAAA9X,IAAA;YAAA,OAckBzC,OAAO,CAAC4T,GAAR,CAAAte,kBAAA,CACf0Y,aAAa,CAAClgB,GAAd,CAAmB,UAAAuM,KAAD;cAAA,OACnByS,kBAAkB,CAChB,QADgB,EAEhB/B,OAFgB,EAGhB1Q,KAHgB,EAIhBhE,OAJgB,EAKhBL,QALgB,EAMhB,IANgB,EAOhBsjB,cAPgB,EAQhBjD,cARgB,CADjB;YAAA,EAD2B,EAAhC;UAAA;YAAIlI,OAAO,GAAAoM,UAAA,CAAA5X,IAAA;YAAA,KAePoI,OAAO,CAACzK,MAAR,CAAea,OAAnB;cAAAoZ,UAAA,CAAA9X,IAAA;cAAA;YAAA;YACMmK,MAAM,GAAG0M,cAAc,GAAG,YAAH,GAAkB,OAA7C;YAAA,MACM,IAAI7mB,KAAJ,CAAama,MAAb,GAAN;UAAA;YA5D4B;YAgE1BlF,eAAe,GAAG,IAAIf,GAAJ,EAAtB;YACI+S,OAAO,GAAGe,sBAAsB,CAClCpkB,OADkC,EAElC2X,aAFkC,EAGlCG,OAHkC,EAIlCvC,kBAJkC,EAKlClE,eALkC,CAApC,EAjE8B;YA0E1B2S,eAAe,GAAG,IAAIllB,GAAJ,CACpB6Y,aAAa,CAAClgB,GAAd,CAAmB,UAAAuM,KAAD;cAAA,OAAWA,KAAK,CAACvF,KAAN,CAAYS,EAAzC;YAAA,EADoB,CAAtB;YAGAc,OAAO,CAACe,OAAR,CAAiB,UAAAiD,KAAD,EAAU;cACxB,IAAI,CAACggB,eAAe,CAAC3kB,GAAhB,CAAoB2E,KAAK,CAACvF,KAAN,CAAYS,EAAhC,CAAL,EAA0C;gBACxCmkB,OAAO,CAACnT,UAAR,CAAmBlM,KAAK,CAACvF,KAAN,CAAYS,EAA/B,IAAqC,IAArC;cACD;aAHH;YAAA,OAAAglB,UAAA,CAAA3X,MAAA,WAMAvP,QAAA,KACKqmB,OADL;cAEErjB,OAFF,EAEEA,OAFF;cAGEqR,eAAe,EACbA,eAAe,CAAC1E,IAAhB,GAAuB,CAAvB,GACIzI,MAAM,CAACmgB,WAAP,CAAmBhT,eAAe,CAAC7Z,OAAhB,EAAnB,CADJ,GAEI;YANR;UAAA;UAAA;YAAA,OAAA0sB,UAAA,CAAA1X,IAAA;QAAA;MAAA,GAAAuX,SAAA;IAAA,CAQD;IAAA,OAAAD,cAAA,CAAAxhB,KAAA,OAAAyG,SAAA;EAAA;EAED,OAAO;IACL8F,UADK,EACLA,UADK;IAEL4Q,KAFK,EAELA,KAFK;IAGLqB,UAAA,EAAAA;GAHF;AAKD;AAID;AACA;AACA;;AAEA;;;AAGG;;SACawD,0BACd3lB,MAAA,EACA0kB,OAAA,EACAnlB,KAAA,EAAU;EAEV,IAAIqmB,UAAU,GAAAvnB,QAAA,KACTqmB,OADS;IAEZ5C,UAAU,EAAE,GAFA;IAGZrQ,MAAM,EAAAhG,eAAA,KACHiZ,OAAO,CAACmB,0BAAR,IAAsC7lB,MAAM,CAAC,CAAD,CAAN,CAAUO,EAAjD,EAAsDhB,KAAA;GAJ1D;EAOA,OAAOqmB,UAAP;AACD;AAED,SAASE,sBAATA,CACEpR,IADF,EAC6B;EAE3B,OAAOA,IAAI,IAAI,IAAR,IAAgB,cAAcA,IAArC;AACD;AAGD;;AACA,SAASM,wBAATA,CACElb,EADF,EAEE4a,IAFF,EAGEqR,SAHF,EAGmB;EAAA,IAAjBA,SAAiB;IAAjBA,SAAiB,GAAL,KAAK;EAAA;EAMjB,IAAIlrB,IAAI,GAAG,OAAOf,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BU,UAAU,CAACV,EAAD,CAAnD,CANiB;;EASjB,IAAI,CAAC4a,IAAD,IAAS,CAACoR,sBAAsB,CAACpR,IAAD,CAApC,EAA4C;IAC1C,OAAO;MAAE7Z,IAAA,EAAAA;KAAT;EACD;EAED,IAAI6Z,IAAI,CAACrF,UAAL,IAAmB,CAACwS,aAAa,CAACnN,IAAI,CAACrF,UAAN,CAArC,EAAwD;IACtD,OAAO;MACLxU,IADK,EACLA,IADK;MAEL0E,KAAK,EAAEoR,sBAAsB,CAAC,GAAD,EAAM;QAAEiH,MAAM,EAAElD,IAAI,CAACrF;OAArB;KAF/B;EAID,CAlBgB;;EAqBjB,IAAIuF,UAAJ;EACA,IAAIF,IAAI,CAAClF,QAAT,EAAmB;IACjBoF,UAAU,GAAG;MACXvF,UAAU,EAAEqF,IAAI,CAACrF,UAAL,IAAmB,KADpB;MAEXC,UAAU,EAAE0W,iBAAiB,CAACnrB,IAAD,CAFlB;MAGX0U,WAAW,EACRmF,IAAI,IAAIA,IAAI,CAACnF,WAAd,IAA8B,mCAJrB;MAKXC,QAAQ,EAAEkF,IAAI,CAAClF;KALjB;IAQA,IAAIqE,gBAAgB,CAACe,UAAU,CAACvF,UAAZ,CAApB,EAA6C;MAC3C,OAAO;QAAExU,IAAF,EAAEA,IAAF;QAAQ+Z,UAAA,EAAAA;OAAf;IACD;EACF,CAlCgB;;EAqCjB,IAAIlW,UAAU,GAAG5D,SAAS,CAACD,IAAD,CAA1B;EACA,IAAIorB,YAAY,GAAGC,6BAA6B,CAACxR,IAAI,CAAClF,QAAN,CAAhD,CAtCiB;EAwCjB;EACA;;EACA,IAAIuW,SAAS,IAAIrnB,UAAU,CAAC3D,MAAxB,IAAkCorB,kBAAkB,CAACznB,UAAU,CAAC3D,MAAZ,CAAxD,EAA6E;IAC3EkrB,YAAY,CAACG,MAAb,CAAoB,OAApB,EAA6B,EAA7B;EACD;EACD1nB,UAAU,CAAC3D,MAAX,SAAwBkrB,YAAxB;EAEA,OAAO;IAAEprB,IAAI,EAAEL,UAAU,CAACkE,UAAD,CAAlB;IAAgCkW,UAAA,EAAAA;GAAvC;AACD;AAGD;;AACA,SAAS4Q,6BAATA,CACEnkB,OADF,EAEEglB,UAFF,EAEqB;EAEnB,IAAIC,eAAe,GAAGjlB,OAAtB;EACA,IAAIglB,UAAJ,EAAgB;IACd,IAAIrtB,KAAK,GAAGqI,OAAO,CAACklB,SAAR,CAAmB,UAAAxV,CAAD;MAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQS,EAAR,KAAe8lB,UAAxC;IAAA,EAAZ;IACA,IAAIrtB,KAAK,IAAI,CAAb,EAAgB;MACdstB,eAAe,GAAGjlB,OAAO,CAACjE,KAAR,CAAc,CAAd,EAAiBpE,KAAjB,CAAlB;IACD;EACF;EACD,OAAOstB,eAAP;AACD;AAED,SAAS5M,gBAATA,CACEjf,OADF,EAEEvB,KAFF,EAGEmI,OAHF,EAIEuT,UAJF,EAKE5a,QALF,EAMEiY,sBANF,EAOEC,uBAPF,EAQEC,qBARF,EASE6D,iBATF,EAUEf,YAVF,EAWExC,gBAXF,EAWgD;EAE9C,IAAI+I,YAAY,GAAGvG,YAAY,GAC3B1P,MAAM,CAACud,MAAP,CAAc7N,YAAd,EAA4B,CAA5B,CAD2B,GAE3Be,iBAAiB,GACjBzQ,MAAM,CAACud,MAAP,CAAc9M,iBAAd,CAAiC,EAAjC,CADiB,GAEjB7c,SAJJ;EAMA,IAAIqtB,UAAU,GAAG/rB,OAAO,CAACC,SAAR,CAAkBxB,KAAK,CAACc,QAAxB,CAAjB;EACA,IAAIysB,OAAO,GAAGhsB,OAAO,CAACC,SAAR,CAAkBV,QAAlB,CAAd;EAEA,IAAI0sB,uBAAuB;EAAA;EAEzBzU,sBAAsB;EAAA;EAEtBuU,UAAU,CAACvoB,QAAX,OAA0BwoB,OAAO,CAACxoB,QAAR,EAF1B;EAAA;EAIAuoB,UAAU,CAACzrB,MAAX,KAAsB0rB,OAAO,CAAC1rB,MANhC,CAX8C;;EAoB9C,IAAIsrB,UAAU,GAAGpR,YAAY,GAAG1P,MAAM,CAACwO,IAAP,CAAYkB,YAAZ,EAA0B,CAA1B,CAAH,GAAkC9b,SAA/D;EACA,IAAImtB,eAAe,GAAGd,6BAA6B,CAACnkB,OAAD,EAAUglB,UAAV,CAAnD;EAEA,IAAIM,iBAAiB,GAAGL,eAAe,CAAC5hB,MAAhB,CAAuB,UAACW,KAAD,EAAQrM,KAAR,EAAiB;IAC9D,IAAIqM,KAAK,CAACvF,KAAN,CAAYkR,MAAZ,IAAsB,IAA1B,EAAgC;MAC9B,OAAO,KAAP;IACD,CAH6D;;IAM9D,IACE4V,WAAW,CAAC1tB,KAAK,CAACqY,UAAP,EAAmBrY,KAAK,CAACmI,OAAN,CAAcrI,KAAd,CAAnB,EAAyCqM,KAAzC,CAAX,IACA6M,uBAAuB,CAACzN,IAAxB,CAA8B,UAAAlE,EAAD;MAAA,OAAQA,EAAE,KAAK8E,KAAK,CAACvF,KAAN,CAAYS,EAAxD;IAAA,EAFF,EAGE;MACA,OAAO,IAAP;IACD,CAX6D;IAc9D;IACA;IACA;;IACA,IAAIsmB,iBAAiB,GAAG3tB,KAAK,CAACmI,OAAN,CAAcrI,KAAd,CAAxB;IACA,IAAI8tB,cAAc,GAAGzhB,KAArB;IAEA,OAAO0hB,sBAAsB,CAAC1hB,KAAD,EAAAhH,QAAA;MAC3BmoB,UAD2B,EAC3BA,UAD2B;MAE3BQ,aAAa,EAAEH,iBAAiB,CAACrhB,MAFN;MAG3BihB,OAH2B,EAG3BA,OAH2B;MAI3BQ,UAAU,EAAEH,cAAc,CAACthB;IAJA,GAKxBoP,UALwB;MAM3B4G,YAN2B,EAM3BA,YAN2B;MAO3BkL,uBAAuB,EACrBA,uBAAuB,IACvBQ,kBAAkB,CAACL,iBAAD,EAAoBC,cAApB;KATtB;GApBsB,CAAxB,CAvB8C;;EAyD9C,IAAI7N,oBAAoB,GAA0B,EAAlD;EACAxG,gBAAgB,IACdA,gBAAgB,CAACrQ,OAAjB,CAAyB,UAACW,CAAD,EAAIhJ,GAAJ,EAAW;IAClC,IAAI,CAACsH,OAAO,CAACoD,IAAR,CAAc,UAAAsM,CAAD;MAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQS,EAAR,KAAewC,CAAC,CAAC8U,OAArC;IAAA,EAAL,EAAoD;MAClD;MACA;MACA;KAHF,MAIO,IAAI1F,qBAAqB,CAAC7P,QAAtB,CAA+BvI,GAA/B,CAAJ,EAAyC;MAC9C;MACAkf,oBAAoB,CAAChe,IAArB,CAAAoD,QAAA;QAA4BtE,GAAA,EAAAA;MAA5B,GAAoCgJ,CAApC;IACD,CAHM,MAGA;MACL;MACA;MACA;MACA;MACA,IAAIokB,gBAAgB,GAAGJ,sBAAsB,CAAChkB,CAAC,CAACsC,KAAH,EAAAhH,QAAA;QAC3CmoB,UAD2C,EAC3CA,UAD2C;QAE3CQ,aAAa,EAAE9tB,KAAK,CAACmI,OAAN,CAAcnI,KAAK,CAACmI,OAAN,CAAchI,MAAd,GAAuB,CAArC,EAAwCmM,MAFZ;QAG3CihB,OAH2C,EAG3CA,OAH2C;QAI3CQ,UAAU,EAAE5lB,OAAO,CAACA,OAAO,CAAChI,MAAR,GAAiB,CAAlB,CAAP,CAA4BmM;MAJG,GAKxCoP,UALwC;QAM3C4G,YAN2C,EAM3CA,YAN2C;QAO3CkL,uBAAA,EAAAA;OAPF;MASA,IAAIS,gBAAJ,EAAsB;QACpBlO,oBAAoB,CAAChe,IAArB,CAAAoD,QAAA;UAA4BtE,GAAA,EAAAA;QAA5B,GAAoCgJ,CAApC;MACD;IACF;EACF,CA1BD,CADF;EA6BA,OAAO,CAAC4jB,iBAAD,EAAoB1N,oBAApB,CAAP;AACD;AAED,SAAS2N,WAATA,CACEQ,iBADF,EAEEC,YAFF,EAGEhiB,KAHF,EAG+B;EAE7B,IAAIiiB,KAAK;EAAA;EAEP,CAACD,YAAD;EAAA;EAEAhiB,KAAK,CAACvF,KAAN,CAAYS,EAAZ,KAAmB8mB,YAAY,CAACvnB,KAAb,CAAmBS,EAJxC,CAF6B;EAS7B;;EACA,IAAIgnB,aAAa,GAAGH,iBAAiB,CAAC/hB,KAAK,CAACvF,KAAN,CAAYS,EAAb,CAAjB,KAAsCpH,SAA1D,CAV6B;;EAa7B,OAAOmuB,KAAK,IAAIC,aAAhB;AACD;AAED,SAASL,kBAATA,CACEG,YADF,EAEEhiB,KAFF,EAE+B;EAE7B,IAAImiB,WAAW,GAAGH,YAAY,CAACvnB,KAAb,CAAmBjF,IAArC;EACA;IAAA;IAEEwsB,YAAY,CAACntB,QAAb,KAA0BmL,KAAK,CAACnL,QAAhC;IAAA;IAEA;IACCstB,WAAW,IAAI,IAAf,IACCA,WAAW,CAACjkB,QAAZ,CAAqB,GAArB,CADD,IAEC8jB,YAAY,CAAC7hB,MAAb,CAAoB,GAApB,MAA6BH,KAAK,CAACG,MAAN,CAAa,GAAb;EAAA;AAElC;AAED,SAASuhB,sBAATA,CACEU,WADF,EAEEC,GAFF,EAE8C;EAE5C,IAAID,WAAW,CAAC3nB,KAAZ,CAAkBqnB,gBAAtB,EAAwC;IACtC,IAAIQ,WAAW,GAAGF,WAAW,CAAC3nB,KAAZ,CAAkBqnB,gBAAlB,CAAmCO,GAAnC,CAAlB;IACA,IAAI,OAAOC,WAAP,KAAuB,SAA3B,EAAsC;MACpC,OAAOA,WAAP;IACD;EACF;EAED,OAAOD,GAAG,CAAChB,uBAAX;AACD;AAAA,SAEc5O,kBAAfA,CAAA8P,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,mBAAA,CAAAzkB,KAAA,OAAAyG,SAAA;AAAA,EA2JC;AAGD;AACA;AAAA,SAAAge,oBAAA;EAAAA,mBAAA,GAAApb,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CA/JA,SAAAmb,UACE1Q,IADF,EAEE5B,OAFF,EAGE1Q,KAHF,EAIEhE,OAJF,EAKEL,QALF,EAMEsnB,eANF,EAOEhE,cAPF,EAQEjD,cARF;IAAA,IAAAkH,UAAA,EAAA7kB,MAAA,EAAAoH,MAAA,EAAAC,YAAA,EAAAyd,QAAA,EAAAC,OAAA,EAAAhf,MAAA,EAAAzP,QAAA,EAAA0uB,aAAA,EAAAjgB,cAAA,EAAAkgB,gBAAA,EAAA9tB,IAAA,EAAA2rB,UAAA,EAAAvpB,GAAA,EAAAqM,IAAA,EAAAsf,WAAA;IAAA,OAAA3b,mBAAA,GAAAI,IAAA,UAAAwb,WAAAC,UAAA;MAAA,kBAAAA,UAAA,CAAAtb,IAAA,GAAAsb,UAAA,CAAArb,IAAA;QAAA;UAQ0B,IAHxBzM,QAGwB;YAHxBA,QAGwB,GAHb,GAGa;UAAA;UAAA,IAFxBsnB,eAEwB;YAFxBA,eAEwB,GAFG,KAEH;UAAA;UAAA,IADxBhE,cACwB;YADxBA,cACwB,GADE,KACF;UAAA;UAOpBvZ,YAAY,GAAG,IAAIC,OAAJ,CAAY,UAACnF,CAAD,EAAIoF,CAAJ;YAAA,OAAWH,MAAM,GAAGG,CAAhC;UAAA,EAAnB;UACIud,QAAQ,GAAG,SAAXA,QAAQA,CAAA;YAAA,OAAS1d,MAAM,EAA3B;UAAA;UACAiL,OAAO,CAACzK,MAAR,CAAe5L,gBAAf,CAAgC,OAAhC,EAAyC8oB,QAAzC;UAAAM,UAAA,CAAAtb,IAAA;UAGMib,OAAO,GAAGpjB,KAAK,CAACvF,KAAN,CAAY6X,IAAZ,CAAd;UACAra,SAAS,CACPmrB,OADO,0BAEe9Q,IAFf,yBAEsCtS,KAAK,CAACvF,KAAN,CAAYS,EAFlD,GAAT;UAAAuoB,UAAA,CAAArb,IAAA;UAAA,OAKezC,OAAO,CAACa,IAAR,CAAa,CAC1B4c,OAAO,CAAC;YAAE1S,OAAF,EAAEA,OAAF;YAAWvQ,MAAM,EAAEH,KAAK,CAACG,MAAzB;YAAiCkf,OAAO,EAAErD;UAA1C,CAAD,CADmB,EAE1BtW,YAF0B,CAAb,CAAf;QAAA;UAAArH,MAAM,GAAAolB,UAAA,CAAAnb,IAAA;UAKNrQ,SAAS,CACPoG,MAAM,KAAKvK,SADJ,EAEP,cAAe,IAAAwe,IAAI,KAAK,QAAT,GAAoB,WAApB,GAAkC,UAAjD,4BACMtS,KAAK,CAACvF,KAAN,CAAYS,EADlB,iDACgEoX,IADhE,uDAFO,CAAT;UAAAmR,UAAA,CAAArb,IAAA;UAAA;QAAA;UAAAqb,UAAA,CAAAtb,IAAA;UAAAsb,UAAA,CAAA7L,EAAA,GAAA6L,UAAA;UAOAP,UAAU,GAAG3oB,UAAU,CAACL,KAAxB;UACAmE,MAAM,GAAAolB,UAAA,CAAA7L,EAAN;QAAA;UAAA6L,UAAA,CAAAtb,IAAA;UAEAuI,OAAO,CAACzK,MAAR,CAAe3L,mBAAf,CAAmC,OAAnC,EAA4C6oB,QAA5C;UAAA,OAAAM,UAAA,CAAAC,MAAA;QAAA;UAAA,KAGE7G,UAAU,CAACxe,MAAD,CAAd;YAAAolB,UAAA,CAAArb,IAAA;YAAA;UAAA;UACMhE,MAAM,GAAG/F,MAAM,CAAC+F,MAApB,EADsB;UAAA,KAIlByF,mBAAmB,CAACxO,GAApB,CAAwB+I,MAAxB,CAAJ;YAAAqf,UAAA,CAAArb,IAAA;YAAA;UAAA;UACMzT,QAAQ,GAAG0J,MAAM,CAACgG,OAAP,CAAewC,GAAf,CAAmB,UAAnB,CAAf;UACA5O,SAAS,CACPtD,QADO,EAEP,4EAFO,CAAT,CAFmC;;UAQnC,IAAI,CAAC6V,kBAAkB,CAAChL,IAAnB,CAAwB7K,QAAxB,CAAL,EAAwC;YAClC0uB,aAAa,GAAGrnB,OAAO,CAACjE,KAAR,CAAc,CAAd,EAAiBiE,OAAO,CAAClE,OAAR,CAAgBkI,KAAhB,IAAyB,CAA1C,CAApB;YACIoD,cAAc,GAAGH,0BAA0B,CAACogB,aAAD,CAA1B,CAA0C5vB,GAA1C,CAClB,UAAAuM,KAAD;cAAA,OAAWA,KAAK,CAACI,YADE;YAAA,EAArB;YAGIkjB,gBAAgB,GAAGpgB,SAAS,CAC9BvO,QAD8B,EAE9ByO,cAF8B,EAG9B,IAAI9N,GAAJ,CAAQob,OAAO,CAAC9Y,GAAhB,EAAqB/C,QAHS,CAAhC;YAKAoD,SAAS,CACP9C,UAAU,CAACmuB,gBAAD,CADH,EAEiC,0CAAA3uB,QAFjC,CAAT,CAVsC;;YAgBtC,IAAIgH,QAAJ,EAAc;cACRnG,IAAI,GAAG8tB,gBAAgB,CAACzuB,QAA5B;cACAyuB,gBAAgB,CAACzuB,QAAjB,GACEW,IAAI,KAAK,GAAT,GAAemG,QAAf,GAA0BgB,SAAS,CAAC,CAAChB,QAAD,EAAWnG,IAAX,CAAD,CADrC;YAED;YAEDb,QAAQ,GAAGQ,UAAU,CAACmuB,gBAAD,CAArB;UACD,CAvBD,MAuBO,IAAI,CAACL,eAAL,EAAsB;YAC3B;YACA;YACA;YACI9B,UAAU,GAAG,IAAI7rB,GAAJ,CAAQob,OAAO,CAAC9Y,GAAhB,CAAjB;YACIA,GAAG,GAAGjD,QAAQ,CAAC+H,UAAT,CAAoB,IAApB,CACN,OAAIpH,GAAJ,CAAQ6rB,UAAU,CAACwC,QAAX,GAAsBhvB,QAA9B,CADM,GAEN,IAAIW,GAAJ,CAAQX,QAAR,CAFJ;YAGA,IAAIiD,GAAG,CAACwC,MAAJ,KAAe+mB,UAAU,CAAC/mB,MAA9B,EAAsC;cACpCzF,QAAQ,GAAGiD,GAAG,CAAC/C,QAAJ,GAAe+C,GAAG,CAAClC,MAAnB,GAA4BkC,GAAG,CAACjC,IAA3C;YACD;UACF,CA1CkC;UA6CnC;UACA;UACA;UAAA,KACIstB,eAAJ;YAAAQ,UAAA,CAAArb,IAAA;YAAA;UAAA;UACE/J,MAAM,CAACgG,OAAP,CAAeE,GAAf,CAAmB,UAAnB,EAA+B5P,QAA/B;UAAA,MACM0J,MAAN;QAAA;UAAA,OAAAolB,UAAA,CAAAlb,MAAA,WAGK;YACL+J,IAAI,EAAE/X,UAAU,CAAC6O,QADZ;YAELhF,MAFK,EAELA,MAFK;YAGLzP,QAHK,EAGLA,QAHK;YAILkb,UAAU,EAAExR,MAAM,CAACgG,OAAP,CAAewC,GAAf,CAAmB,oBAAnB,CAA6C;WAJ3D;QAAA;UAAA,KAWEoY,cAAJ;YAAAwE,UAAA,CAAArb,IAAA;YAAA;UAAA;UAAA,MAEQ;YACJkK,IAAI,EAAE4Q,UAAU,IAAI3oB,UAAU,CAAC0J,IAD3B;YAEJwa,QAAQ,EAAEpgB;WAFZ;QAAA;UAOEklB,WAAW,GAAGllB,MAAM,CAACgG,OAAP,CAAewC,GAAf,CAAmB,cAAnB,CAAlB,EA7EsB;UA+EtB;UAAA,MACI0c,WAAW,IAAI,wBAAwB/jB,IAAxB,CAA6B+jB,WAA7B,CAAnB;YAAAE,UAAA,CAAArb,IAAA;YAAA;UAAA;UAAAqb,UAAA,CAAArb,IAAA;UAAA,OACe/J,MAAM,CAAC2F,IAAP,EAAb;QAAA;UAAAC,IAAI,GAAAwf,UAAA,CAAAnb,IAAA;UAAAmb,UAAA,CAAArb,IAAA;UAAA;QAAA;UAAAqb,UAAA,CAAArb,IAAA;UAAA,OAES/J,MAAM,CAACulB,IAAP,EAAb;QAAA;UAAA3f,IAAI,GAAAwf,UAAA,CAAAnb,IAAA;QAAA;UAAA,MAGF4a,UAAU,KAAK3oB,UAAU,CAACL,KAA9B;YAAAupB,UAAA,CAAArb,IAAA;YAAA;UAAA;UAAA,OAAAqb,UAAA,CAAAlb,MAAA,WACS;YACL+J,IAAI,EAAE4Q,UADD;YAELhpB,KAAK,EAAE,IAAImP,aAAJ,CAAkBjF,MAAlB,EAA0B/F,MAAM,CAACiL,UAAjC,EAA6CrF,IAA7C,CAFF;YAGLI,OAAO,EAAEhG,MAAM,CAACgG;WAHlB;QAAA;UAAA,OAAAof,UAAA,CAAAlb,MAAA,WAOK;YACL+J,IAAI,EAAE/X,UAAU,CAAC0J,IADZ;YAELA,IAFK,EAELA,IAFK;YAGLwY,UAAU,EAAEpe,MAAM,CAAC+F,MAHd;YAILC,OAAO,EAAEhG,MAAM,CAACgG;WAJlB;QAAA;UAAA,MAQE6e,UAAU,KAAK3oB,UAAU,CAACL,KAA9B;YAAAupB,UAAA,CAAArb,IAAA;YAAA;UAAA;UAAA,OAAAqb,UAAA,CAAAlb,MAAA,WACS;YAAE+J,IAAI,EAAE4Q,UAAR;YAAoBhpB,KAAK,EAAEmE;WAAlC;QAAA;UAAA,MAGEA,MAAM,YAAY6G,YAAtB;YAAAue,UAAA,CAAArb,IAAA;YAAA;UAAA;UAAA,OAAAqb,UAAA,CAAAlb,MAAA,WACS;YAAE+J,IAAI,EAAE/X,UAAU,CAACspB,QAAnB;YAA6BjP,YAAY,EAAEvW;WAAlD;QAAA;UAAA,OAAAolB,UAAA,CAAAlb,MAAA,WAGK;YAAE+J,IAAI,EAAE/X,UAAU,CAAC0J,IAAnB;YAAyBA,IAAI,EAAE5F;WAAtC;QAAA;QAAA;UAAA,OAAAolB,UAAA,CAAAjb,IAAA;MAAA;IAAA,GAAAwa,SAAA;EAAA,CACD;EAAA,OAAAD,mBAAA,CAAAzkB,KAAA,OAAAyG,SAAA;AAAA;AAKD,SAASqM,uBAATA,CACEhc,OADF,EAEET,QAFF,EAGEsR,MAHF,EAIEsJ,UAJF,EAIyB;EAEvB,IAAI3X,GAAG,GAAGxC,OAAO,CAACC,SAAR,CAAkBsrB,iBAAiB,CAAChsB,QAAD,CAAnC,CAA+C,CAAAiE,QAA/C,EAAV;EACA,IAAIsL,IAAI,GAAgB;IAAE+B,MAAA,EAAAA;GAA1B;EAEA,IAAIsJ,UAAU,IAAIf,gBAAgB,CAACe,UAAU,CAACvF,UAAZ,CAAlC,EAA2D;IACzD,IAAMA,UAAF,GAAwCuF,UAA5C,CAAMvF,UAAF;MAAcE,WAAd,GAAwCqF,UAA5C,CAAkBrF,WAAd;MAA2BC,QAAA,GAAaoF,UAA5C,CAA+BpF,QAAA;IAC/BjG,IAAI,CAACqO,MAAL,GAAcvI,UAAU,CAAC8Z,WAAX,EAAd;IACA5f,IAAI,CAAC6f,IAAL,GACE7Z,WAAW,KAAK,mCAAhB,GACI2W,6BAA6B,CAAC1W,QAAD,CADjC,GAEIA,QAHN;EAID,CAZsB;;EAevB,OAAO,IAAIqH,OAAJ,CAAY5Z,GAAZ,EAAiBsM,IAAjB,CAAP;AACD;AAED,SAAS2c,6BAATA,CAAuC1W,QAAvC,EAAyD;EACvD,IAAIyW,YAAY,GAAG,IAAIoD,eAAJ,EAAnB;EAAA,IAAAC,UAAA,GAAA9mB,0BAAA,CAEyBgN,QAAQ,CAAC3W,OAAT,EAAzB;IAAA0wB,MAAA;EAAA;IAAA,KAAAD,UAAA,CAAA3mB,CAAA,MAAA4mB,MAAA,GAAAD,UAAA,CAAA7vB,CAAA,IAAAmJ,IAAA,GAA6C;MAAA,IAAA4mB,YAAA,GAAAhjB,cAAA,CAAA+iB,MAAA,CAAAhsB,KAAA;QAAnCxD,GAAD,GAAAyvB,YAAA;QAAMjsB,KAAN,GAAAisB,YAAA;MACP;MACAvD,YAAY,CAACG,MAAb,CAAoBrsB,GAApB,EAAyBwD,KAAK,YAAYksB,IAAjB,GAAwBlsB,KAAK,CAACmsB,IAA9B,GAAqCnsB,KAA9D;IACD;EAAA,SAAAuF,GAAA;IAAAwmB,UAAA,CAAAxrB,CAAA,CAAAgF,GAAA;EAAA;IAAAwmB,UAAA,CAAAvmB,CAAA;EAAA;EAED,OAAOkjB,YAAP;AACD;AAED,SAASR,sBAATA,CACEpkB,OADF,EAEE2X,aAFF,EAGEG,OAHF,EAIElE,YAJF,EAKEvC,eALF,EAK4C;EAO1C;EACA,IAAInB,UAAU,GAA8B,EAA5C;EACA,IAAIE,MAAM,GAAiC,IAA3C;EACA,IAAIqQ,UAAJ;EACA,IAAI6H,UAAU,GAAG,KAAjB;EACA,IAAI5H,aAAa,GAA4B,EAA7C,CAZ0C;;EAe1C5I,OAAO,CAAC/W,OAAR,CAAgB,UAACsB,MAAD,EAAS1K,KAAT,EAAkB;IAChC,IAAIuH,EAAE,GAAGyY,aAAa,CAAChgB,KAAD,CAAb,CAAqB8G,KAArB,CAA2BS,EAApC;IACAjD,SAAS,CACP,CAACya,gBAAgB,CAACrU,MAAD,CADV,EAEP,qDAFO,CAAT;IAIA,IAAIuU,aAAa,CAACvU,MAAD,CAAjB,EAA2B;MACzB;MACA;MACA,IAAI6T,aAAa,GAAGb,mBAAmB,CAACrV,OAAD,EAAUd,EAAV,CAAvC;MACA,IAAIhB,KAAK,GAAGmE,MAAM,CAACnE,KAAnB,CAJyB;MAMzB;MACA;;MACA,IAAI0V,YAAJ,EAAkB;QAChB1V,KAAK,GAAGgG,MAAM,CAACud,MAAP,CAAc7N,YAAd,EAA4B,CAA5B,CAAR;QACAA,YAAY,GAAG9b,SAAf;MACD;MAEDsY,MAAM,GAAGA,MAAM,IAAI,EAAnB,CAbyB;;MAgBzB,IAAIA,MAAM,CAAC8F,aAAa,CAACzX,KAAd,CAAoBS,EAArB,CAAN,IAAkC,IAAtC,EAA4C;QAC1CkR,MAAM,CAAC8F,aAAa,CAACzX,KAAd,CAAoBS,EAArB,CAAN,GAAiChB,KAAjC;MACD,CAlBwB;;MAqBzBgS,UAAU,CAAChR,EAAD,CAAV,GAAiBpH,SAAjB,CArByB;MAwBzB;;MACA,IAAI,CAACwwB,UAAL,EAAiB;QACfA,UAAU,GAAG,IAAb;QACA7H,UAAU,GAAGjT,oBAAoB,CAACnL,MAAM,CAACnE,KAAR,CAApB,GACTmE,MAAM,CAACnE,KAAP,CAAakK,MADJ,GAET,GAFJ;MAGD;MACD,IAAI/F,MAAM,CAACgG,OAAX,EAAoB;QAClBqY,aAAa,CAACxhB,EAAD,CAAb,GAAoBmD,MAAM,CAACgG,OAA3B;MACD;IACF,CAlCD,MAkCO;MACL,IAAIwO,gBAAgB,CAACxU,MAAD,CAApB,EAA8B;QAC5BgP,eAAe,CAAC9I,GAAhB,CAAoBrJ,EAApB,EAAwBmD,MAAM,CAACuW,YAA/B;QACA1I,UAAU,CAAChR,EAAD,CAAV,GAAiBmD,MAAM,CAACuW,YAAP,CAAoB3Q,IAArC;MACD,CAHD,MAGO;QACLiI,UAAU,CAAChR,EAAD,CAAV,GAAiBmD,MAAM,CAAC4F,IAAxB;MACD,CANI;MASL;;MACA,IACE5F,MAAM,CAACoe,UAAP,IAAqB,IAArB,IACApe,MAAM,CAACoe,UAAP,KAAsB,GADtB,IAEA,CAAC6H,UAHH,EAIE;QACA7H,UAAU,GAAGpe,MAAM,CAACoe,UAApB;MACD;MACD,IAAIpe,MAAM,CAACgG,OAAX,EAAoB;QAClBqY,aAAa,CAACxhB,EAAD,CAAb,GAAoBmD,MAAM,CAACgG,OAA3B;MACD;IACF;EACF,CA7DD,EAf0C;EA+E1C;EACA;;EACA,IAAIuL,YAAJ,EAAkB;IAChBxD,MAAM,GAAGwD,YAAT;IACA1D,UAAU,CAAChM,MAAM,CAACwO,IAAP,CAAYkB,YAAZ,EAA0B,CAA1B,CAAD,CAAV,GAA2C9b,SAA3C;EACD;EAED,OAAO;IACLoY,UADK,EACLA,UADK;IAELE,MAFK,EAELA,MAFK;IAGLqQ,UAAU,EAAEA,UAAU,IAAI,GAHrB;IAILC,aAAA,EAAAA;GAJF;AAMD;AAED,SAAS/H,iBAATA,CACE9gB,KADF,EAEEmI,OAFF,EAGE2X,aAHF,EAIEG,OAJF,EAKElE,YALF,EAMEgE,oBANF,EAOEI,cAPF,EAQE3G,eARF,EAQ4C;EAK1C,IAAAkX,qBAAA,GAA6BnE,sBAAsB,CACjDpkB,OADiD,EAEjD2X,aAFiD,EAGjDG,OAHiD,EAIjDlE,YAJiD,EAKjDvC,eALiD,CAAnD;IAAMnB,UAAF,GAAAqY,qBAAA,CAAErY,UAAF;IAAcE,MAAA,GAAAmY,qBAAA,CAAAnY,MAAA,CALwB;;EAc1C,KAAK,IAAIzY,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGigB,oBAAoB,CAAC5f,MAAjD,EAAyDL,KAAK,EAA9D,EAAkE;IAChE,IAAA6wB,qBAAA,GAAqB5Q,oBAAoB,CAACjgB,KAAD,CAAzC;MAAMe,GAAF,GAAA8vB,qBAAA,CAAE9vB,GAAF;MAAOsL,KAAA,GAAAwkB,qBAAA,CAAAxkB,KAAA;IACX/H,SAAS,CACP+b,cAAc,KAAKlgB,SAAnB,IAAgCkgB,cAAc,CAACrgB,KAAD,CAAd,KAA0BG,SADnD,EAEP,2CAFO,CAAT;IAIA,IAAIuK,MAAM,GAAG2V,cAAc,CAACrgB,KAAD,CAA3B,CANgE;;IAShE,IAAIif,aAAa,CAACvU,MAAD,CAAjB,EAA2B;MACzB,IAAI6T,aAAa,GAAGb,mBAAmB,CAACxd,KAAK,CAACmI,OAAP,EAAgBgE,KAAK,CAACvF,KAAN,CAAYS,EAA5B,CAAvC;MACA,IAAI,EAAEkR,MAAM,IAAIA,MAAM,CAAC8F,aAAa,CAACzX,KAAd,CAAoBS,EAArB,CAAlB,CAAJ,EAAiD;QAC/CkR,MAAM,GAAApT,QAAA,KACDoT,MADC,EAAAhG,eAAA,KAEH8L,aAAa,CAACzX,KAAd,CAAoBS,EAArB,EAA0BmD,MAAM,CAACnE,KAAA,EAFnC;MAID;MACDrG,KAAK,CAACwY,QAAN,CAAetF,MAAf,CAAsBrS,GAAtB;IACD,CATD,MASO,IAAIge,gBAAgB,CAACrU,MAAD,CAApB,EAA8B;MACnC;MACA;MACApG,SAAS,CAAC,KAAD,EAAQ,yCAAR,CAAT;IACD,CAJM,MAIA,IAAI4a,gBAAgB,CAACxU,MAAD,CAApB,EAA8B;MACnC;MACA;MACApG,SAAS,CAAC,KAAD,EAAQ,iCAAR,CAAT;IACD,CAJM,MAIA;MACL,IAAI2e,WAAW,GAA0B;QACvC/iB,KAAK,EAAE,MADgC;QAEvCoQ,IAAI,EAAE5F,MAAM,CAAC4F,IAF0B;QAGvC+F,UAAU,EAAElW,SAH2B;QAIvCmW,UAAU,EAAEnW,SAJ2B;QAKvCoW,WAAW,EAAEpW,SAL0B;QAMvCqW,QAAQ,EAAErW,SAN6B;QAOvC,2BAA6B;OAP/B;MASAD,KAAK,CAACwY,QAAN,CAAe9H,GAAf,CAAmB7P,GAAnB,EAAwBkiB,WAAxB;IACD;EACF;EAED,OAAO;IAAE1K,UAAF,EAAEA,UAAF;IAAcE,MAAA,EAAAA;GAArB;AACD;AAED,SAASuC,eAATA,CACEzC,UADF,EAEEuY,aAFF,EAGEzoB,OAHF,EAIEoQ,MAJF,EAIsC;EAEpC,IAAIsY,gBAAgB,GAAQ1rB,QAAA,KAAAyrB,aAAR,CAApB;EAAA,IAAAE,UAAA,GAAAxnB,0BAAA,CACkBnB,OAAlB;IAAA4oB,MAAA;EAAA;IAAA,KAAAD,UAAA,CAAArnB,CAAA,MAAAsnB,MAAA,GAAAD,UAAA,CAAAvwB,CAAA,IAAAmJ,IAAA,GAA2B;MAAA,IAAlByC,KAAT,GAAA4kB,MAAA,CAAA1sB,KAAA;MACE,IAAIgD,EAAE,GAAG8E,KAAK,CAACvF,KAAN,CAAYS,EAArB;MACA,IAAIupB,aAAa,CAACI,cAAd,CAA6B3pB,EAA7B,CAAJ,EAAsC;QACpC,IAAIupB,aAAa,CAACvpB,EAAD,CAAb,KAAsBpH,SAA1B,EAAqC;UACnC4wB,gBAAgB,CAACxpB,EAAD,CAAhB,GAAuBupB,aAAa,CAACvpB,EAAD,CAApC;QACD;OAHH,MAQO,IAAIgR,UAAU,CAAChR,EAAD,CAAV,KAAmBpH,SAAvB,EAAkC;QACvC4wB,gBAAgB,CAACxpB,EAAD,CAAhB,GAAuBgR,UAAU,CAAChR,EAAD,CAAjC;MACD;MAED,IAAIkR,MAAM,IAAIA,MAAM,CAACyY,cAAP,CAAsB3pB,EAAtB,CAAd,EAAyC;QACvC;QACA;MACD;IACF;EAAA,SAAAuC,GAAA;IAAAknB,UAAA,CAAAlsB,CAAA,CAAAgF,GAAA;EAAA;IAAAknB,UAAA,CAAAjnB,CAAA;EAAA;EACD,OAAOgnB,gBAAP;AACD;AAGD;AACA;;AACA,SAASrT,mBAATA,CACErV,OADF,EAEEwW,OAFF,EAEkB;EAEhB,IAAIsS,eAAe,GAAGtS,OAAO,GACzBxW,OAAO,CAACjE,KAAR,CAAc,CAAd,EAAiBiE,OAAO,CAACklB,SAAR,CAAmB,UAAAxV,CAAD;IAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQS,EAAR,KAAesX,OAAxC;EAAA,EAAmD,IAApE,CADyB,GAAAvX,kBAAA,CAErBe,OAAJ,CAFJ;EAGA,OACE8oB,eAAe,CAACC,OAAhB,GAA0BvH,IAA1B,CAAgC,UAAA9R,CAAD;IAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQuqB,gBAAR,KAA6B,IAAnE;EAAA,MACAhpB,OAAO,CAAC,CAAD,CAFT;AAID;AAED,SAASwP,sBAATA,CAAgC7Q,MAAhC,EAAiE;EAI/D;EACA,IAAIF,KAAK,GAAGE,MAAM,CAAC6iB,IAAP,CAAa,UAAA5X,CAAD;IAAA,OAAOA,CAAC,CAACjS,KAAF,IAAW,CAACiS,CAAC,CAACpQ,IAAd,IAAsBoQ,CAAC,CAACpQ,IAAF,KAAW,GAApD;EAAA,EAA4D;IACtE0F,EAAE;GADJ;EAIA,OAAO;IACLc,OAAO,EAAE,CACP;MACEmE,MAAM,EAAE,EADV;MAEEtL,QAAQ,EAAE,EAFZ;MAGEuL,YAAY,EAAE,EAHhB;MAIE3F,KAAA,EAAAA;IAJF,CADO,CADJ;IASLA,KAAA,EAAAA;GATF;AAWD;AAED,SAAS6Q,sBAATA,CACElH,MADF,EAYQ6gB,MAAA;EAAA,IAAAC,MAAA,GAAAD,MAAA,cAAF,EAAE,GAAAA,MAAA;IATJpwB,QADF,GAAAqwB,MAAA,CACErwB,QADF;IAEE2d,OAFF,GAAA0S,MAAA,CAEE1S,OAFF;IAGED,MAHF,GAAA2S,MAAA,CAGE3S,MAHF;IAIED,IAAA,GAAA4S,MAAA,CAAA5S,IAAA;EAQF,IAAIhJ,UAAU,GAAG,sBAAjB;EACA,IAAI6b,YAAY,GAAG,iCAAnB;EAEA,IAAI/gB,MAAM,KAAK,GAAf,EAAoB;IAClBkF,UAAU,GAAG,aAAb;IACA,IAAIiJ,MAAM,IAAI1d,QAAV,IAAsB2d,OAA1B,EAAmC;MACjC2S,YAAY,GACV,aAAc,GAAA5S,MAAd,sBAAoC1d,QAApC,4DAC2C2d,OAD3C,GADF;IAID,CALD,MAKO,IAAIF,IAAI,KAAK,cAAb,EAA6B;MAClC6S,YAAY,GAAG,qCAAf;IACD;EACF,CAVD,MAUO,IAAI/gB,MAAM,KAAK,GAAf,EAAoB;IACzBkF,UAAU,GAAG,WAAb;IACA6b,YAAY,GAAa,aAAA3S,OAAb,GAA6C,6BAAA3d,QAA7C,GAAZ;EACD,CAHM,MAGA,IAAIuP,MAAM,KAAK,GAAf,EAAoB;IACzBkF,UAAU,GAAG,WAAb;IACA6b,YAAY,+BAA4BtwB,QAA5B,GAAZ;EACD,CAHM,MAGA,IAAIuP,MAAM,KAAK,GAAf,EAAoB;IACzBkF,UAAU,GAAG,oBAAb;IACA,IAAIiJ,MAAM,IAAI1d,QAAV,IAAsB2d,OAA1B,EAAmC;MACjC2S,YAAY,GACV,aAAc,GAAA5S,MAAM,CAACuR,WAAP,EAAd,GAAkD,mBAAAjvB,QAAlD,GAC4C,0DAAA2d,OAD5C,GADF;KADF,MAKO,IAAID,MAAJ,EAAY;MACjB4S,YAAY,GAA8B,8BAAA5S,MAAM,CAACuR,WAAP,EAA9B,GAAZ;IACD;EACF;EAED,OAAO,IAAIza,aAAJ,CACLjF,MAAM,IAAI,GADL,EAELkF,UAFK,EAGL,IAAIlR,KAAJ,CAAU+sB,YAAV,CAHK,EAIL,IAJK,CAAP;AAMD;;AAGD,SAASzQ,YAATA,CAAsBZ,OAAtB,EAA2C;EACzC,KAAK,IAAI7X,CAAC,GAAG6X,OAAO,CAAC9f,MAAR,GAAiB,CAA9B,EAAiCiI,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;IAC5C,IAAIoC,MAAM,GAAGyV,OAAO,CAAC7X,CAAD,CAApB;IACA,IAAIyW,gBAAgB,CAACrU,MAAD,CAApB,EAA8B;MAC5B,OAAOA,MAAP;IACD;EACF;AACF;AAED,SAASsiB,iBAATA,CAA2BnrB,IAA3B,EAAmC;EACjC,IAAI6D,UAAU,GAAG,OAAO7D,IAAP,KAAgB,QAAhB,GAA2BC,SAAS,CAACD,IAAD,CAApC,GAA6CA,IAA9D;EACA,OAAOL,UAAU,CAAA6D,QAAA,KAAMK,UAAN;IAAkB1D,IAAI,EAAE;GAAzC;AACD;AAED,SAASwb,gBAATA,CAA0B1S,CAA1B,EAAuCC,CAAvC,EAAkD;EAChD,OACED,CAAC,CAAC5J,QAAF,KAAe6J,CAAC,CAAC7J,QAAjB,IAA6B4J,CAAC,CAAC/I,MAAF,KAAagJ,CAAC,CAAChJ,MAA5C,IAAsD+I,CAAC,CAAC9I,IAAF,KAAW+I,CAAC,CAAC/I,IADrE;AAGD;AAED,SAASkd,gBAATA,CAA0BxU,MAA1B,EAA4C;EAC1C,OAAOA,MAAM,CAACiU,IAAP,KAAgB/X,UAAU,CAACspB,QAAlC;AACD;AAED,SAASjR,aAATA,CAAuBvU,MAAvB,EAAyC;EACvC,OAAOA,MAAM,CAACiU,IAAP,KAAgB/X,UAAU,CAACL,KAAlC;AACD;AAED,SAASwY,gBAATA,CAA0BrU,MAA1B,EAA6C;EAC3C,OAAO,CAACA,MAAM,IAAIA,MAAM,CAACiU,IAAlB,MAA4B/X,UAAU,CAAC6O,QAA9C;AACD;AAED,SAASyT,UAATA,CAAoB3kB,KAApB,EAA8B;EAC5B,OACEA,KAAK,IAAI,IAAT,IACA,OAAOA,KAAK,CAACkM,MAAb,KAAwB,QADxB,IAEA,OAAOlM,KAAK,CAACoR,UAAb,KAA4B,QAF5B,IAGA,OAAOpR,KAAK,CAACmM,OAAb,KAAyB,QAHzB,IAIA,OAAOnM,KAAK,CAAC6rB,IAAb,KAAsB,WALxB;AAOD;AAED,SAASvF,kBAATA,CAA4BngB,MAA5B,EAAuC;EACrC,IAAI,CAACwe,UAAU,CAACxe,MAAD,CAAf,EAAyB;IACvB,OAAO,KAAP;EACD;EAED,IAAI+F,MAAM,GAAG/F,MAAM,CAAC+F,MAApB;EACA,IAAIzP,QAAQ,GAAG0J,MAAM,CAACgG,OAAP,CAAewC,GAAf,CAAmB,UAAnB,CAAf;EACA,OAAOzC,MAAM,IAAI,GAAV,IAAiBA,MAAM,IAAI,GAA3B,IAAkCzP,QAAQ,IAAI,IAArD;AACD;AAED,SAAS4pB,oBAATA,CAA8B6G,GAA9B,EAAsC;EACpC,OACEA,GAAG,IACHvI,UAAU,CAACuI,GAAG,CAAC3G,QAAL,CADV,KAEC2G,GAAG,CAAC9S,IAAJ,KAAa/X,UAAU,CAAC0J,IAAxB,IAAgC1J,UAAU,CAACL,KAF5C,CADF;AAKD;AAED,SAASsiB,aAATA,CAAuBjK,MAAvB,EAAqC;EACnC,OAAO3I,mBAAmB,CAACvO,GAApB,CAAwBkX,MAAxB,CAAP;AACD;AAED,SAAS/D,gBAATA,CAA0B+D,MAA1B,EAAyC;EACvC,OAAO7I,oBAAoB,CAACrO,GAArB,CAAyBkX,MAAzB,CAAP;AACD;AAAA,SAEciH,sBAAfA,CAAA6L,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,uBAAA,CAAArnB,KAAA,OAAAyG,SAAA;AAAA;AAAA,SAAA4gB,wBAAA;EAAAA,uBAAA,GAAAhe,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAA+d,UACEzM,cADF,EAEExF,aAFF,EAGEG,OAHF,EAIE7N,MAJF,EAKEya,SALF,EAMEqB,iBANF;IAAA,IAAA8D,KAAA,EAAAlyB,KAAA;IAAA,OAAAiU,mBAAA,GAAAI,IAAA,UAAA8d,WAAAC,UAAA;MAAA,kBAAAA,UAAA,CAAA5d,IAAA,GAAA4d,UAAA,CAAA3d,IAAA;QAAA;UAAAyd,KAAA,gBAAAje,mBAAA,GAAAC,IAAA,UAAAge,MAAAlyB,KAAA;YAAA,IAAA0K,MAAA,EAAA2B,KAAA,EAAAgiB,YAAA,EAAAgE,oBAAA;YAAA,OAAApe,mBAAA,GAAAI,IAAA,UAAAie,OAAAC,UAAA;cAAA,kBAAAA,UAAA,CAAA/d,IAAA,GAAA+d,UAAA,CAAA9d,IAAA;gBAAA;kBASQ/J,MAAM,GAAGyV,OAAO,CAACngB,KAAD,CAApB;kBACIqM,KAAK,GAAG2T,aAAa,CAAChgB,KAAD,CAAzB;kBACIquB,YAAY,GAAG7I,cAAc,CAACqE,IAAf,CAChB,UAAA9R,CAAD;oBAAA,OAAOA,CAAC,CAACjR,KAAF,CAAQS,EAAR,KAAe8E,KAAK,CAACvF,KAAN,CAAYS,EADjB;kBAAA,EAAnB;kBAGI8qB,oBAAoB,GACtBhE,YAAY,IAAI,IAAhB,IACA,CAACH,kBAAkB,CAACG,YAAD,EAAehiB,KAAf,CADnB,IAEA,CAAC+hB,iBAAiB,IAAIA,iBAAiB,CAAC/hB,KAAK,CAACvF,KAAN,CAAYS,EAAb,CAAvC,MAA6DpH,SAH/D;kBAAA,MAKI+e,gBAAgB,CAACxU,MAAD,CAAhB,KAA6BqiB,SAAS,IAAIsF,oBAA1C,CAAJ;oBAAAE,UAAA,CAAA9d,IAAA;oBAAA;kBAAA;kBAAA8d,UAAA,CAAA9d,IAAA;kBAAA,OAIQuP,mBAAmB,CAACtZ,MAAD,EAAS4H,MAAT,EAAiBya,SAAjB,CAAnB,CAA+Cja,IAA/C,CAAqD,UAAApI,MAAD,EAAW;oBACnE,IAAIA,MAAJ,EAAY;sBACVyV,OAAO,CAACngB,KAAD,CAAP,GAAiB0K,MAAM,IAAIyV,OAAO,CAACngB,KAAD,CAAlC;oBACD;kBACF,CAJK,CAAN;gBAAA;gBAAA;kBAAA,OAAAuyB,UAAA,CAAA1d,IAAA;cAAA;YAAA,GAAAqd,KAAA;UAAA;UAfKlyB,KAAK,GAAG,CAAjB;QAAA;UAAA,MAAoBA,KAAK,GAAGmgB,OAAO,CAAC9f,MAApC;YAAA+xB,UAAA,CAAA3d,IAAA;YAAA;UAAA;UAAA,OAAA2d,UAAA,CAAAI,aAAA,CAAAN,KAAA,CAAAlyB,KAAA;QAAA;UAA4CA,KAAK,EAAjD;UAAAoyB,UAAA,CAAA3d,IAAA;UAAA;QAAA;QAAA;UAAA,OAAA2d,UAAA,CAAAvd,IAAA;MAAA;IAAA,GAAAod,SAAA;EAAA,CAsBD;EAAA,OAAAD,uBAAA,CAAArnB,KAAA,OAAAyG,SAAA;AAAA;AAAA,SAEc4S,mBAAfA,CAAAyO,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,oBAAA,CAAAjoB,KAAA,OAAAyG,SAAA;AAAA;AAAA,SAAAwhB,qBAAA;EAAAA,oBAAA,GAAA5e,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAA2e,UACEnoB,MADF,EAEE4H,MAFF,EAGEwgB,MAHF;IAAA,IAAA3f,OAAA;IAAA,OAAAc,mBAAA,GAAAI,IAAA,UAAA0e,WAAAC,UAAA;MAAA,kBAAAA,UAAA,CAAAxe,IAAA,GAAAwe,UAAA,CAAAve,IAAA;QAAA;UAGgB,IAAdqe,MAAc;YAAdA,MAAc,GAAL,KAAK;UAAA;UAAAE,UAAA,CAAAve,IAAA;UAAA,OAEM/J,MAAM,CAACuW,YAAP,CAAoBnM,WAApB,CAAgCxC,MAAhC,CAApB;QAAA;UAAIa,OAAO,GAAA6f,UAAA,CAAAre,IAAA;UAAA,KACPxB,OAAJ;YAAA6f,UAAA,CAAAve,IAAA;YAAA;UAAA;UAAA,OAAAue,UAAA,CAAApe,MAAA;QAAA;UAAA,KAIIke,MAAJ;YAAAE,UAAA,CAAAve,IAAA;YAAA;UAAA;UAAAue,UAAA,CAAAxe,IAAA;UAAA,OAAAwe,UAAA,CAAApe,MAAA,WAEW;YACL+J,IAAI,EAAE/X,UAAU,CAAC0J,IADZ;YAELA,IAAI,EAAE5F,MAAM,CAACuW,YAAP,CAAoBgS;WAF5B;QAAA;UAAAD,UAAA,CAAAxe,IAAA;UAAAwe,UAAA,CAAA/O,EAAA,GAAA+O,UAAA;UAAA,OAAAA,UAAA,CAAApe,MAAA,WAMO;YACL+J,IAAI,EAAE/X,UAAU,CAACL,KADZ;YAELA,KAAK,EAAAysB,UAAA,CAAA/O;WAFP;QAAA;UAAA,OAAA+O,UAAA,CAAApe,MAAA,WAOG;YACL+J,IAAI,EAAE/X,UAAU,CAAC0J,IADZ;YAELA,IAAI,EAAE5F,MAAM,CAACuW,YAAP,CAAoB3Q;WAF5B;QAAA;QAAA;UAAA,OAAA0iB,UAAA,CAAAne,IAAA;MAAA;IAAA,GAAAge,SAAA;EAAA,CAID;EAAA,OAAAD,oBAAA,CAAAjoB,KAAA,OAAAyG,SAAA;AAAA;AAED,SAAS+b,kBAATA,CAA4BprB,MAA5B,EAA0C;EACxC,OAAO,IAAIsuB,eAAJ,CAAoBtuB,MAApB,EAA4BmxB,MAA5B,CAAmC,OAAnC,CAA4C,CAAAznB,IAA5C,CAAkD,UAAAoI,CAAD;IAAA,OAAOA,CAAC,KAAK,EAA9D;EAAA,EAAP;AACD;AAGD;;AACA,SAAS2T,qBAATA,CACEnb,KADF,EAEEkM,UAFF,EAEuB;EAErB,IAAMzR,KAAF,GAA8BuF,KAAlC,CAAMvF,KAAF;IAAS5F,QAAT,GAA8BmL,KAAlC,CAAanL,QAAT;IAAmBsL,MAAA,GAAWH,KAAlC,CAAuBG,MAAA;EACvB,OAAO;IACLjF,EAAE,EAAET,KAAK,CAACS,EADL;IAELrG,QAFK,EAELA,QAFK;IAGLsL,MAHK,EAGLA,MAHK;IAIL8D,IAAI,EAAEiI,UAAU,CAACzR,KAAK,CAACS,EAAP,CAJX;IAKL4rB,MAAM,EAAErsB,KAAK,CAACqsB;GALhB;AAOD;AAED,SAASzU,cAATA,CACErW,OADF,EAEErH,QAFF,EAE6B;EAE3B,IAAIe,MAAM,GACR,OAAOf,QAAP,KAAoB,QAApB,GAA+Bc,SAAS,CAACd,QAAD,CAAT,CAAoBe,MAAnD,GAA4Df,QAAQ,CAACe,MADvE;EAEA,IACEsG,OAAO,CAACA,OAAO,CAAChI,MAAR,GAAiB,CAAlB,CAAP,CAA4ByG,KAA5B,CAAkC9G,KAAlC,IACAmtB,kBAAkB,CAACprB,MAAM,IAAI,EAAX,CAFpB,EAGE;IACA;IACA,OAAOsG,OAAO,CAACA,OAAO,CAAChI,MAAR,GAAiB,CAAlB,CAAd;EACD,CAV0B;EAY3B;;EACA,IAAI+yB,WAAW,GAAG9jB,0BAA0B,CAACjH,OAAD,CAA5C;EACA,OAAO+qB,WAAW,CAACA,WAAW,CAAC/yB,MAAZ,GAAqB,CAAtB,CAAlB;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}